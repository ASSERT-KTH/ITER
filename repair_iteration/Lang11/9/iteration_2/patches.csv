bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.nextDouble()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&  random.nextDouble()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.nextDouble()  ==  0)  {	  }    else    if(count!=    0    &&    random.nextDouble()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
2	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.nextString()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&  random.nextString()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.nextString()  ==  0)  {	  }    else    if(count!=    0    &&    random.nextDouble()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
3	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.nextChar()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&  random.nextChar()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.nextChar()  ==  0)  {	  }    else    if(count!=    0    &&    random.nextDouble()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
4	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||  random.nextDouble()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||  random.nextDouble()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||  random.nextDouble()  ==  0)  {	  }    else    if(count!=    0    &&    random.nextDouble()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
5	[BUG]  [BUGGY]  if(letters)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
6	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
7	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
8	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1.. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1.. ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1.. ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
9	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  1. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  1. ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  1. ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
10	[BUG]  [BUGGY]  if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
11	[BUG]  [BUGGY]  if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
12	[BUG]  [BUGGY]  if(!letters)  {  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
13	[BUG]  [BUGGY]  if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
14	[BUG]  [BUGGY]  String  ch  =  random.getChars(start,  end);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  String  ch  =  random.getChars(start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	String  ch  =  random.getChars(start,  end);	  char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
15	[BUG]  [BUGGY]  char  ch  =  random.getChars(count,  start,  end);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.getChars(count,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.getChars(count,  start,  end);	  char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
16	[BUG]  [BUGGY]  char  ch  =  random.getChars(buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.getChars(buffer,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.getChars(buffer,  start,  end);	  char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
17	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  letters);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.getChars(start,  end,  letters);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.getChars(start,  end,  letters);	  char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
18	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
19	[BUG]  [BUGGY]  bucket[count]  =  random.toLowerCase(ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  random.toLowerCase(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  random.toLowerCase(ch);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
20	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toUpperCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
21	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
22	[BUG]  [BUGGY]  if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
26	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
27	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
28	[BUG]  [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
29	[BUG]  [BUGGY]  while(buffer.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffer.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffer.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
30	[BUG]  [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffered!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
31	[BUG]  [BUGGY]  while(!letters  &&(count  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&(count  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&(count  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(!letters    &&(numbers    ||    letters))    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
32	[BUG]  [BUGGY]  while(!letters  &&(numbers  ||  numbers))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&(numbers  ||  numbers))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&(numbers  ||  numbers))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(!letters    &&(numbers    ||    letters))    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
33	[BUG]  [BUGGY]  while(!numbers  &&(count  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!numbers  &&(count  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!numbers  &&(count  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(!letters    &&(numbers    ||    letters))    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
34	[BUG]  [BUGGY]  while(!letters  &&(count  ||  numbers))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&(count  ||  numbers))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&(count  ||  numbers))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(!letters    &&(numbers    ||    letters))    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
35	[BUG]  [BUGGY]  String  ch  =  random.quote(ch);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  String  ch  =  random.quote(ch);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	String  ch  =  random.quote(ch);	  char    ch    =    random.quote(ch);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
36	[BUG]  [BUGGY]  char  ch  =  random.quote(Character.toLowerCase(count));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.quote(Character.toLowerCase(count));  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.quote(Character.toLowerCase(count));	  char    ch    =    random.quote(ch);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
37	[BUG]  [BUGGY]  char  ch  =  random.quote(chars);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.quote(chars);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.quote(chars);	  char    ch    =    random.quote(ch);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
38	[BUG]  [BUGGY]  char  ch  =  random.quote(count);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.quote(count);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.quote(count);	  char    ch    =    random.quote(ch);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
39	[BUG]  [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  letters);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  letters);	  char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
42	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start,  end);	  char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
43	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer  =  random.getChars(ch,  0,  end);	  char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
44	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  end);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer  =  random.getChars(count,  start,  end);	  char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
45	[BUG]  [BUGGY]  Character(ch)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Character(ch)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Character(ch)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.EMPTY_STRING_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
46	[BUG]  [BUGGY]  Character(ch,  letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Character(ch,  letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Character(ch,  letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.EMPTY_STRING_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
47	[BUG]  [BUGGY]  RandomStringUtils.EMPTY_STRING_ARRAY;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  RandomStringUtils.EMPTY_STRING_ARRAY;  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	RandomStringUtils.EMPTY_STRING_ARRAY;	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.EMPTY_STRING_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
48	[BUG]  [BUGGY]  Character(ch)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY  +  1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Character(ch)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY  +  1;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Character(ch)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY  +  1;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.EMPTY_STRING_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
49	[BUG]  [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
50	[BUG]  [BUGGY]  while(buffer.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffer.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffer.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
51	[BUG]  [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffered!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
52	[BUG]  [BUGGY]  if(count  >  0)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
53	[BUG]  [BUGGY]  if(letters)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
55	[BUG]  [BUGGY]  bucket)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  if(letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
56	[BUG]  [BUGGY]  degree(count,  letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  degree(count,  letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	degree(count,  letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	  if(letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
57	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextInt(ch,  start,  end);	  Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
58	[BUG]  [BUGGY]  Random  random  =  random.nextInt(count,  start,  end);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextInt(count,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextInt(count,  start,  end);	  Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
59	[BUG]  [BUGGY]  Random  random  =  random.nextInt(chars,  start,  end);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextInt(chars,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextInt(chars,  start,  end);	  Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
60	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  start,  end);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextInt(0,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextInt(0,  start,  end);	  Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
61	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
62	[BUG]  [BUGGY]  while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
64	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
65	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch,  random);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch,  random);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch,  random);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
66	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[0]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[0]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[0]  =  Character.toUpperCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
67	[BUG]  [BUGGY]  while((  letters  &  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    >=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
68	[BUG]  [BUGGY]  while((  letters  &&  ch.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  ch.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  ch.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    >=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
69	[BUG]  [BUGGY]  while((  letters  &  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    >=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
70	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    nu    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    nu    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    nu    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
73	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  nu  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  nu  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  nu	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    nu    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  char[]  buffer[]  =  RandomStringUtils.getChars(ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  RandomStringUtils.getChars(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  RandomStringUtils.getChars(ch);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
75	[BUG]  [BUGGY]  bucket[count]  =  RandomStringUtils.getChars(ch);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  RandomStringUtils.getChars(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  RandomStringUtils.getChars(ch);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
76	[BUG]  [BUGGY]  bucket[count]  =  RandomStringUtils.getChars(count);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  RandomStringUtils.getChars(count);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  RandomStringUtils.getChars(count);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
77	[BUG]  [BUGGY]  char[]  buffer[]  =  RandomStringUtils.getChars(count);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  RandomStringUtils.getChars(count);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  RandomStringUtils.getChars(count);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
78	[BUG]  [BUGGY]  while((  letters  &&  ch!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  ch!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  ch!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
79	[BUG]  [BUGGY]  while((  letters  &&  ch.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  ch.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  ch.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
80	[BUG]  [BUGGY]  bucket[count]  =  random.nullValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  random.nullValue();  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  random.nullValue();	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
81	[BUG]  [BUGGY]  bucket[count]  =  random.quote(chars[count]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  random.quote(chars[count]);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  random.quote(chars[count]);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
82	[BUG]  [BUGGY]  ger[]  buffer[]  =  random.getChars(ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  ger[]  buffer[]  =  random.getChars(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	ger[]  buffer[]  =  random.getChars(ch);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
83	[BUG]  [BUGGY]  ger[]  buffer[]  =  random.getChars(start,  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  ger[]  buffer[]  =  random.getChars(start,  end);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	ger[]  buffer[]  =  random.getChars(start,  end);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
84	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.arrayToString(buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
85	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  0);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  0);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  0);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.arrayToString(buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
86	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.arrayToString(buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
87	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  0,  chars.length);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  0,  chars.length);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  0,  chars.length);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.arrayToString(buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
88	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
89	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
90	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
91	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
92	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
93	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
94	[BUG]  [BUGGY]  bucket[count]  =  RandomStringUtils.toLowerCase(ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  RandomStringUtils.toLowerCase(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  RandomStringUtils.toLowerCase(ch);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
95	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch,  random);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch,  random);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch,  random);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
96	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||  random.length  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||  random.length  >  0)  {	  }    else    if(count    ==    0    &&    random.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
97	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&  random.length!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.length!=  0)  {	  }    else    if(count    ==    0    &&    random.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
98	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.length  >  0  ||  letters)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&  random.length  >  0  ||  letters)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.length  >  0  ||  letters)  {	  }    else    if(count    ==    0    &&    random.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
99	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&  random.length  >=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.length  >=  0)  {	  }    else    if(count    ==    0    &&    random.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
100	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
101	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
102	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
103	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
104	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
105	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
106	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
107	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextCharacterEscape()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextCharacterEscape()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextCharacterEscape()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
108	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getCHARs(i);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
109	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getCHARs(i);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
110	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getCHARs(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getCHARs(i);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
111	[BUG]  [BUGGY]  if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
112	[BUG]  [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
113	[BUG]  [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
114	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1 ",  letters);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1 ",  letters);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1 ",  letters);	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
115	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1, ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1, ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1, ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
116	[BUG]  [BUGGY]  String  ch  =  random.nextInt(count);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  String  ch  =  random.nextInt(count);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	String  ch  =  random.nextInt(count);	  char    ch    =    random.nextInt(count);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
117	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  count);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.nextInt(buffer,  count);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextInt(buffer,  count);	  char    ch    =    random.nextInt(count);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
118	[BUG]  [BUGGY]  char  ch  =  random.nextInt(count  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.nextInt(count  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextInt(count  +  1);	  char    ch    =    random.nextInt(count);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
119	[BUG]  [BUGGY]  char  ch  =  random.nextInt(0,  count);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.nextInt(0,  count);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextInt(0,  count);	  char    ch    =    random.nextInt(count);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
120	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.. ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.. ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.. ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
121	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0. ",  letters);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0. ",  letters);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0. ",  letters);	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
122	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + ",  letters  are  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + ",  letters  are  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + ",  letters  are  less  than  0.   ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
123	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quoteByName(ch);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
124	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quoteByName(ch);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
125	[BUG]  [BUGGY]  bucket[count]  =  random.quoteByName(ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  random.quoteByName(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  random.quoteByName(ch);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quoteByName(ch);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
126	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quoteByName(ch);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quoteByName(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quoteByName(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quoteByName(ch);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
127	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.. ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.. ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.. ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
128	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  0. ",  letters);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  0. ",  letters);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  0. ",  letters);	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
129	[BUG]  [BUGGY]  if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
130	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
131	[BUG]  [BUGGY]  if(count  >  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
132	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quote(chars[i]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
133	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quote(chars[i]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
134	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quote(buffer,  chars[i]);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quote(buffer,  chars[i]);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quote(buffer,  chars[i]);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quote(chars[i]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
135	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
136	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
137	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
138	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
139	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
140	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
141	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
142	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  null;  }	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
143	[BUG]  [BUGGY]  if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
144	[BUG]  [BUGGY]  while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
145	[BUG]  [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[0];    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
146	[BUG]  [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[0];    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
147	[BUG]  [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[0];    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
148	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
149	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.null;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
150	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.null;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.null;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
151	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.remove(chars[i]);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.remove(chars[i]);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.remove(chars[i]);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.null;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
152	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[0]  =  random.null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[0]  =  random.null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[0]  =  random.null;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.null;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
153	[BUG]  [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
154	[BUG]  [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
155	[BUG]  [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
156	[BUG]  [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
157	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||  random.numbers  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||  random.numbers  >  0)  {	  }    else    if(count    ==    0    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
158	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.chars.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&  random.chars.length  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.chars.length  >  0)  {	  }    else    if(count    ==    0    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
159	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1 ",  letters);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1 ",  letters);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1 ",  letters);	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
160	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1, ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1, ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + "  is  less  than  1, ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
161	[BUG]  [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
162	[BUG]  [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
163	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nullValue()  +  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nullValue()  +  1;	  Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
164	[BUG]  [BUGGY]  Random  random  =  random.nullValue(),  count;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nullValue(),  count;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nullValue(),  count;	  Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
165	[BUG]  [BUGGY]  Random  random  =  RANDOM.nullValue();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  RANDOM.nullValue();  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  RANDOM.nullValue();	  Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
166	[BUG]  [BUGGY]  while(!letters  &&  count!=  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&  count!=  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&  count!=  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	  while(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
167	[BUG]  [BUGGY]  while(!letters  &&  random.numbers)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&  random.numbers)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&  random.numbers)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	  while(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
168	[BUG]  [BUGGY]  CharSequence[]  buffer[]  =  random.getChars(start,  i);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  CharSequence[]  buffer[]  =  random.getChars(start,  i);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	CharSequence[]  buffer[]  =  random.getChars(start,  i);	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
169	[BUG]  [BUGGY]  char[]  buffer[]  =  random.getChars(start,  i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  random.getChars(start,  i);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  random.getChars(start,  i);	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
170	[BUG]  [BUGGY]  bucket[count]  =  random.quote(chars,  start,  end);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  random.quote(chars,  start,  end);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  random.quote(chars,  start,  end);	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
171	[BUG]  [BUGGY]  }  else  if(count  <  =  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  <  =  1)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  <  =  1)  {	  }    else    if(count    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
172	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||  numbers  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||  numbers  &&  random.numbers  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||  numbers  &&  random.numbers  >  0)  {	  }    else    if(count    ==    0    ||    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
173	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||  letters  &&  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||  letters  &&  random.length  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||  letters  &&  random.length  >  0)  {	  }    else    if(count    ==    0    ||    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
174	[BUG]  [BUGGY]  char[]  buffer[]  =  random.getChars(start,  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  random.getChars(start,  end);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  random.getChars(start,  end);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
175	[BUG]  [BUGGY]  CharSequence  ch  =  random.charSequence(count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  CharSequence  ch  =  random.charSequence(count);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	CharSequence  ch  =  random.charSequence(count);	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
176	[BUG]  [BUGGY]  CharacterIterator  it  =  random.iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  CharacterIterator  it  =  random.iterator();  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	CharacterIterator  it  =  random.iterator();	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
177	[BUG]  [BUGGY]  char[]  buffer[]  =  random.charArray();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  random.charArray();  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  random.charArray();	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
178	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextCharacter()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextCharacter()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextCharacter()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextDouble()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
179	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextCharacters()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextCharacters()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextCharacters()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextDouble()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
180	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextChar()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextChar()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextChar()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextDouble()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
181	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextInt()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextInt()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextInt()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextDouble()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
182	[BUG]  [BUGGY]  Random  random  =  random.nextToken()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextToken()  +  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextToken()  +  1;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
183	[BUG]  [BUGGY]  Random  random  =  random.nextToken(),  count;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextToken(),  count;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextToken(),  count;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
184	[BUG]  [BUGGY]  Random  random  =  random.nextToken().trim();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextToken().trim();  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextToken().trim();	  Random    random    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
185	[BUG]  [BUGGY]  }  else  if(count!=  chars.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  chars.length)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  chars.length)  {	  }    else    if(count!=    letters)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
186	[BUG]  [BUGGY]  }  else  if(count  ==  chars.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  chars.length)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  chars.length)  {	  }    else    if(count!=    letters)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
187	[BUG]  [BUGGY]  }  else  if(count  >=  chars.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  >=  chars.length)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  >=  chars.length)  {	  }    else    if(count!=    letters)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
188	[BUG]  [BUGGY]  }  else  if(count  ==  letters)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  letters)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  letters)  {	  }    else    if(count!=    letters)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
189	[BUG]  [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
190	[BUG]  [BUGGY]  while(ch!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(ch!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(ch!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
191	[BUG]  [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffered!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
192	[BUG]  [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
193	[BUG]  [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
194	[BUG]  [BUGGY]  while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
195	[BUG]  [BUGGY]  bucket[count]  =  random.charAt(i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[count]  =  random.charAt(i);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[count]  =  random.charAt(i);	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
196	[BUG]  [BUGGY]  CharacterIterator  it  =  chars.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  CharacterIterator  it  =  chars.iterator();  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	CharacterIterator  it  =  chars.iterator();	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
197	[BUG]  [BUGGY]  bucket[]  buffer[]  =  random.charAt(i);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bucket[]  buffer[]  =  random.charAt(i);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket[]  buffer[]  =  random.charAt(i);	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
198	[BUG]  [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
199	[BUG]  [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
200	[BUG]  [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
201	[BUG]  [BUGGY]  reason(count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  reason(count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	reason(count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  reason(count    >    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
202	[BUG]  [BUGGY]  reason(count  <  =  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  reason(count  <  =  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	reason(count  <  =  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  reason(count    >    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
203	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1.. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1.. ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  1.. ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
204	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
205	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
206	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
207	[BUG]  [BUGGY]  if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
208	[BUG]  [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
209	[BUG]  [BUGGY]  while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
210	[BUG]  [BUGGY]  Thread.currentThread().interrupt(random);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Thread.currentThread().interrupt(random);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Thread.currentThread().interrupt(random);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
211	[BUG]  [BUGGY]  Thread.currentThread().interrupt(null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Thread.currentThread().interrupt(null);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Thread.currentThread().interrupt(null);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
212	[BUG]  [BUGGY]  Thread.currentThread().interrupt(random,  start,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Thread.currentThread().interrupt(random,  start,  end);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Thread.currentThread().interrupt(random,  start,  end);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
213	[BUG]  [BUGGY]  if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
214	[BUG]  [BUGGY]  if(count  >  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
215	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
216	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
217	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
218	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
219	[BUG]  [BUGGY]  }  else  if(count  >=  letters  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  >=  letters  &&  random.numbers  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  >=  letters  &&  random.numbers  >  0)  {	  }    else    if(count!=    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
220	[BUG]  [BUGGY]  }  else  if(count  ==  letters  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  letters  &&  random.numbers  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  letters  &&  random.numbers  >  0)  {	  }    else    if(count!=    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
221	[BUG]  [BUGGY]  }  else  if(count!=  letters  &&  random.numbers  >  1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  letters  &&  random.numbers  >  1)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  letters  &&  random.numbers  >  1)  {	  }    else    if(count!=    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
222	[BUG]  [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
223	[BUG]  [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
224	[BUG]  [BUGGY]  while(ch!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(ch!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(ch!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
225	[BUG]  [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
226	[BUG]  [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(digits)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
227	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
228	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  random.chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  random.chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  random.chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
229	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[0];  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[0];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[0];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
230	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i].toString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i].toString();  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i].toString();  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
231	[BUG]  [BUGGY]  String  ch  =  random.nextToken();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  String  ch  =  random.nextToken();  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	String  ch  =  random.nextToken();	  char    ch    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
232	[BUG]  [BUGGY]  char  ch  =  random.nextToken()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.nextToken()  +  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextToken()  +  1;	  char    ch    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
233	[BUG]  [BUGGY]  Char  ch  =  random.nextToken();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Char  ch  =  random.nextToken();  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Char  ch  =  random.nextToken();	  char    ch    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
234	[BUG]  [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  Angehöriger    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
235	[BUG]  [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.. ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.. ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.. ");  }	  Angehöriger    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
236	[BUG]  [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  ch  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  ch  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  ch  + "  is  less  than  0.   ");  }	  Angehöriger    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
237	[BUG]  [BUGGY]  Random  random  =  random.nextChar();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextChar();  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextChar();	  Random    random    =    random.next();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
238	[BUG]  [BUGGY]  Random  random  =  random.nextInt();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextInt();  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextInt();	  Random    random    =    random.next();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
239	[BUG]  [BUGGY]  try  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  try  {  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	try  {	  try    {    [Delete]    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
240	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0. ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0. ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0. ");	  try    {    [Delete]    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
241	[BUG]  [BUGGY]  random  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  random  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	random  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  bucket    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
242	[BUG]  [BUGGY]  Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  bucket    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
243	[BUG]  [BUGGY]  random  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  random  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	random  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }	  bucket    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
244	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ||(count  &&  Character.isDigit(ch))||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ||(count  &&  Character.isDigit(ch))||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))  ||(count  &&  Character.isDigit(ch))||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);	  while((    letters    &&    Character.isUpperCase(ch))    ||(numbers    &&    Character.isDigit(ch))    ||(!letters    &&!numbers))    {    buffer[i]    =    Character.toLowerCase(ch);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
245	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!count  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!count  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!count  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);	  while((    letters    &&    Character.isUpperCase(ch))    ||(numbers    &&    Character.isDigit(ch))    ||(!letters    &&!numbers))    {    buffer[i]    =    Character.toLowerCase(ch);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
246	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ||(count  &&  Character.isDigit(ch))||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ||(count  &&  Character.isDigit(ch))||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))  ||(count  &&  Character.isDigit(ch))||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  }	  while((    letters    &&    Character.isUpperCase(ch))    ||(numbers    &&    Character.isDigit(ch))    ||(!letters    &&!numbers))    {    buffer[i]    =    Character.toLowerCase(ch);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
247	[BUG]  [BUGGY]  char[]  buffer[]  =  random.quoteChars(chars);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  random.quoteChars(chars);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  random.quoteChars(chars);	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
248	[BUG]  [BUGGY]  char[]  buffer[]  =  random.getChars(start,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  random.getChars(start,  count);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  random.getChars(start,  count);	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
249	[BUG]  [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(count!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(count!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    random.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
250	[BUG]  [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffered!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    random.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
251	[BUG]  [BUGGY]  while(ch!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(ch!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(ch!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    random.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
252	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.nullValue();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
253	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.nullValue();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
254	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.nullValue();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
255	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charArray[i];    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
256	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charArray[i];    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
257	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[0];  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[0];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[0];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charArray[i];    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
258	[BUG]  [BUGGY]  char[]  buffer[]  =  random.charArray[i];  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  random.charArray[i];  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  random.charArray[i];	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charArray[i];    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
259	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
260	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
261	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
262	[BUG]  [BUGGY]  while((  letters  &  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
263	[BUG]  [BUGGY]  while((  letters  &  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
264	[BUG]  [BUGGY]  while((  numbers  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  numbers  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  numbers  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
265	[BUG]  [BUGGY]  while((  letters  &&  ch!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  ch!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  ch!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
266	[BUG]  [BUGGY]  bits)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  bits)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bits)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  wires)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
267	[BUG]  [BUGGY]  Angehriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Angehriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  Angehöriger)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
268	[BUG]  [BUGGY]  Character(count)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Character(count)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Character(count)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  Angehöriger)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
269	[BUG]  [BUGGY]  if(!letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
270	[BUG]  [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
271	[BUG]  [BUGGY]  if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
272	[BUG]  [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
273	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
274	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[i];  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[i];  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
275	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
276	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i,  random);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i,  random);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i,  random);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
277	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  1.   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  1.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  1.   ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
278	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  0.   ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
279	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getCHARs(i);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
280	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getCHARs(i);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
281	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getCHARs(i);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
282	[BUG]  [BUGGY]  Random  random  =  random.nextToken(),  start  +  count;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextToken(),  start  +  count;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextToken(),  start  +  count;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
283	[BUG]  [BUGGY]  Random  random  =  random.nextToken()  +  start;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextToken()  +  start;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextToken()  +  start;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
284	[BUG]  [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    random.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
285	[BUG]  [BUGGY]  while(chars!=  null)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars!=  null)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars!=  null)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    random.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
286	[BUG]  [BUGGY]  char  ch  =  random.nextToken()  +  count;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.nextToken()  +  count;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextToken()  +  count;	  char    ch    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
287	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buf[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buf[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buf[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
288	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.arrayToString(buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
289	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.arrayToString(buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
290	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.arrayToString(buffer,  i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.arrayToString(buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
291	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
292	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
293	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
294	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  0.   ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
295	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + ",  letters  are  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + ",  letters  are  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + ",  letters  are  less  than  0.   ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
296	[BUG]  [BUGGY]  char  ch  =  random.quote(Character.toLowerCase(ch));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.quote(Character.toLowerCase(ch));  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.quote(Character.toLowerCase(ch));	  char    ch    =    random.quote(ch);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
297	[BUG]  [BUGGY]  char  ch  =  random.quote(chars,  count);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.quote(chars,  count);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.quote(chars,  count);	  char    ch    =    random.quote(ch);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
298	[BUG]  [BUGGY]  Thread.currentThread().interrupt(throw);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Thread.currentThread().interrupt(throw);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Thread.currentThread().interrupt(throw);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
299	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
300	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(ch);  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
301	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.getChars(start,  end  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.getChars(start,  end  +  1);	  char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
302	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  start,  end);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.getChars(start,  start,  end);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.getChars(start,  start,  end);	  char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
303	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
304	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
305	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.random;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.random;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.EMPTY_STRING_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
306	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY  +  1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY  +  1;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY  +  1;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.EMPTY_STRING_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
307	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nullValue()  -  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nullValue()  -  1;	  Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
308	[BUG]  [BUGGY]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  try    {    [Delete]    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
309	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  ch);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer  =  random.getChars(start,  end,  ch);	  char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
310	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end  +  1);	  char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
311	[BUG]  [BUGGY]  while((  letters  &&  chars!=  null)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars!=  null)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars!=  null)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
312	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
313	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
314	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
315	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))!=  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))!=  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))!=  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase	  while((    letters    &&    Character.isUpperCase(ch))    ||(numbers    &&    Character.isDigit(ch))    ||(!letters    &&!numbers))    {    buffer[i]    =    Character.toLowerCase(ch);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
316	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  >=  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  >=  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))  >=  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase	  while((    letters    &&    Character.isUpperCase(ch))    ||(numbers    &&    Character.isDigit(ch))    ||(!letters    &&!numbers))    {    buffer[i]    =    Character.toLowerCase(ch);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
317	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ==  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ==  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))  ==  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase	  while((    letters    &&    Character.isUpperCase(ch))    ||(numbers    &&    Character.isDigit(ch))    ||(!letters    &&!numbers))    {    buffer[i]    =    Character.toLowerCase(ch);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
318	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
319	[BUG]  [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
320	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.null;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
321	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.null;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.null;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
322	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.null;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
323	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
324	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
325	[BUG]  [BUGGY]  }  else  if(count!=  letters.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  letters.length)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  letters.length)  {	  }    else    if(count!=    letters)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
326	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  letters  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&  letters  &&  random.numbers  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  letters  &&  random.numbers  >  0)  {	  }    else    if(count    ==    0    ||    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
327	[BUG]  [BUGGY]  }  else  if(count!=  chars.length  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  chars.length  &&  random.numbers  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  chars.length  &&  random.numbers  >  0)  {	  }    else    if(count!=    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
328	[BUG]  [BUGGY]  while(!letters  &&(numbers  ||  ch))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&(numbers  ||  ch))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&(numbers  ||  ch))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(!letters    &&(numbers    ||    letters))    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
329	[BUG]  [BUGGY]  while(!letters  &&(numbers  ||  letters  ||  ch))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&(numbers  ||  letters  ||  ch))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&(numbers  ||  letters  ||  ch))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(!letters    &&(numbers    ||    letters))    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
330	[BUG]  [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
331	[BUG]  [BUGGY]  while(buffer!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffer!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffer!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
332	[BUG]  [BUGGY]  while(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
333	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
334	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
335	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
336	[BUG]  [BUGGY]  while(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
337	[BUG]  [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
338	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
339	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
340	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&(numbers  &&  random.nextToken()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
341	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(letters  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(letters  &&  random.nextToken()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(letters  &&  random.nextToken()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
342	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[0];  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[0];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[0];  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[0];    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
343	[BUG]  [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
344	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
345	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start  +  1;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
346	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
347	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
348	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toUpperCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
349	[BUG]  [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
350	[BUG]  [BUGGY]  chars)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  chars)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	chars)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  wires)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
351	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  1, ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  1, ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  count  + ",  is  less  than  1, ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
352	[BUG]  [BUGGY]  if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1.   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1.   ");  }	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
353	[BUG]  [BUGGY]  if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1.   ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1.   ");  }	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
354	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  1.   ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  1.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  1.   ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
355	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    >=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
356	[BUG]  [BUGGY]  while((  letters  &&  chars!=  null)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars!=  null)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars!=  null)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    >=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
357	[BUG]  [BUGGY]  while((  letters  &&  chars!=  null)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars!=  null)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars!=  null)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
358	[BUG]  [BUGGY]  while((  letters  &&  chars.length!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length!=  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
359	[BUG]  [BUGGY]  if(!letters)  {  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
360	[BUG]  [BUGGY]  if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
361	[BUG]  [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
362	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&(numbers  &&  random.nextDouble()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  &&(numbers  &&  random.nextDouble()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&(numbers  &&  random.nextDouble()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextDouble()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
363	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextByte()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextByte()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextByte()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextDouble()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
364	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.nullValue();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
365	[BUG]  [BUGGY]  char[]  buffer[]  =  random.nullValue();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer[]  =  random.nullValue();  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer[]  =  random.nullValue();	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.nullValue();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
366	[BUG]  [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
367	[BUG]  [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
368	[BUG]  [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  random  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  random  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  random  + "  is  less  than  0.   ");  }	  Angehöriger    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
369	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charArray[i];    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
370	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[0];  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[0];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[0];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charArray[i];    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
371	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
372	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
373	[BUG]  [BUGGY]  if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1 ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1 ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1 ");  }	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
374	[BUG]  [BUGGY]  if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1 ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1 ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  1 ");  }	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
375	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + ",  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + ",  is  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  + ",  is  less  than  0.   ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
376	[BUG]  [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars!=  null  &&  chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
377	[BUG]  [BUGGY]  while(buffer!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffer!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffer!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
378	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quote(chars[i]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
379	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quote(chars,  random);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quote(chars,  random);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quote(chars,  random);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quote(chars[i]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
380	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
381	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextInt(start,  end  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextInt(start,  end  +  1);	  Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
382	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  >=  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  >=  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  >=  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
383	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch,  random);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch,  random);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch,  random);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
384	[BUG]  [BUGGY]  because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
385	[BUG]  [BUGGY]  because(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
386	[BUG]  [BUGGY]  Angehicleriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Angehicleriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehicleriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  Angehöriger)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
387	[BUG]  [BUGGY]  because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
388	[BUG]  [BUGGY]  }  else  if(count  >=  0  &&  random.nextDouble()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  >=  0  &&  random.nextDouble()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  >=  0  &&  random.nextDouble()  ==  0)  {	  }    else    if(count!=    0    &&    random.nextDouble()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
389	[BUG]  [BUGGY]  }  else  if(count!=  0  &&  random.nextInt()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  0  &&  random.nextInt()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  0  &&  random.nextInt()  ==  0)  {	  }    else    if(count!=    0    &&    random.nextDouble()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
390	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quoteByName(ch);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
391	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quoteByName(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quoteByName(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.quoteByName(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quoteByName(ch);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
392	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
393	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  >=  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  >=  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  >=  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
394	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
395	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random[i];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
396	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[0];  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[0];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[0];  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
397	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.nextInt(start);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextInt(start);	  char    ch    =    random.nextInt(count);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
398	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start,  count);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.nextInt(start,  count);  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextInt(start,  count);	  char    ch    =    random.nextInt(count);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
399	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
400	[BUG]  [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  ++i)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  ++i)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  ++i)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
401	[BUG]  [BUGGY]  because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  random.numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
402	[BUG]  [BUGGY]  while(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
403	[BUG]  [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(buffered!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(buffered!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
404	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
405	[BUG]  [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
406	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
407	[BUG]  [BUGGY]  if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
408	[BUG]  [BUGGY]  if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >=  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
409	[BUG]  [BUGGY]  if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  random.length)  {  aughtInvalidArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0.   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
410	[BUG]  [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
411	[BUG]  [BUGGY]  if(count  ==  0)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  0)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  null. ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  0)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  null. ");  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
412	[BUG]  [BUGGY]  if(count  ==  0)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  empty. ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  ==  0)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  empty. ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  ==  0)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  empty. ");  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
413	[BUG]  [BUGGY]  if(!letters)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  null. ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  throw  new  IllegalArgumentException( "The  random  string  length  must  not  be  null. ");  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
414	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
415	[BUG]  [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
416	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
417	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
418	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
419	[BUG]  [BUGGY]  }  else  if(count!=  letters  &&  random.numbers)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  letters  &&  random.numbers)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  letters  &&  random.numbers)  {	  }    else    if(count!=    letters)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
420	[BUG]  [BUGGY]  }  else  if(count!=  letters  &&  random.nextToken()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  letters  &&  random.nextToken()  ==  Token.NAME)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  letters  &&  random.nextToken()  ==  Token.NAME)  {	  }    else    if(count!=    letters)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
421	[BUG]  [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
422	[BUG]  [BUGGY]  if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
423	[BUG]  [BUGGY]  while(chars.length!=  1)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  1)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  1)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    random.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
424	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.EMPTY_STRING_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
425	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.EMPTY_STRING_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
426	[BUG]  [BUGGY]  because(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  random.length  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
427	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
428	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  1 ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  1 ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  1 ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
429	[BUG]  [BUGGY]  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");	  wires)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
430	[BUG]  [BUGGY]  char[]  buffer  =  random.nullValue();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char[]  buffer  =  random.nullValue();  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer  =  random.nullValue();	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.nullValue();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
431	[BUG]  [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
432	[BUG]  [BUGGY]  while((  letters  &&  chars.length)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
433	[BUG]  [BUGGY]  while(chars.length!=  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
434	[BUG]  [BUGGY]  while(chars.length  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
435	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.next();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.next();  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.next();  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
436	[BUG]  [BUGGY]  while(!letters  &&(ch  ==  ' "'  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&(ch  ==  ' "'  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&(ch  ==  ' "'  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(!letters    &&(numbers    ||    letters))    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
437	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quoteByName(ch);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
438	[BUG]  [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
439	[BUG]  [BUGGY]  if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
440	[BUG]  [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
441	[BUG]  [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  random.length  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  random.length  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  random.length  + "  is  less  than  0.   ");  }	  Angehöriger    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
442	[BUG]  [BUGGY]  Thread.currentThread().interrupt(ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Thread.currentThread().interrupt(ch);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Thread.currentThread().interrupt(ch);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
443	[BUG]  [BUGGY]  Thread.currentThread().interrupt(ch,  start,  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Thread.currentThread().interrupt(ch,  start,  end);  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Thread.currentThread().interrupt(ch,  start,  end);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
444	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1,  count);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1,  count);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1,  count);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
445	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
446	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  0.   ");	  aughtInvalidArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
447	[BUG]  [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
448	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.next();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.next();  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.next();  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
449	[BUG]  [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
450	[BUG]  [BUGGY]  reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
451	[BUG]  [BUGGY]  while(chars.length!=  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
452	[BUG]  [BUGGY]  while(chars.length  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
453	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(ch  ==  ' "')  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(ch  ==  ' "')  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
454	[BUG]  [BUGGY]  if(chars  ==  null)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(chars  ==  null)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(chars  ==  null)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
455	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  1 ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  1 ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  random  + "  is  less  than  1 ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
456	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  1.   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  1.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  random.length  + "  is  less  than  1.   ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
457	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + ",  is  less  than  1.   ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + ",  is  less  than  1.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  random  + ",  is  less  than  1.   ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
458	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
459	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length  >  0)  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
460	[BUG]  [BUGGY]  if(!letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
461	[BUG]  [BUGGY]  if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	  if(count)    {    if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
462	[BUG]  [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
463	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
464	[BUG]  [BUGGY]  Annotations(random,  start,  end)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Annotations(random,  start,  end)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Annotations(random,  start,  end)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
465	[BUG]  [BUGGY]  Annotations(random,  start,  end,  letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Annotations(random,  start,  end,  letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Annotations(random,  start,  end,  letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
466	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
467	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
468	[BUG]  [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
469	[BUG]  [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
470	[BUG]  [BUGGY]  if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
471	[BUG]  [BUGGY]  Angehriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Angehriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  random  + "  is  less  than  0.   ");  }	  Angehöriger)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
472	[BUG]  [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
473	[BUG]  [BUGGY]  if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
474	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(ch);  }	  because(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
475	[BUG]  [BUGGY]  }  else  if(count!=  random.numbers  &&  letters  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  random.numbers  &&  letters  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  random.numbers  &&  letters  >  0)  {	  }    else    if(count!=    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
476	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
477	[BUG]  [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
478	[BUG]  [BUGGY]  if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
479	[BUG]  [BUGGY]  if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters  &&!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }	  if(!letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
480	[BUG]  [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
481	[BUG]  [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters  &&  numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
482	[BUG]  [BUGGY]  reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toUpperCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
483	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
484	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toByteArray(chars,  random);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toByteArray(chars,  random);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toByteArray(chars,  random);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charArray[i];    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
485	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
486	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
487	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    RandomStringUtils.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
488	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ==  (numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ==  (numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))  ==  (numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  }	  while((    letters    &&    Character.isUpperCase(ch))    ||(numbers    &&    Character.isDigit(ch))    ||(!letters    &&!numbers))    {    buffer[i]    =    Character.toLowerCase(ch);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
489	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  <  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  <  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))  <  0  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase	  while((    letters    &&    Character.isUpperCase(ch))    ||(numbers    &&    Character.isDigit(ch))    ||(!letters    &&!numbers))    {    buffer[i]    =    Character.toLowerCase(ch);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
490	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
491	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  random.charAt(i);  }	  while(chars.length!=    0)    {    for(int    i    =    start;    i    <    count;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
492	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
493	[BUG]  [BUGGY]  Random  random  =  random.nextToken(),  start  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Random  random  =  random.nextToken(),  start  +  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextToken(),  start  +  1;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
494	[BUG]  [BUGGY]  while((  letters  &&  end  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  end  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  end  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    >=    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
495	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)||(numbers  &&  Character.isDigit(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length  >  0)||(numbers  &&  Character.isDigit(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)||(numbers  &&  Character.isDigit(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +	  try    {    [Delete]    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
496	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)||(numbers  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length  >  0)||(numbers  &&  chars.length  >  0))  {  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)||(numbers  &&  chars.length  >  0))  {	  try    {    [Delete]    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
497	[BUG]  [BUGGY]  char  ch  =  random.quote(Character.toUpperCase(count));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  char  ch  =  random.quote(Character.toUpperCase(count));  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.quote(Character.toUpperCase(count));	  char    ch    =    random.quote(ch);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
498	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  chars.length  >  0)  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)  <  chars.length)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  while((    letters    &&    chars.length    >    0)    ==    0)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
499	[BUG]  [BUGGY]  if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  <  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }	  if(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
500	[BUG]  [BUGGY]  reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	reason(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	  because(count)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
501	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i).toCharArray();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i).toCharArray();  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i).toCharArray();  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getCHARs(i);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
502	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + ",  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  aughtException( "Requested  random  string  length   "  +  random  + ",  is  less  than  0.   ");  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length   "  +  random  + ",  is  less  than  0.   ");	  aughtException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
503	[BUG]  [BUGGY]  Character  ch  =  random.nextToken();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Character  ch  =  random.nextToken();  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Character  ch  =  random.nextToken();	  char    ch    =    random.nextToken();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
504	[BUG]  [BUGGY]  while(!letters  &&!count)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while(!letters  &&!count)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&!count)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	  while(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
505	[BUG]  [BUGGY]  Annotations(random,  start,  end)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Annotations(random,  start,  end)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Annotations(random,  start,  end)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
506	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
507	[BUG]  [BUGGY]  }  else  if(count!=  0  &&  random.nextByte()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count!=  0  &&  random.nextByte()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  0  &&  random.nextByte()  ==  0)  {	  }    else    if(count!=    0    &&    random.nextDouble()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
508	[BUG]  [BUGGY]  Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }	  bucket    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
509	[BUG]  [BUGGY]  Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Character(ch)  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");  }	  bucket    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
510	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(letters  &&  random.nextDouble()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(letters  &&  random.nextDouble()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(letters  &&  random.nextDouble()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextDouble()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
511	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextBinary()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextBinary()  ==  0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextBinary()  ==  0))  {	  }    else    if(count    ==    0    ||(numbers    &&    random.nextDouble()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
512	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]!=  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]!=  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]!=	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i]    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
513	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quote(chars[i]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
514	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i],  end);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i],  end);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i],  end);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.quote(chars[i]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
515	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i].ch;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i].ch;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i].ch;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
516	[BUG]  [BUGGY]  tries  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  tries  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	tries  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	  if(letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length       "    +    count    +   "    is    less    than    0.       ");    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
517	[BUG]  [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count  >  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
518	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
519	[BUG]  [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [BUGGY]      }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  letters)!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }	  if(letters)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.null;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
520	[BUG]  [BUGGY]  }  else  if(count  <  =  0  ||  letters  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";      [BUGGY]  }  else  if(count  <  =  0  ||  letters  &&  random.numbers  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  <  =  0  ||  letters  &&  random.numbers  >  0)  {	  }    else    if(count    ==    0    ||    letters    &&    random.numbers    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
