bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  ch;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  bucket  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  bucket  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
10	[BUG]  [BUGGY]  bucket  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  bucket  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	bucket  ==  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  }	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
11	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  nu	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
15	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.charAt(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  if(numbers)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i]	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  reason(count  >  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  reason(count  >  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	reason(count  >  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	      if(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
23	[BUG]  [BUGGY]  while(!letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while(!letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	      if(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  count;  i++)  {  buffer[i]  =  random.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(chars.length!=  0)  {  for(int  i  =  start;  i  <  random.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  0. ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  0. ");  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  0. ");	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  Random  random  =  random.nullValue();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  Random  random  =  random.nullValue();  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nullValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  Random  random  =  random.next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  Random  random  =  random.next();  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.next();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  Random  random  =  random.nextToken();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  Random  random  =  random.nextToken();  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextToken();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end);  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  }  else  if(count  ==  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count  ==  1)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  1)  {	  }    else    if(count    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count  ==  0  &&  random.numbers  >  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.numbers  >  0)  {	  }    else    if(count    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  chars[0];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
41	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
42	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i]	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
43	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {	  }    else    if(count    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  }  else  if(count  ==  0  &&  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count  ==  0  &&  random.length  >  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  &&  random.length  >  0)  {	  }    else    if(count    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextDouble()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count  ==  0  ||(numbers  &&  random.nextDouble()  ==  0))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||(numbers  &&  random.nextDouble()  ==  0))  {	  }    else    if(count    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.chars[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charArray[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.null;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
51	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Thread.currentThread().interrupt();	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
53	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
54	[BUG]  [BUGGY]  }  else  if(count  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count  >  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  >  0)  {	  }    else    if(count    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i  +  1);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
57	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getCHARs(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
58	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.EMPTY_STRING_ARRAY;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    ch;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  while(!letters  &&(numbers  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while(!letters  &&(numbers  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while(!letters  &&(numbers  ||  letters))  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i  +  1);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.arrayToString(buffer,  i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start,  end);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  Random  random  =  random.nextInt(start,  end);  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Random  random  =  random.nextInt(start,  end);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  null;  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
68	[BUG]  [BUGGY]  if(letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	      if(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
69	[BUG]  [BUGGY]  Angehöriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  Angehöriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehöriger)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	      if(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  wires)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  wires)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	wires)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	      if(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toLowerCase(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  Character.toUpperCase(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.toLowerCase(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  RandomStringUtils.toLowerCase(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  [Delete]  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	[Delete]	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while((  letters  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.charAt(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  0.   ");  }	      if(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
81	[BUG]  [BUGGY]  Angehöriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  Angehöriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	Angehöriger  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  + "  is  less  than  0.   ");  }	      if(!letters)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    0.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  char  ch  =  random.nextToken();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  char  ch  =  random.nextToken();  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextToken();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  char  ch  =  random.nextInt(count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  char  ch  =  random.nextInt(count);  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.nextInt(count);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  char  ch  =  random.getChars(start,  end);  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.getChars(start,  end);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
85	[BUG]  [BUGGY]  char  ch  =  random.quote(ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  char  ch  =  random.quote(ch);  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	char  ch  =  random.quote(ch);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
86	[BUG]  [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  buffer[i]  =  Character.toLowerCase(ch);	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    Character.toLowerCase(ch);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
87	[BUG]  [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(count)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
88	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]!=  0)  {  return  buffer[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]!=    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
89	[BUG]  [BUGGY]  }  else  if(count!=  letters)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count!=  letters)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  letters)  {	  }    else    if(count!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
90	[BUG]  [BUGGY]  }  else  if(count!=  letters  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count!=  letters  &&  random.numbers  >  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  letters  &&  random.numbers  >  0)  {	  }    else    if(count!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
91	[BUG]  [BUGGY]  }  else  if(count!=  0  &&  random.nextDouble()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count!=  0  &&  random.nextDouble()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count!=  0  &&  random.nextDouble()  ==  0)  {	  }    else    if(count!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
92	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1 ");	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
93	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	aughtInvalidArgumentException( "Requested  random  string  length "  +  count  + "  is  less  than  1. ");	      if(count    ==    0)    {    throw    new    IllegalArgumentException(   "Requested    random    string    length   "    +    count    +   "    is    less    than    1   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
94	[BUG]  [BUGGY]  }  else  if(count  ==  0  ||  letters  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  }  else  if(count  ==  0  ||  letters  &&  random.numbers  >  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  ==  0  ||  letters  &&  random.numbers  >  0)  {	  }    else    if(count    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
95	[BUG]  [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(!letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  buffer[i]  =  random.charAt(i);  if(buffer[i]  ==  0)  {  return  buffer[i];  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    buffer[i]    =    random.charAt(i);    if(buffer[i]    ==    0)    {    return    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
96	[BUG]  [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	because(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
97	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while((  letters  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
98	[BUG]  [BUGGY]  while((  letters  &&  chars.length  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  while((  letters  &&  chars.length  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	while((  letters  &&  chars.length  >  0)  >=  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.getChars(i);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    random.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
99	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quote(chars[i]);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.nullValue();  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
101	[BUG]  [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";    [BUGGY]  if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }  [BUGGY]    }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	if(letters)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  buffer[i]  =  random.quoteByName(ch);  }	      if(numbers)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    buffer[i]    =    chars[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
