bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new IllegalArgumentException("Numeric values must be finite, but was " + value); [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public JsonWriter value(double value) throws IOException { writeDeferredName(); if (Double.isNaN(value) || Double.isInfinite(value)) { [BUGGY] throw new IllegalArgumentException("Numeric values must be finite, but was " + value); [BUGGY] } beforeValue(); out.append(Double.toString(value)); return this; } [CLASS] JsonWriter [METHOD] value [RETURN_TYPE] JsonWriter  double value [VARIABLES] boolean htmlSafe lenient serializeNulls value double value int[] newStack stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String closeBracket deferredName indent name openBracket separator value Writer out int context empty newTop nonempty stackSize topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	
2	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public JsonWriter value(double value) throws IOException { writeDeferredName(); if (Double.isNaN(value) || Double.isInfinite(value)) { [BUGGY] [BUGGY] throw new IllegalArgumentException("Numeric values must be finite, but was " + value); } beforeValue(); out.append(Double.toString(value)); return this; } [CLASS] JsonWriter [METHOD] value [RETURN_TYPE] JsonWriter  double value [VARIABLES] boolean htmlSafe lenient serializeNulls value double value int[] newStack stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String closeBracket deferredName indent name openBracket separator value Writer out int context empty newTop nonempty stackSize topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	
3	[BUG] [BUGGY] this.lenient = lenient; [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public final void setLenient(boolean lenient) { [BUGGY] this.lenient = lenient; [BUGGY] } [CLASS] JsonWriter [METHOD] setLenient [RETURN_TYPE] void  boolean lenient [VARIABLES] boolean htmlSafe lenient serializeNulls int[] stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String deferredName indent separator Writer out int stackSize  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	235	235	1	replace	
4	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public final void setLenient(boolean lenient) { [BUGGY] [BUGGY] this.lenient = lenient; } [CLASS] JsonWriter [METHOD] setLenient [RETURN_TYPE] void  boolean lenient [VARIABLES] boolean htmlSafe lenient serializeNulls int[] stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String deferredName indent separator Writer out int stackSize  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	235	235	1	add	
5	[BUG] [BUGGY] } [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public final void setLenient(boolean lenient) { this.lenient = lenient; [BUGGY] } [BUGGY]  [CLASS] JsonWriter [METHOD] setLenient [RETURN_TYPE] void  boolean lenient [VARIABLES] boolean htmlSafe lenient serializeNulls int[] stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String deferredName indent separator Writer out int stackSize  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	236	236	1	replace	
6	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public final void setLenient(boolean lenient) { this.lenient = lenient; [BUGGY] [BUGGY] } [CLASS] JsonWriter [METHOD] setLenient [RETURN_TYPE] void  boolean lenient [VARIABLES] boolean htmlSafe lenient serializeNulls int[] stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String deferredName indent separator Writer out int stackSize  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	236	236	1	add	
7	[BUG] [BUGGY] writeDeferredName(); [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public JsonWriter value(double value) throws IOException { [BUGGY] writeDeferredName(); [BUGGY] if (Double.isNaN(value) || Double.isInfinite(value)) { throw new IllegalArgumentException("Numeric values must be finite, but was " + value); } beforeValue(); out.append(Double.toString(value)); return this; } [CLASS] JsonWriter [METHOD] value [RETURN_TYPE] JsonWriter  double value [VARIABLES] boolean htmlSafe lenient serializeNulls value double value int[] newStack stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String closeBracket deferredName indent name openBracket separator value Writer out int context empty newTop nonempty stackSize topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	
8	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public JsonWriter value(double value) throws IOException { [BUGGY] [BUGGY] writeDeferredName(); if (Double.isNaN(value) || Double.isInfinite(value)) { throw new IllegalArgumentException("Numeric values must be finite, but was " + value); } beforeValue(); out.append(Double.toString(value)); return this; } [CLASS] JsonWriter [METHOD] value [RETURN_TYPE] JsonWriter  double value [VARIABLES] boolean htmlSafe lenient serializeNulls value double value int[] newStack stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String closeBracket deferredName indent name openBracket separator value Writer out int context empty newTop nonempty stackSize topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	add	
9	[BUG] [BUGGY] if (Double.isNaN(value) || Double.isInfinite(value)) { [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public JsonWriter value(double value) throws IOException { writeDeferredName(); [BUGGY] if (Double.isNaN(value) || Double.isInfinite(value)) { [BUGGY] throw new IllegalArgumentException("Numeric values must be finite, but was " + value); } beforeValue(); out.append(Double.toString(value)); return this; } [CLASS] JsonWriter [METHOD] value [RETURN_TYPE] JsonWriter  double value [VARIABLES] boolean htmlSafe lenient serializeNulls value double value int[] newStack stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String closeBracket deferredName indent name openBracket separator value Writer out int context empty newTop nonempty stackSize topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	
10	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Numeric values must be finite [CONTEXT] public JsonWriter value(double value) throws IOException { writeDeferredName(); [BUGGY] [BUGGY] if (Double.isNaN(value) || Double.isInfinite(value)) { throw new IllegalArgumentException("Numeric values must be finite, but was " + value); } beforeValue(); out.append(Double.toString(value)); return this; } [CLASS] JsonWriter [METHOD] value [RETURN_TYPE] JsonWriter  double value [VARIABLES] boolean htmlSafe lenient serializeNulls value double value int[] newStack stack String[] HTML_SAFE_REPLACEMENT_CHARS REPLACEMENT_CHARS String closeBracket deferredName indent name openBracket separator value Writer out int context empty newTop nonempty stackSize topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	add	
