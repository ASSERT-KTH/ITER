bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
2	[BUG]  [BUGGY]  if(Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
3	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isLong(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isLong(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isLong(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
4	[BUG]  [BUGGY]  if(value  <  0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(!lenient    &&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
5	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(!lenient    &&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
6	[BUG]  [BUGGY]  if(value  <  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(!lenient    &&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
7	[BUG]  [BUGGY]  if(value  >=  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(!lenient    &&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
8	[BUG]  [BUGGY]  if(value  >  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(!lenient    &&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
9	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
13	[BUG]  [BUGGY]  while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
14	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
15	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLong(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLong(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isFunnite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
16	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isFunnite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
17	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrUndefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrUndefined(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isFunnite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
18	[BUG]  [BUGGY]  out.append(value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(value);	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
19	[BUG]  [BUGGY]  out.append(String.valueOf(value));  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(String.valueOf(value));  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(String.valueOf(value));	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
20	[BUG]  [BUGGY]  out.append(HexString.valueOf(value));  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(HexString.valueOf(value));  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(HexString.valueOf(value));	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
21	[BUG]  [BUGGY]  out.append(Double.toString(value)+  1);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(Double.toString(value)+  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(Double.toString(value)+  1);	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
22	[BUG]  [BUGGY]  out.append(HexString.toHexString(value));  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(HexString.toHexString(value));  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(HexString.toHexString(value));	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
23	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if(Value.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Value.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Value.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
29	[BUG]  [BUGGY]  if(value  ==  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  ==  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  ==  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(value    >    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
30	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
31	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
32	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isImmutableValue(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isImmutableValue(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isImmutableValue(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
33	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
34	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLong(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLong(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
35	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isConstanciated(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isConstanciated(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isConstanciated(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isDecimal(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isDecimal(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isDecimal(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
37	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
38	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
39	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isDecimal(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isDecimal(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isDecimal(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
40	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isLong(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isLong(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
41	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunctionDeclaration(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunctionDeclaration(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunctionDeclaration(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
42	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
43	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
44	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
45	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
46	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
47	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
48	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
49	[BUG]  [BUGGY]  if(Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
50	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
51	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNullOrUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNullOrUndefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNullOrUndefined(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
52	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
53	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
54	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
55	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
58	[BUG]  [BUGGY]  if(value  >  0.0  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
59	[BUG]  [BUGGY]  if(value  <  =  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
60	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {	  if(value    >    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
61	[BUG]  [BUGGY]  if(value!=  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value!=  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value!=  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >=    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
62	[BUG]  [BUGGY]  if(value  ==  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  ==  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  ==  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >=    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
63	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
64	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
65	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isLong(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isLong(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
66	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
67	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
68	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
69	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
70	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
71	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
72	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
73	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
74	[BUG]  [BUGGY]  if(value!=  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value!=  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value!=  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(value    >=    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
75	[BUG]  [BUGGY]  if(value  >=  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >=    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
76	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
77	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
78	[BUG]  [BUGGY]  if(value  <  =  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
79	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
80	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
81	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
82	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
83	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
84	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
85	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
86	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
87	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
88	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
89	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
90	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isLong(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isLong(value))  {	  if(Double.isNaN(value)||    Double.isLong(value))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
92	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
93	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isLowerCase(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isLowerCase(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isLowerCase(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
94	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
95	[BUG]  [BUGGY]  if(Decimal.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Decimal.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Decimal.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
96	[BUG]  [BUGGY]  if(Value.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Value.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Value.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
97	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
98	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
99	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
100	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
101	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
102	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
103	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLocal(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLocal(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLocal(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
104	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isConstanciated(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isConstanciated(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isConstanciated(value))  {	  if(Double.isNaN(value)||    Double.isConstanciated(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
105	[BUG]  [BUGGY]  int[]  newStack  =  getStackSize();  out.append(newStack[newStack.size()  ]);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStackSize();  out.append(newStack[newStack.size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStackSize();  out.append(newStack[newStack.size()  ]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
106	[BUG]  [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[0]);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[0]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStack();  out.append(newStack[0]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
107	[BUG]  [BUGGY]  int[]  newStack  =  getStackTrace();  out.append(newStack[newStack.size()  ]);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStackTrace();  out.append(newStack[newStack.size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStackTrace();  out.append(newStack[newStack.size()  ]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
108	[BUG]  [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[stack.size()  ]);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[stack.size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStack();  out.append(newStack[stack.size()  ]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
109	[BUG]  [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[size()  ]);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStack();  out.append(newStack[size()  ]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
110	[BUG]  [BUGGY]  int[]  newStack  =  getStackValues();  out.append(newStack[newStack.size()  ]);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStackValues();  out.append(newStack[newStack.size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStackValues();  out.append(newStack[newStack.size()  ]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
111	[BUG]  [BUGGY]  out.append( "null ");  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "null ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "null ");	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
112	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0)  {  writeNull();  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
113	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
114	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0)  {  out.append( "null ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
115	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
116	[BUG]  [BUGGY]  out.append(this.separator);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(this.separator);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(this.separator);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
117	[BUG]  [BUGGY]  out.append( "n ");  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "n ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "n ");	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
118	[BUG]  [BUGGY]  out.append(this.separator).append( "n ");  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(this.separator).append( "n ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(this.separator).append( "n ");	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
119	[BUG]  [BUGGY]  out.append(this.separator).append(value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(this.separator).append(value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(this.separator).append(value);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
120	[BUG]  [BUGGY]  out.append(this.separator).append( "null ");  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(this.separator).append( "null ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(this.separator).append( "null ");	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
121	[BUG]  [BUGGY]  out.append( "native ");  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "native ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "native ");	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
122	[BUG]  [BUGGY]  out.append( "negateNulls ");  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "negateNulls ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "negateNulls ");	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
123	[BUG]  [BUGGY]  out.append( "negative ");  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "negative ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "negative ");	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
124	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
125	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
126	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
127	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isEmpty(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isEmpty(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isEmpty(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
128	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
129	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
130	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
131	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
132	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
133	[BUG]  [BUGGY]  if(Double.isInfinite(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
134	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
135	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
136	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrUndefined(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
137	[BUG]  [BUGGY]  if(Double.isInfinite(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)&&  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)&&  Double.isFunction(value))  {	  if(Double.isNaN(value)&&    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
138	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNumericValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNumericValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNumericValue(value))  {	  if(Double.isNaN(value)||    Double.isNumericValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
139	[BUG]  [BUGGY]  out.append(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
140	[BUG]  [BUGGY]  out.append( ", ");  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( ", ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( ", ");	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
141	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
142	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
143	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isImmutableValue(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isImmutableValue(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isImmutableValue(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
144	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  writeNull();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
145	[BUG]  [BUGGY]  if(values!=  null)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(values!=  null)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(values!=  null)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  writeNull();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  if(values  ==  null)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(values  ==  null)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(values  ==  null)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  writeNull();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
147	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  writeNull();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
148	[BUG]  [BUGGY]  if(values!=  null)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(values!=  null)  {  writeNull();  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(values!=  null)  {  writeNull();  }	  writeNull();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
149	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrUndefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
150	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNullOrUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNullOrUndefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNullOrUndefined(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrUndefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
151	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNullOrUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNullOrUndefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNullOrUndefined(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrUndefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
152	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
153	[BUG]  [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
154	[BUG]  [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isISOControl(value))  {	  if(Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
155	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
156	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
157	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
158	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNumeric(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNumeric(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNumeric(value))  {	  if(Double.isNaN(value)||    Double.isNumeric(value))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
159	[BUG]  [BUGGY]  int[]  stack  =  getStackSize()  +  1;  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackSize()  +  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize()  +  1;	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
160	[BUG]  [BUGGY]  int[]  stack  =  getSerializeNulls();  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getSerializeNulls();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getSerializeNulls();	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
161	[BUG]  [BUGGY]  int[]  stack  =  getStackSize(value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackSize(value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize(value);	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
162	[BUG]  [BUGGY]  int[]  stack  =  getStackSize().toArray(new  int[size()  ]);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackSize().toArray(new  int[size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize().toArray(new  int[size()  ]);	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
163	[BUG]  [BUGGY]  int[]  stack  =  getStackSize().length;  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackSize().length;  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize().length;	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
164	[BUG]  [BUGGY]  int[]  stack  =  getStackSize()  /  2;  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackSize()  /  2;  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize()  /  2;	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
165	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
166	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
167	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
168	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isImmutableValue(value))  {	  if(Double.isNaN(value)||    Double.isImmutableValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
169	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value))  {	  if(Double.isNaN(value)||    Double.isImmutableValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
170	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
171	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
172	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
173	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
174	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
175	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
176	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
177	[BUG]  [BUGGY]  out.append('n');  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append('n');  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append('n');	  if(value    <    0)    {    out.append('n');    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
178	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value));  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value));  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( ".s.IFJDCS ".charAt(value));	  if(value    <    0)    {    out.append('n');    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
179	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".toString());  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( ".s.IFJDCS ".toString());  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( ".s.IFJDCS ".toString());	  if(value    <    0)    {    out.append('n');    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
180	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLowerCase(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLowerCase(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLowerCase(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
181	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isSerialize(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isSerialize(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isSerialize(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
182	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isConstant(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isConstant(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isConstant(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
183	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
184	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isDefined(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isDefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isDefined(value))  {	  if(Double.isNaN(value)||    Double.isDefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
185	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
186	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLowerCase(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
187	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
188	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
189	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
190	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  DEFERRED_NUMBER);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  DEFERRED_NUMBER);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  DEFERRED_NUMBER);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
191	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  values);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  values);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  values);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
192	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  DEFERRED_NAME);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  DEFERRED_NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  DEFERRED_NAME);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
193	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  true);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  true);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
194	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLowerCase(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLowerCase(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLowerCase(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
195	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isSerialize(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isSerialize(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isSerialize(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
196	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
197	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
198	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
199	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
200	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
201	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLong(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isLong(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
202	[BUG]  [BUGGY]  Writer  out  =  getOutputFile();  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  getOutputFile();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getOutputFile();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
203	[BUG]  [BUGGY]  Writer  out  =  getWriter(value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  getWriter(value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getWriter(value);	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
204	[BUG]  [BUGGY]  Writer  out  =  getOutputForWriter();  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  getOutputForWriter();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getOutputForWriter();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
205	[BUG]  [BUGGY]  Writer  out  =  this.getWriter();  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  this.getWriter();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  this.getWriter();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
206	[BUG]  [BUGGY]  Writer  out  =  getOutputStream();  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  getOutputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getOutputStream();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
207	[BUG]  [BUGGY]  Writer  out  =  getReader();  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  getReader();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getReader();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
208	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
209	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {	  if(Double.isNaN(value)&&    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
210	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isISOControl(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isISOControl(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isISOControl(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
211	[BUG]  [BUGGY]  if(Double.isInfinite(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)&&  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)&&  Double.isISOControl(value))  {	  if(Double.isNaN(value)&&    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
212	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
213	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isInfinite(value)&&  Double.isNaN(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
214	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isLong(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isLong(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
215	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
216	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
217	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
218	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
219	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
220	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
221	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
222	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
223	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
224	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
225	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
226	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
227	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
228	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
229	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
230	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
231	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
232	[BUG]  [BUGGY]  if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
233	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLong(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
234	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
235	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
236	[BUG]  [BUGGY]  out.append( "naN ");  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "naN ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "naN ");	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
237	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
238	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
239	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
240	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
241	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
242	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
243	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
244	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
245	[BUG]  [BUGGY]  if(value  >=  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
246	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
247	[BUG]  [BUGGY]  if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
248	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_ERROR);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_ERROR);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_ERROR);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
249	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUES);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUES);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUES);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
250	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_OF_RANGE);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_OF_RANGE);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_OF_RANGE);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
251	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUE);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUE);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUE);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
252	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
253	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
254	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( ", ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( ", ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
255	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  out.append( ", ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0)  {  writeNull();  }  else  {  out.append( ", ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
256	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
257	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
258	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNumeric(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNumeric(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNumeric(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
259	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isImmutableValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isImmutableValue(value))  {	  if(Double.isNaN(value)||    Double.isImmutableValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
260	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isImmutable(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isImmutable(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isImmutable(value))  {	  if(Double.isNaN(value)||    Double.isImmutableValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
261	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0)  {  writeNull();  }  else  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
262	[BUG]  [BUGGY]  if(!lenient  &&  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
263	[BUG]  [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
264	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isEmpty(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isEmpty(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isEmpty(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isEmpty(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
265	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isEmpty(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
266	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
267	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
268	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isConstanciated(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isConstanciated(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isConstanciated(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isConstanciated(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
269	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
270	[BUG]  [BUGGY]  out.append( "negate,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "negate,  but  was   "  +  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "negate,  but  was   "  +  value);	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
271	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
272	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
273	[BUG]  [BUGGY]  if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
274	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
275	[BUG]  [BUGGY]  Writer  out  =  getOutput();  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  getOutput();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getOutput();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
276	[BUG]  [BUGGY]  Writer  out  =  getOutputFactory();  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  getOutputFactory();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getOutputFactory();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
277	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isISOControl(value))  {	  if(Double.isNaN(value)&&    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
278	[BUG]  [BUGGY]  if(value  >=  0.0  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0.0  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0.0  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >=    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
279	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
280	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
281	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
282	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
283	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
284	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
285	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isFunction(value))  {	  if(Double.isNaN(value)&&    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
286	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isFunction(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
287	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isFunnite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
288	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
289	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNumericValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNumericValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNumericValue(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
290	[BUG]  [BUGGY]  if(Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
291	[BUG]  [BUGGY]  if(!lenient  &&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
292	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
293	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
294	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
295	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
296	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNumericValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNumericValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNumericValue(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
297	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isAssignmentOp(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isAssignmentOp(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isAssignmentOp(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
298	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNumericValue(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNumericValue(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNumericValue(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNumericValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
299	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
300	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNumericValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNumericValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNumericValue(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
301	[BUG]  [BUGGY]  if(value  >=  0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(!lenient    &&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
302	[BUG]  [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[1]);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[1]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStack();  out.append(newStack[1]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
303	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrUndefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
304	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNumeric(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNumeric(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNumeric(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrUndefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
305	[BUG]  [BUGGY]  int[]  stack  =  getStackSize()  -  1;  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackSize()  -  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize()  -  1;	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
306	[BUG]  [BUGGY]  int[]  stack  =  getStackSize().doubleValue();  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackSize().doubleValue();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize().doubleValue();	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
307	[BUG]  [BUGGY]  int[]  stack  =  getStackValue();  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackValue();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackValue();	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
308	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
309	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
310	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
311	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
312	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
313	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
314	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
315	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
316	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
317	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isISOControl(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isISOControl(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isISOControl(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
318	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isDefined(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isDefined(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isDefined(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
319	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
320	[BUG]  [BUGGY]  out.append(Double.toHexString(value));  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(Double.toHexString(value));  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(Double.toHexString(value));	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
321	[BUG]  [BUGGY]  out.append('ufffd');  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append('ufffd');  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append('ufffd');	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
322	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
323	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
324	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isFunction(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
325	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
326	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
327	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNumeric(value))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
328	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
329	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(value    >    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
330	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeNull();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0)  {  writeNull();  }  else  {  out.append( "n ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0)  {  writeNull();  }  else  {  out.append( "n ");  }	  writeNull();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
331	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "' ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append( "' ");  }	  writeNull();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
332	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
333	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
334	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isFunnite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
335	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isFunnite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
336	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
337	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isDefined(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isDefined(value)||  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isDefined(value)||  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isDefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
338	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
339	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
340	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNumeric(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
341	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
342	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
343	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
344	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
345	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrEmpty(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
346	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
347	[BUG]  [BUGGY]  out.append( "null ",  value);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "null ",  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "null ",  value);	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
348	[BUG]  [BUGGY]  out.append( "no-string ");  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "no-string ");  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "no-string ");	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
349	[BUG]  [BUGGY]  if(value  >  1.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  1.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  1.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >=    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
350	[BUG]  [BUGGY]  if(value  <  1.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  1.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  1.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(value    >=    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
351	[BUG]  [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {	  if(value    >=    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
352	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isImmutableValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isImmutableValue(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrUndefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
353	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isUndefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isUndefined(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrUndefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
354	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isImpl(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isImpl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isImpl(value))  {	  if(Double.isNaN(value)||    Double.isLong(value))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
355	[BUG]  [BUGGY]  out.append( "negated,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "negated,  but  was   "  +  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "negated,  but  was   "  +  value);	  if(value    <    0)    {    out.append('n');    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
356	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
357	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFinal(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFinal(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFinal(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
358	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isUndefined(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isUndefined(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isUndefined(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
359	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
360	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
361	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
362	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
363	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isImmutableValue(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isImmutableValue(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isImmutableValue(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
364	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isImmutableValue(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isImmutableValue(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isImmutableValue(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
365	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
366	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
367	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLiteralValue(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isLiteralValue(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLiteralValue(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
368	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFinal(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFinal(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isFinal(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
369	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
370	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  indent);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  indent);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  indent);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
371	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  deferredName);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  deferredName);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  deferredName);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
372	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  this);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  this);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
373	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
374	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {	  if(value    >    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
375	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {	  if(value    >    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
376	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {	  if(value    >    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
377	[BUG]  [BUGGY]  int[]  stack  =  getStackSize().intValue();  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  stack  =  getStackSize().intValue();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize().intValue();	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
378	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {	  if(value    <    0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
379	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {	  if(value    <    0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
380	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isISOControl(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isISOControl(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isISOControl(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
381	[BUG]  [BUGGY]  out.append(this.value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(this.value);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(this.value);	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
382	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
383	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
384	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isLongBits(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
385	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
386	[BUG]  [BUGGY]  if(value  <  1.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  1.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  1.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
387	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {	  if(Double.isNaN(value)&&    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
388	[BUG]  [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isISOControl(value))  {	  if(Double.isNaN(value)&&    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
389	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNullOrUndefined(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
390	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
391	[BUG]  [BUGGY]  if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
392	[BUG]  [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
393	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isDefined(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isDefined(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isDefined(value))  {	  if(Double.isNaN(value)||    Double.isDefined(value))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
394	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isEmpty(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
395	[BUG]  [BUGGY]  out.append( "' "  +  Double.toString(value));  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "' "  +  Double.toString(value));  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "' "  +  Double.toString(value));	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
396	[BUG]  [BUGGY]  out.append(this.serializeNulls);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append(this.serializeNulls);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(this.serializeNulls);	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
397	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {	  if(Double.isNaN(value)&&    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
398	[BUG]  [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isFunction(value))  {	  if(Double.isNaN(value)&&    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
399	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFinal(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFinal(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFinal(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
400	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
401	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
402	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
403	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
404	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isImmutableValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isImmutableValue(value))  {	  if(Double.isNaN(value)||    Double.isImmutableValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
405	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
406	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
407	[BUG]  [BUGGY]  out.append( "null ",  null);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  out.append( "null ",  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append( "null ",  null);	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
408	[BUG]  [BUGGY]  Writer  out  =  getOut();  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  Writer  out  =  getOut();  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getOut();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
409	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)&&    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
410	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isImmutableValue(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)&&  Double.isImmutableValue(value)&&  Double.isNaN(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isImmutableValue(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value)&&    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
411	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isImmutableValue(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
412	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isFinal(value))  {	  if(value    <    0.0    ||    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
413	[BUG]  [BUGGY]  if(value  <  =  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0.0  ||!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(!lenient    &&    Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
414	[BUG]  [BUGGY]  if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
415	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
416	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isImplicitPrototype(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isImplicitPrototype(value)||  Double.isInfinite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isImplicitPrototype(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
417	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isFunnite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
418	[BUG]  [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  -  1]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  -  1]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
419	[BUG]  [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  +  1]);  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  +  1]);	  int[]    newStack    =    getStack();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
420	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isLong(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isLong(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
421	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();      [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
