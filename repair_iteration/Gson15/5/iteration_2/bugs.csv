bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isISOControl(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isConstanciated(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isConstanciated(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isConstanciated(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLong(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  if(Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
13	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
14	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrUndefined(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
17	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNumeric(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNumeric(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isLong(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  Writer  out  =  getWriter();  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  Writer  out  =  getWriter();  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  getWriter();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  writeNull();  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  writeNull();  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	writeNull();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS);  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isFunction(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
29	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
31	[BUG]  [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  =  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isISOControl(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrUndefined(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
38	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
42	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
43	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNumericValue(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNumericValue(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNumericValue(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isDefined(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isDefined(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isDefined(value))  {	  if(Double.isNaN(value)||    Double.isISOControl(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
46	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0  ||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isFunction(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(!lenient  &&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
52	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isInfinite(value)&&  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNullOrEmpty(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)&&  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isInfinite(value)||  Double.isNaN(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  if(value  <  0)  {  out.append('n');  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  out.append('n');  }  else  {  out.append( "n ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  out.append('n');  }  else  {  out.append( "n ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  ]);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  ]);  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  newStack  =  getStack();  out.append(newStack[newStack.size()  ]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  if(value  <  0)  {  out.append(this.separator);  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  out.append(this.separator);  }  else  {  out.append( "n ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  out.append(this.separator);  }  else  {  out.append( "n ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( "n ");  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  out.append( "n ");  }  else  {  out.append('n');  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  out.append( "n ");  }  else  {  out.append('n');  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
61	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( "n ");  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  out.append( "n ");  }  else  {  out.append( "n ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  out.append( "n ");  }  else  {  out.append( "n ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
62	[BUG]  [BUGGY]  out.append(Double.toString(value));  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  out.append(Double.toString(value));  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	out.append(Double.toString(value));	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "n ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append( "n ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append( "null ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  int[]  stack  =  getStackSize();  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  int[]  stack  =  getStackSize();  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	int[]  stack  =  getStackSize();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
67	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isISOControl(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isEmpty(value)||  Double.isInfinite(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunnite(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunnite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isFunnite(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isISOControl(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isNaN(value)||  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
72	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isNullOrEmpty(value))  {	  if(Double.isNaN(value)||    Double.isNullOrEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isEmpty(value))  {	  if(value    <    0    ||    Double.isNaN(value)||    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
74	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isImmutableValue(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isImmutableValue(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isImmutableValue(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0.0  ||  Double.isNaN(value)||  Double.isFunction(value))  {	  if(Double.isNaN(value)||    Double.isFunction(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  >=  0.0  ||  Double.isNaN(value)&&  Double.isInfinite(value))  {	  if(Double.isNaN(value)&&    Double.isInfinite(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
78	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(value  <  0  ||  Double.isNaN(value)||  Double.isInfinite(value)||  Double.isEmpty(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isEmpty(value))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();    [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Numeric  values  must  be  finite,  but  was     "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	495	495	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value)||  Double.isISOControl(value))  {	  if(Double.isNaN(value)||    Double.isInfinite(value)||    Double.isNaN(value))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
