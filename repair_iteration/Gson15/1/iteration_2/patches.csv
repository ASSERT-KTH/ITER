bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	42	None	add
2	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
3	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	42	None	add
4	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    New  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  	42	None	add
5	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);	  	non-compiled	[CE]  not  a  statement	42	None	add
6	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
7	[BUG]  [BUGGY]  out.append( "null ");  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( "null ");	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  not  a  statement	145	None	replace
8	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value));	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  not  a  statement	145	None	replace
9	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  not  a  statement	145	None	replace
10	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize.length)  {  out.append( "null ");  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize.length)  {  out.append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	while(value  <  0  ||  value  >  stackSize.length)  {  out.append( "null ");	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  not  a  statement	145	None	replace
11	[BUG]  [BUGGY]  while(value  <  0)  {  out.append( "null ");  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  while(value  <  0)  {  out.append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	while(value  <  0)  {  out.append( "null ");	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  not  a  statement	145	None	replace
12	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( "null ");  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  not  a  statement	145	None	replace
13	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
14	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
15	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
16	[BUG]  [BUGGY]  Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  null,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	157	None	replace
17	[BUG]  [BUGGY]  Throwables.warning( "Numeric  values  must  be  null,  but  was "  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.warning( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.warning( "Numeric  values  must  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	157	None	replace
18	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	157	None	replace
19	[BUG]  [BUGGY]  java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	108	None	replace
20	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  indent);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  indent);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
22	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  name);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  name);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  name);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
23	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.toString(value));  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.toString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
24	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.stringValue(value));  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.stringValue(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.stringValue(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
25	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	140	None	replace
26	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	140	None	replace
27	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	140	None	replace
28	[BUG]  [BUGGY]  ||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	140	None	replace
29	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	140	None	replace
30	[BUG]  [BUGGY]  ||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
31	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
32	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
33	[BUG]  [BUGGY]  Arguments.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Arguments.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Arguments.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
34	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
35	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
36	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
37	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
38	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
39	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
42	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
43	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  not  be  null,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  not  be  null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  not  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
44	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  value);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
45	[BUG]  [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  if(value  instanceof  Number)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  instanceof  Number)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  instanceof  Number)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
48	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was... "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was... "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was... "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
49	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
50	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
51	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
52	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
53	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
54	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
55	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
56	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
57	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
58	[BUG]  [BUGGY]  aughtInitializingException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInitializingException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInitializingException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
59	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value));  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value));	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
60	[BUG]  [BUGGY]  Throwables.warning( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.warning( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.warning( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	33	None	replace
61	[BUG]  [BUGGY]  Throwables.MESSAGES.add( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.MESSAGES.add( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.MESSAGES.add( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	33	None	replace
62	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
63	[BUG]  [BUGGY]  ||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
64	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	104	None	replace
65	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	104	None	replace
66	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
67	[BUG]  [BUGGY]  Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  undefined,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
68	[BUG]  [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
69	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
70	[BUG]  [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
71	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	110	None	replace
72	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
73	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
74	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  not  a  statement	79	None	add
75	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }	  	non-compiled	[CE]  not  a  statement	79	None	add
76	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
77	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was, "  +  value);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was, "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was, "  +  value);  }	  	non-compiled	[CE]  not  a  statement	79	None	add
78	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was... "  +  value);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was... "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was... "  +  value);  }	  	non-compiled	[CE]  not  a  statement	79	None	add
79	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	90	None	replace
80	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	87	None	replace
81	[BUG]  [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	87	None	replace
82	[BUG]  [BUGGY]  if(value  <  1)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  1)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  1)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	87	None	replace
83	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
84	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
85	[BUG]  [BUGGY]  ||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
86	[BUG]  [BUGGY]  ||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
87	[BUG]  [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	41	None	replace
88	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	118	None	replace
89	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	118	None	replace
90	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was, "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was, "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was, "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	118	None	replace
91	[BUG]  [BUGGY]  java.lang.IllegalArgumentException:  Number  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException:  Number  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException:  Number  values  must  be  numeric,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	135	None	replace
92	[BUG]  [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	135	None	replace
93	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	123	None	replace
94	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	17	None	add
95	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    new  IllegalArgumentException(, "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
96	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    new  IllegalArgumentException( ",Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
97	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    New  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
98	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
99	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    new  IllegalArgumentException(. "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
100	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
101	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
102	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
103	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
104	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
105	[BUG]  [BUGGY]  ||(value  >  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
106	[BUG]  [BUGGY]  ||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
107	[BUG]  [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
108	[BUG]  [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
109	[BUG]  [BUGGY]  Throwables.warning( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.warning( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.warning( "Numeric  values  must  be  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
110	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  new  JsonWriter( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  new  JsonWriter( "Numeric  values  must  be  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
111	[BUG]  [BUGGY]  Argument.error( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Argument.error( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Argument.error( "Numeric  values  must  be  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
112	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.doubleValue());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.doubleValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.doubleValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
113	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.length);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.length);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.length);	  new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
114	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.intValue());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.intValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value.intValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
115	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);	  new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
116	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
117	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
118	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
119	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
120	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
121	[BUG]  [BUGGY]  Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  infinity,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
122	[BUG]  [BUGGY]  String  msg( "Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  String  msg( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	String  msg( "Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
123	[BUG]  [BUGGY]  Number  values  must  be  infinity,  but  was   "  +  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  infinity,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  	155	None	replace
124	[BUG]  [BUGGY]          writeDeferredName();  writeDeferredName();  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  writeDeferredName();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    writeDeferredName();	  	non-compiled	[CE]  	53	None	add
125	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  not  a  statement	53	None	add
126	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append(Double.toString(value));  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append(Double.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append(Double.toString(value));  }	  	non-compiled	[CE]  	53	None	add
127	[BUG]  [BUGGY]          writeDeferredName();  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS);	  	non-compiled	[CE]  	53	None	add
128	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  	non-compiled	[CE]  	53	None	add
129	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }	  	non-compiled	[CE]  	53	None	add
130	[BUG]  [BUGGY]          writeDeferredName();  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value);	  	non-compiled	[CE]  	53	None	add
131	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  	non-compiled	[CE]  	53	None	add
132	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this.value);  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this.value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
133	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
134	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  indent);  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  indent);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
135	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was: "  +  value);  [CE]  <identifier>  expected  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was: "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
136	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this);  [CE]  <identifier>  expected  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
137	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value.toString());  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  undefined,  but  was "  +  value.toString());	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	46	None	replace
138	[BUG]  [BUGGY]  _reportError( "Numeric  value  must  be  undefined,  but  was "  +  value);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  value  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  value  must  be  undefined,  but  was "  +  value);	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	46	None	replace
139	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value.doubleValue());  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value.doubleValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  undefined,  but  was "  +  value.doubleValue());	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	46	None	replace
140	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was: "  +  value);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  undefined,  but  was: "  +  value);	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	46	None	replace
141	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	164	None	replace
142	[BUG]  [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[stack.size()  ]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[stack.size()  ]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  stack.getStackSize();  out.append(newStack[stack.size()  ]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	55	None	replace
143	[BUG]  [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[size()  ]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[size()  ]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  stack.getStackSize();  out.append(newStack[size()  ]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	55	None	replace
144	[BUG]  [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[newStack.length  ]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[newStack.length  ]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  stack.getStackSize();  out.append(newStack[newStack.length  ]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	55	None	replace
145	[BUG]  [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[oldStack.size()  ]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[oldStack.size()  ]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  stack.getStackSize();  out.append(newStack[oldStack.size()  ]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	55	None	replace
146	[BUG]  [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[this.stack.size()  ]);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[this.stack.size()  ]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  stack.getStackSize();  out.append(newStack[this.stack.size()  ]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	55	None	replace
147	[BUG]  [BUGGY]  int[]  newStack  =  this.stack.getStackSize();  out.append(newStack[newStack.size()  ]);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  this.stack.getStackSize();  out.append(newStack[newStack.size()  ]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  this.stack.getStackSize();  out.append(newStack[newStack.size()  ]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	55	None	replace
148	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	114	None	replace
149	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
150	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
151	[BUG]  [BUGGY]  readFully(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  readFully(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	readFully(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	114	None	replace
152	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	88	None	replace
153	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  	88	None	replace
154	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	88	None	replace
155	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	88	None	replace
156	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    this);    	non-compiled	[CE]  <identifier>  expected	163	None	replace
157	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  getMessage());  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  getMessage());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  getMessage());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    this);    	non-compiled	[CE]  not  a  statement	163	None	replace
158	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  getClass());  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  getClass());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  getClass());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    this);    	non-compiled	[CE]  not  a  statement	163	None	replace
159	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  null);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  null);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  null);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    this);    	non-compiled	[CE]  not  a  statement	163	None	replace
160	[BUG]  [BUGGY]  out.append(Double.toString(value));  return  null;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toString(value));  return  null;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toString(value));  return  null;	          out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  not  a  statement	132	None	replace
161	[BUG]  [BUGGY]  out.write(Double.toString(value));  return  null;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.write(Double.toString(value));  return  null;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.write(Double.toString(value));  return  null;	          out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  not  a  statement	132	None	replace
162	[BUG]  [BUGGY]  out.write(Double.toString(value));  return  this;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.write(Double.toString(value));  return  this;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.write(Double.toString(value));  return  this;	          out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  not  a  statement	132	None	replace
163	[BUG]  [BUGGY]  out.write(Double.toString(value));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.write(Double.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.write(Double.toString(value));	          out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  not  a  statement	132	None	replace
164	[BUG]  [BUGGY]  out.append(Double.toString(value)+  1);  return  this;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toString(value)+  1);  return  this;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toString(value)+  1);  return  this;	          out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  not  a  statement	132	None	replace
165	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	9	None	replace
166	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	9	None	replace
167	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  this.value);  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    this.value);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
168	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  value  must  be  numeric,  but  was "  +  this.value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  value  must  be  numeric,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  value  must  be  numeric,  but  was "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    this.value);    	non-compiled	[CE]  not  a  statement	50	None	replace
169	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  this.value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    this.value);    	non-compiled	[CE]  	50	None	replace
170	[BUG]  [BUGGY]  String  msg( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  String  msg( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	String  msg( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	150	None	replace
171	[BUG]  [BUGGY]  Throwables.warning( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.warning( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.warning( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	150	None	replace
172	[BUG]  [BUGGY]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  	117	None	replace
173	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);	  	non-compiled	[CE]  	13	None	add
174	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);	  	non-compiled	[CE]  	13	None	add
175	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);	  	non-compiled	[CE]  	13	None	add
176	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);	  	non-compiled	[CE]  not  a  statement	13	None	add
177	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  not  a  statement	40	None	add
178	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
179	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
180	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  not  a  statement	40	None	add
181	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
182	[BUG]  [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	38	None	replace
183	[BUG]  [BUGGY]  Argument.error( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Argument.error( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Argument.error( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	38	None	replace
184	[BUG]  [BUGGY]  Throwables.newString( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.newString( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.newString( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	38	None	replace
185	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  	84	None	add
186	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  	84	None	add
187	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  	84	None	add
188	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was... "  +  value);  [CE]  [FE]          junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was... "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was... "  +  value);	  	non-compiled	[CE]  	84	None	add
189	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  this.value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    this.value);    	non-compiled	[CE]  	141	None	replace
190	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  this.value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    this.value);    	non-compiled	[CE]  	141	None	replace
191	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i));	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  	60	None	replace
192	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append( "null ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i)).append( "null ");	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  	60	None	replace
193	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('.');  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('.');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i)).append('.');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  	60	None	replace
194	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(0));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(0));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(0));	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  	60	None	replace
195	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('n');  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('n');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i)).append('n');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  	60	None	replace
196	[BUG]  [BUGGY]  Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  infinite,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  	125	None	replace
197	[BUG]  [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  	10	None	replace
198	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
199	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	161	None	replace
200	[BUG]  [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	161	None	replace
201	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	161	None	replace
202	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
203	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "1.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "1.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "1.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
204	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
205	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
206	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	72	None	replace
207	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [CE]  not  a  statement  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());	  	non-compiled	[CE]  not  a  statement	75	None	add
208	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [CE]  not  a  statement  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());	  	non-compiled	[CE]  not  a  statement	75	None	add
209	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  JsonWriter  out  =  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [CE]  not  a  statement  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  JsonWriter  out  =  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    JsonWriter  out  =  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());	  	non-compiled	[CE]  not  a  statement	75	None	add
210	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [CE]  not  a  statement  [FE]          NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());	  	non-compiled	[CE]  not  a  statement	75	None	add
211	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
212	[BUG]  [BUGGY]  ||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
213	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
214	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
215	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
216	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
217	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
218	[BUG]  [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
219	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
220	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "false ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "false ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "false ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
221	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append('/');  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append('/');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value)).append('/');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
222	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('/');  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('/');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i)).append('/');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
223	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append( "null ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value)).append( "null ");	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
224	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
225	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was. "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was. "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	68	None	replace
226	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.toString(value));  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.toString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	68	None	replace
227	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	68	None	replace
228	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value));  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value));	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	24	None	replace
229	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    	non-compiled	[CE]  	14	None	replace
230	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    	non-compiled	[CE]  	14	None	replace
231	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value.intValue());  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value.intValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value.intValue());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    	non-compiled	[CE]  	14	None	replace
232	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [CE]  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  	76	None	replace
233	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [CE]  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  	76	None	replace
234	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [CE]  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  	76	None	replace
235	[BUG]  [BUGGY]  if(value.length()  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [CE]  [FE]          NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value.length()  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value.length()  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  	76	None	replace
236	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());  [CE]  [FE]            NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  	76	None	replace
237	[BUG]  [BUGGY]  if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  	106	None	replace
238	[BUG]  [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  	30	None	replace
239	[BUG]  [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	26	None	replace
240	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	26	None	replace
241	[BUG]  [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	26	None	replace
242	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	26	None	replace
243	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
244	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
245	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
246	[BUG]  [BUGGY]  ||(value  <  0.0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
247	[BUG]  [BUGGY]  ||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
248	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "1.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "1.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "1.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
249	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  	non-compiled	[CE]  	15	None	add
250	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
251	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
252	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
253	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
254	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
255	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
256	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
257	[BUG]  [BUGGY]  ||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
258	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
259	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
260	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
261	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
262	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
263	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
264	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was  ' "  +  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was  ' "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was  ' "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
265	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  less  than  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  less  than  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  less  than  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
266	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
267	[BUG]  [BUGGY]  bucket  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  bucket  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	bucket  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
268	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
269	[BUG]  [BUGGY]  ||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
270	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
271	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
272	[BUG]  [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  <identifier>  expected  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
273	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
274	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	136	None	replace
275	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
276	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
277	[BUG]  [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	136	None	replace
278	[BUG]  [BUGGY]  ||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
279	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
280	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
281	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  	62	None	add
282	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    New  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  	62	None	add
283	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);	  	non-compiled	[CE]  	62	None	add
284	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
285	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	86	None	replace
286	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	86	None	replace
287	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	86	None	replace
288	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
289	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
290	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
291	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was: "  +  this.value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was: "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was: "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    this.value);    	non-compiled	[CE]  not  a  statement	143	None	replace
292	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    this.value);    	non-compiled	[CE]  not  a  statement	143	None	replace
293	[BUG]  [BUGGY]  _verifyValueWrite( "null  value ");  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _verifyValueWrite( "null  value ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_verifyValueWrite( "null  value ");	          writeNull();    	non-compiled	[CE]  not  a  statement	52	None	replace
294	[BUG]  [BUGGY]  StaxUtil.writeNull(out,  value);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  StaxUtil.writeNull(out,  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	StaxUtil.writeNull(out,  value);	          writeNull();    	non-compiled	[CE]  not  a  statement	52	None	replace
295	[BUG]  [BUGGY]  Writer  out  =  this.stack.getWriter();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  this.stack.getWriter();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  this.stack.getWriter();	          writeNull();    	non-compiled	[CE]  not  a  statement	52	None	replace
296	[BUG]  [BUGGY]  StaxUtil.writeStandardNull();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  StaxUtil.writeStandardNull();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	StaxUtil.writeStandardNull();	          writeNull();    	non-compiled	[CE]  not  a  statement	52	None	replace
297	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(stack,  null,  value);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  new  JsonWriter(stack,  null,  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  new  JsonWriter(stack,  null,  value);	          writeNull();    	non-compiled	[CE]  not  a  statement	52	None	replace
298	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  <identifier>  expected	77	None	add
299	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  JsonWriter.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  JsonWriter.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    JsonWriter.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  <identifier>  expected	77	None	add
300	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  [CE]  <identifier>  expected  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);	  	non-compiled	[CE]  <identifier>  expected	77	None	add
301	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throwables.throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]          junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throwables.throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    Throwables.throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  <identifier>  expected	77	None	add
302	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  JsonWriter  out  =  new  JsonWriter( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]            junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  JsonWriter  out  =  new  JsonWriter( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    JsonWriter  out  =  new  JsonWriter( "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  <identifier>  expected	77	None	add
303	[BUG]  [BUGGY]  if(value  <  1)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  1)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  1)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	97	None	replace
304	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	5	None	replace
305	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	5	None	replace
306	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was, "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was, "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was, "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	5	None	replace
307	[BUG]  [BUGGY]  Arguments.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Arguments.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Arguments.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	5	None	replace
308	[BUG]  [BUGGY]  java.lang.IllegalArgumentException:  Number  values  must  be  null,  but  was   "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException:  Number  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException:  Number  values  must  be  null,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	109	None	replace
309	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	47	None	replace
310	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	47	None	replace
311	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  getName());  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  getName());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  getName());	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	47	None	replace
312	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was... "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was... "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was... "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	25	None	replace
313	[BUG]  [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	154	None	replace
314	[BUG]  [BUGGY]  Throwables.warning( "Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.warning( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.warning( "Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	154	None	replace
315	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	48	None	add
316	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    new  IllegalArgumentException(, "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	48	None	add
317	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    new  IllegalArgumentException( ",Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	48	None	add
318	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);	  	non-compiled	[CE]  not  a  statement	48	None	add
319	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    New  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	48	None	add
320	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
321	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
322	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
323	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
324	[BUG]  [BUGGY]  Throwables.warning( "Numeric  values  must  be  infinite,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.warning( "Numeric  values  must  be  infinite,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.warning( "Numeric  values  must  be  infinite,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
325	[BUG]  [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	89	None	replace
326	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	69	None	add
327	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	69	None	add
328	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( ",Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    new  IllegalArgumentException( ",Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	69	None	add
329	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  New  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    New  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	69	None	add
330	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);	  	non-compiled	[CE]  not  a  statement	69	None	add
331	[BUG]  [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	23	None	replace
332	[BUG]  [BUGGY]  Throwables.warning( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.warning( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.warning( "Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	23	None	replace
333	[BUG]  [BUGGY]  Throwables.newString( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.newString( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.newString( "Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	23	None	replace
334	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	96	None	replace
335	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	96	None	replace
336	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
337	[BUG]  [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	139	None	replace
338	[BUG]  [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
339	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
340	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  	non-compiled	[CE]  	71	None	add
341	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }  [CE]  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }	  	non-compiled	[CE]  	71	None	add
342	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
343	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
344	[BUG]  [BUGGY]  ||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
345	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
346	[BUG]  [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
347	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
348	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
349	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
350	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  indent);  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  indent);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
351	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  getName());  [CE]  <identifier>  expected  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  getName());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  getName());	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
352	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  ValueUtils.toString(value));  [CE]  <identifier>  expected  [FE]          junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  ValueUtils.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  ValueUtils.toString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
353	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  ValueUtils.safeNegate(value));  [CE]  <identifier>  expected  [FE]            junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  ValueUtils.safeNegate(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  ValueUtils.safeNegate(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
354	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
355	[BUG]  [BUGGY]  ||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
356	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
357	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
358	[BUG]  [BUGGY]  ||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
359	[BUG]  [BUGGY]  ||(value  >=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
360	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
361	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	80	None	replace
362	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	80	None	replace
363	[BUG]  [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  [FE]          junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	80	None	replace
364	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [CE]  [FE]            junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	80	None	replace
365	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was: "  +  value);  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was: "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
366	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
367	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this);  [CE]  <identifier>  expected  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
368	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value));  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value));	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	19	None	replace
369	[BUG]  [BUGGY]  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	134	None	replace
370	[BUG]  [BUGGY]  Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  numeric,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
371	[BUG]  [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
372	[BUG]  [BUGGY]  Throwables.warning( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.warning( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.warning( "Numeric  values  must  be  initialized,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  	151	None	replace
373	[BUG]  [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
374	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
375	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append('-');  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append('-');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value)).append('-');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('-');    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
376	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('-');  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('-');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i)).append('-');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('-');    }    	non-compiled	[CE]  	59	None	replace
377	[BUG]  [BUGGY]  ||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
378	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  	130	None	replace
379	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  	130	None	replace
380	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  	130	None	replace
381	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  	130	None	replace
382	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalStateException( " ");  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  	130	None	replace
383	[BUG]  [BUGGY]  writeNull();  out.append(Double.toString(value));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeNull();  out.append(Double.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeNull();  out.append(Double.toString(value));	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  	130	None	replace
384	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  + ",  value);  [CE]  unclosed  string  literal  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  + ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  + ",  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   ",    value);    	non-compiled	[CE]  unclosed  string  literal	51	None	replace
385	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  name,  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  name,  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  name,  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   ",    value);    	non-compiled	[CE]  	51	None	replace
386	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.doubleValue());  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.doubleValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.doubleValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  	94	None	replace
387	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was: "  +  value);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was: "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	94	None	replace
388	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.length);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.length);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.length);	  new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	94	None	replace
389	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.toString());  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value.toString());	  new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
390	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
391	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
392	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
393	[BUG]  [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	100	None	replace
394	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	100	None	replace
395	[BUG]  [BUGGY]  Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  zero,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  	119	None	replace
396	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	37	None	replace
397	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  else  {  writeNull();  }  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  else  {  writeNull();  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  else  {  writeNull();  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	37	None	replace
398	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.doubleValue());  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.doubleValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.doubleValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  	83	None	replace
399	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.length);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.length);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.length);	  new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  	83	None	replace
400	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.toString());  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value.toString());	  new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  	83	None	replace
401	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	101	None	replace
402	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	101	None	replace
403	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	101	None	replace
404	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	20	None	replace
405	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  not  be  numeric,  but  was "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  not  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  not  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	20	None	replace
406	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	20	None	replace
407	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	20	None	replace
408	[BUG]  [BUGGY]  ||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	138	None	replace
409	[BUG]  [BUGGY]  out.append(Double.toString(value)+  1);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toString(value)+  1);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toString(value)+  1);	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
410	[BUG]  [BUGGY]  out.append(Double.toHexString(value));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toHexString(value));	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
411	[BUG]  [BUGGY]  out.append(String.valueOf(value));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(String.valueOf(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(String.valueOf(value));	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
412	[BUG]  [BUGGY]  out.append(Double.toNaN(value));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toNaN(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toNaN(value));	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
413	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	103	None	replace
414	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
415	[BUG]  [BUGGY]  Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append( ",   ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append( ",   ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append( ",   ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
416	[BUG]  [BUGGY]  Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append( ", ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append( ", ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
417	[BUG]  [BUGGY]  out.toString();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.toString();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.toString();	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
418	[BUG]  [BUGGY]  out.append( "null ");  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( "null ");  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString(  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( "null ");  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString(	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
419	[BUG]  [BUGGY]  out.append( "null ");  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( "null ");  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( "null ");  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  not  a  statement	57	None	replace
420	[BUG]  [BUGGY]  out.append(Double.toString(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toString(  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toString(	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
421	[BUG]  [BUGGY]  java.lang.IllegalArgumentException:  Number  values  must  be  undefined,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException:  Number  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException:  Number  values  must  be  undefined,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
422	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  not  a  statement	81	None	add
423	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }	  	non-compiled	[CE]  not  a  statement	81	None	add
424	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  not  a  statement	81	None	add
425	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was, "  +  value);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was, "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was, "  +  value);  }	  	non-compiled	[CE]  not  a  statement	81	None	add
426	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	152	None	replace
427	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.length);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.length);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.length);	  new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	43	None	replace
428	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.doubleValue());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.doubleValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.doubleValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	43	None	replace
429	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.toString());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.toString());	  new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	43	None	replace
430	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.intValue());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.intValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value.intValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	43	None	replace
431	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	82	None	replace
432	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	82	None	replace
433	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	82	None	replace
434	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.doubleValue());  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.doubleValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.doubleValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	49	None	replace
435	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.toString());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.toString());	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	49	None	replace
436	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.length);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.length);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value.length);	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	49	None	replace
437	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this.value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this.value);	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  	49	None	replace
438	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  	66	None	add
439	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  	66	None	add
440	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }	  	non-compiled	[CE]  	66	None	add
441	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  	66	None	add
442	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  	66	None	add
443	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	162	None	replace
444	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.length);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.length);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.length);	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	162	None	replace
445	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	162	None	replace
446	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.intValue());  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.intValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.intValue());	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	162	None	replace
447	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value);	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	162	None	replace
448	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value));  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value));	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
449	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
450	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
451	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
452	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
453	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "NaN ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "NaN ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "NaN ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
454	[BUG]  [BUGGY]  Writer  out  =  getOutputFile();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputFile();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputFile();	          Writer    out    =    getWriter();    	non-compiled	[CE]  not  a  statement	56	None	replace
455	[BUG]  [BUGGY]  Writer  out  =  getOutputStream();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputStream();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputStream();	          Writer    out    =    getWriter();    	non-compiled	[CE]  	56	None	replace
456	[BUG]  [BUGGY]  Writer  out  =  getOutputForWriter();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputForWriter();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputForWriter();	          Writer    out    =    getWriter();    	non-compiled	[CE]  	56	None	replace
457	[BUG]  [BUGGY]  Writer  out  =  getOutputBuffer();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputBuffer();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputBuffer();	          Writer    out    =    getWriter();    	non-compiled	[CE]  not  a  statement	56	None	replace
458	[BUG]  [BUGGY]  Writer  out  =  getDefaultWriter();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getDefaultWriter();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getDefaultWriter();	          Writer    out    =    getWriter();    	non-compiled	[CE]  not  a  statement	56	None	replace
459	[BUG]  [BUGGY]  Writer  out  =  getReader();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getReader();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getReader();	          Writer    out    =    getWriter();    	non-compiled	[CE]  	56	None	replace
460	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.length);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.length);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.length);	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	70	None	replace
461	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.doubleValue());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.doubleValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.doubleValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	70	None	replace
462	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.intValue());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.intValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.intValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	70	None	replace
463	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.getMessage());	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	70	None	replace
464	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	35	None	replace
465	[BUG]  [BUGGY]  Arguments.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Arguments.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Arguments.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	35	None	replace
466	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	35	None	replace
467	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value));  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.wrap(new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value));	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
468	[BUG]  [BUGGY]  if(values.length  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(values.length  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(values.length  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
469	[BUG]  [BUGGY]  if(values.length  ==  1)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(values.length  ==  1)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(values.length  ==  1)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
470	[BUG]  [BUGGY]  if(values.length  >  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(values.length  >  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(values.length  >  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	          writeDeferredName();    	non-compiled	[CE]  not  a  statement	54	None	replace
471	[BUG]  [BUGGY]  if(values.length  ==  1)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(values.length  ==  1)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(values.length  ==  1)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	          writeDeferredName();    	non-compiled	[CE]  not  a  statement	54	None	replace
472	[BUG]  [BUGGY]  if(values!=  null)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(values!=  null)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(values!=  null)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	          writeDeferredName();    	non-compiled	[CE]  not  a  statement	54	None	replace
473	[BUG]  [BUGGY]  if(values  ==  null)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(values  ==  null)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(values  ==  null)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	          writeDeferredName();    	non-compiled	[CE]  not  a  statement	54	None	replace
474	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.doubleValue());  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.doubleValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.doubleValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	63	None	replace
475	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.length);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.length);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.length);	  new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	63	None	replace
476	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.intValue());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.intValue());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.intValue());	  new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	63	None	replace
477	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.toString());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value.toString());	  new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	63	None	replace
478	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this.value);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this.value);	  new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	63	None	replace
479	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  	non-compiled	[CE]  not  a  statement	73	None	add
480	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }  [CE]  <identifier>  expected  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }	  	non-compiled	[CE]  <identifier>  expected	73	None	add
481	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  <identifier>  expected  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(, "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  	non-compiled	[CE]  <identifier>  expected	73	None	add
482	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  }  [CE]  <identifier>  expected  [FE]          NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was... "  +  value);  }	  	non-compiled	[CE]  <identifier>  expected	73	None	add
483	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
484	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
485	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
486	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
487	[BUG]  [BUGGY]  writeName();  out.append( "null ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeName();  out.append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeName();  out.append( "null ");	          writeDeferredName();    out.append(   "null   ");    	non-compiled	[CE]  <identifier>  expected	133	None	replace
488	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
489	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append( "null ");  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  out.append( "null ");  }	          writeDeferredName();    out.append(   "null   ");    	non-compiled	[CE]  not  a  statement	133	None	replace
490	[BUG]  [BUGGY]  Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append('n');  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append('n');  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
491	[BUG]  [BUGGY]  Writer  out  =  getCurrentWriter();  if(out!=  null)  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getCurrentWriter();  if(out!=  null)  {  out.append('n');  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getCurrentWriter();  if(out!=  null)  {  out.append('n');  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
492	[BUG]  [BUGGY]  Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append('n');  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append('n');  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
493	[BUG]  [BUGGY]  Writer  out  =  getOutputStream();  if(out!=  null)  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputStream();  if(out!=  null)  {  out.append('n');  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputStream();  if(out!=  null)  {  out.append('n');  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
494	[BUG]  [BUGGY]  Writer  out  =  this.getWriter();  if(out!=  null)  {  out.append('n');  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  this.getWriter();  if(out!=  null)  {  out.append('n');  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  this.getWriter();  if(out!=  null)  {  out.append('n');  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append('n');    }    	non-compiled	[CE]  	148	None	replace
495	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
496	[BUG]  [BUGGY]  ||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >=  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
497	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
498	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
499	[BUG]  [BUGGY]  ||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  >=  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	116	None	replace
500	[BUG]  [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  java.lang.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	java.lang.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	36	None	replace
501	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  out.append( "null ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeNull();  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeNull();  out.append( "null ");  }	  writeNull();    out.append(   "null   ");    	non-compiled	[CE]  	147	None	replace
502	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeNull();  out.append( "null ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  writeNull();  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  writeNull();  out.append( "null ");  }	  writeNull();    out.append(   "null   ");    	non-compiled	[CE]  	147	None	replace
503	[BUG]  [BUGGY]  ||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  null  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
504	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
505	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "- ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
506	[BUG]  [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  ==  0.0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
507	[BUG]  [BUGGY]  Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  non-empty,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	159	None	replace
508	[BUG]  [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	149	None	replace
509	[BUG]  [BUGGY]  Argument.error( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Argument.error( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Argument.error( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	149	None	replace
510	[BUG]  [BUGGY]  Throwables.newString( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.newString( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.newString( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	149	None	replace
511	[BUG]  [BUGGY]  Throwables.MESSAGES.add( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.MESSAGES.add( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.MESSAGES.add( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
512	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "null ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
513	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
514	[BUG]  [BUGGY]  writeNull();  out.append(Double.toString(value));  return  this;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeNull();  out.append(Double.toString(value));  return  this;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeNull();  out.append(Double.toString(value));  return  this;	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
515	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
516	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
517	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
518	[BUG]  [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  null;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(Double.isNaN(value)||  Double.isInfinite(value))  {  writeDeferredName();  out.append(Double.toString(value));  return  null;  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
519	[BUG]  [BUGGY]  Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputForWriter();  if(out!=  null)  {  out.append( "null ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
520	[BUG]  [BUGGY]  Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputFile();  if(out!=  null)  {  out.append( "null ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
521	[BUG]  [BUGGY]  Writer  out  =  getCurrentWriter();  if(out!=  null)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getCurrentWriter();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getCurrentWriter();  if(out!=  null)  {  out.append( "null ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
522	[BUG]  [BUGGY]  Writer  out  =  getOutputStream();  if(out!=  null)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputStream();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputStream();  if(out!=  null)  {  out.append( "null ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
523	[BUG]  [BUGGY]  Writer  out  =  this.getWriter();  if(out!=  null)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  this.getWriter();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  this.getWriter();  if(out!=  null)  {  out.append( "null ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
524	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [CE]  illegal  start  of  expression  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value.toString());	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
525	[BUG]  [BUGGY]  Number  values  must  be  zero,  but  was   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  zero,  but  was   "  +  value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  	153	None	replace
526	[BUG]  [BUGGY]  NullValues.writeNull(value);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNull(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNull(value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
527	[BUG]  [BUGGY]  Math.sqrt(value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Math.sqrt(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Math.sqrt(value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	153	None	replace
528	[BUG]  [BUGGY]  readNull();  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  readNull();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	readNull();	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	153	None	replace
529	[BUG]  [BUGGY]  NullValue  value  =  null;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  value  =  null;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  value  =  null;	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
530	[BUG]  [BUGGY]  validateNull(value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  validateNull(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	validateNull(value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
531	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    new  IllegalArgumentException( ")Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
532	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
533	[BUG]  [BUGGY]  MutableValueSerializer.assertNull(value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueSerializer.assertNull(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueSerializer.assertNull(value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
534	[BUG]  [BUGGY]  MutableValueSerializer.assertTrue(value  <  0.0);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueSerializer.assertTrue(value  <  0.0);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueSerializer.assertTrue(value  <  0.0);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
535	[BUG]  [BUGGY]  MutableValueSerializer.assertTrue(value  <  =  0.0);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueSerializer.assertTrue(value  <  =  0.0);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueSerializer.assertTrue(value  <  =  0.0);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
536	[BUG]  [BUGGY]  NullValue  value  =  Double.valueOf(value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  value  =  Double.valueOf(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  value  =  Double.valueOf(value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
537	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    new  IllegalArgumentException( ")Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  	48	None	add
538	[BUG]  [BUGGY]  readFully(out,  value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  readFully(out,  value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	readFully(out,  value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	114	None	replace
539	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
540	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
541	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
542	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
543	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
544	[BUG]  [BUGGY]  writeName();  out.append(Double.toString(value));  return  this;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeName();  out.append(Double.toString(value));  return  this;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeName();  out.append(Double.toString(value));  return  this;	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
545	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
546	[BUG]  [BUGGY]  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
547	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  this.value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    this.value);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
548	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
549	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
550	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
551	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
552	[BUG]  [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
553	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
554	[BUG]  [BUGGY]  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
555	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
556	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
557	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
558	[BUG]  [BUGGY]  Writer  out  =  getOutputFilter();  if(out!=  null)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputFilter();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputFilter();  if(out!=  null)  {  out.append( "null ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
559	[BUG]  [BUGGY]  Writer  out  =  getOutput();  if(out!=  null)  {  out.append( "null ");  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutput();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutput();  if(out!=  null)  {  out.append( "null ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   "null   ");    }    	non-compiled	[CE]  not  a  statement	144	None	replace
560	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was  ' "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was  ' "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was  ' "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	94	None	replace
561	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this);	  new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	94	None	replace
562	[BUG]  [BUGGY]  Writer  out  =  getOutputFilter();  if(out!=  null)  {  out.append('n');  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputFilter();  if(out!=  null)  {  out.append('n');  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputFilter();  if(out!=  null)  {  out.append('n');  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append('n');    }    	non-compiled	[CE]  not  a  statement	148	None	replace
563	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was  ' "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was  ' "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was  ' "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	118	None	replace
564	[BUG]  [BUGGY]  NullValue  value  =  Double.parseDouble(value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  value  =  Double.parseDouble(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  value  =  Double.parseDouble(value);	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
565	[BUG]  [BUGGY]  NullValue  value  =  Double.valueOf(value).doubleValue();  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  value  =  Double.valueOf(value).doubleValue();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  value  =  Double.valueOf(value).doubleValue();	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
566	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	112	None	replace
567	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	112	None	replace
568	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	18	None	replace
569	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	18	None	replace
570	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this);	  new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	18	None	replace
571	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	68	None	replace
572	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	68	None	replace
573	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  name);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  name);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  name);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	68	None	replace
574	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(size()  -  1)  ==  '/');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(size()  -  1)  ==  '/');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(size()  -  1)  ==  '/');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  not  a  statement	58	None	replace
575	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value  -  1)  ==  '/');  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value  -  1)  ==  '/');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value  -  1)  ==  '/');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  	58	None	replace
576	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(size()  -  1)  ==  '/')  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(size()  -  1)  ==  '/')  {  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(size()  -  1)  ==  '/')  {	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  	58	None	replace
577	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append('n');  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append('n');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value)).append('n');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  	58	None	replace
578	[BUG]  [BUGGY]  NullValue  value  =  getNullValue();  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  value  =  getNullValue();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  value  =  getNullValue();	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
579	[BUG]  [BUGGY]  NullValue  value  =  new  NullValue(value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  value  =  new  NullValue(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  value  =  new  NullValue(value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
580	[BUG]  [BUGGY]  NullValue  value  =  new  NullValue();  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  value  =  new  NullValue();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  value  =  new  NullValue();	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
581	[BUG]  [BUGGY]  Numeric  values  must  be  non-empty,  but  was   "  +  value;  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  non-empty,  but  was   "  +  value;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  non-empty,  but  was   "  +  value;	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
582	[BUG]  [BUGGY]  NullValues.writeNumber(value,  out);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value,  out);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value,  out);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
583	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i),  'n');  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i),  'n');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i),  'n');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  	57	None	replace
584	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('ufffd');  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i)).append('ufffd');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i)).append('ufffd');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  	57	None	replace
585	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  value);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  	49	None	replace
586	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was  ' "  +  value);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was  ' "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was  ' "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  	49	None	replace
587	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  	49	None	replace
588	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this);  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this);	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  	49	None	replace
589	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	20	None	replace
590	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	20	None	replace
591	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	70	None	replace
592	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	70	None	replace
593	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	70	None	replace
594	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	70	None	replace
595	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	43	None	replace
596	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  indent);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  indent);	  new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	43	None	replace
597	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	43	None	replace
598	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  Integer.toHexString(value));  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  Integer.toHexString(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  	83	None	replace
599	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  Integer.toString(value));  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  Integer.toString(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  	83	None	replace
600	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  indent);  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  indent);	  new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  	83	None	replace
601	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  equal,  but  was   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  equal,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  equal,  but  was   "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  	164	None	replace
602	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  	87	None	replace
603	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	104	None	replace
604	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	104	None	replace
605	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	104	None	replace
606	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	104	None	replace
607	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was: "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	47	None	replace
608	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  indent);  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  indent);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
609	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this);  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
610	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
611	[BUG]  [BUGGY]  if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
612	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	82	None	replace
613	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	82	None	replace
614	[BUG]  [BUGGY]  ||(value  <  0.0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
615	[BUG]  [BUGGY]  MutableValue.isNaN(value)||  MutableValue.isInfinite(value);  [CE]  not  a  statement  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValue.isNaN(value)||  MutableValue.isInfinite(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValue.isNaN(value)||  MutableValue.isInfinite(value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
616	[BUG]  [BUGGY]  MutableValue.isNaN(value)||  Double.isInfinite(value);  [CE]  not  a  statement  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValue.isNaN(value)||  Double.isInfinite(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValue.isNaN(value)||  Double.isInfinite(value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
617	[BUG]  [BUGGY]  MutableValue.isNaN(value)||  MutableValue.isFunction(value);  [CE]  not  a  statement  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValue.isNaN(value)||  MutableValue.isFunction(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValue.isNaN(value)||  MutableValue.isFunction(value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
618	[BUG]  [BUGGY]  MutableValueSerializer.assertNotNull(value);  [CE]  [FE]          NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueSerializer.assertNotNull(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueSerializer.assertNotNull(value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	74	None	replace
619	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    	non-compiled	[CE]  	14	None	replace
620	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
621	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
622	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
623	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
624	[BUG]  [BUGGY]  Number  values  must  be  infinite,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  infinite,  but  was   "  +  value);	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
625	[BUG]  [BUGGY]  Number  values  must  be  infinite,  but  was   "  +  value;  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  infinite,  but  was   "  +  value;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  infinite,  but  was   "  +  value;	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
626	[BUG]  [BUGGY]  NullValues.writeNumber(value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value);	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
627	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
628	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
629	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
630	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
631	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
632	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
633	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
634	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Value.valueOf(value));  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Value.valueOf(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Value.valueOf(value));  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
635	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i).toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i).toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i).toString());	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
636	[BUG]  [BUGGY]  out.append( "null ").append(Integer.toHexString(value));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( "null ").append(Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( "null ").append(Integer.toHexString(value));	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
637	[BUG]  [BUGGY]  out.append( "null ").append(Integer.toString(value));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( "null ").append(Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( "null ").append(Integer.toString(value));	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
638	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
639	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was ",  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
640	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
641	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
642	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    	non-compiled	[CE]  	54	None	replace
643	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	          writeDeferredName();    	non-compiled	[CE]  	54	None	replace
644	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }	          writeDeferredName();    	non-compiled	[CE]  	54	None	replace
645	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	          writeDeferredName();    	non-compiled	[CE]  	54	None	replace
646	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	          writeDeferredName();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
647	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }	          writeDeferredName();    	non-compiled	[CE]  	54	None	replace
648	[BUG]  [BUGGY]  out.append(Double.toHexString(value));  return  this;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toHexString(value));  return  this;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toHexString(value));  return  this;	          out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  	132	None	replace
649	[BUG]  [BUGGY]  out.append(String.valueOf(value));  return  this;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(String.valueOf(value));  return  this;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(String.valueOf(value));  return  this;	          out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
650	[BUG]  [BUGGY]  MutableValues.assertEquals(value,  out.toString());  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValues.assertEquals(value,  out.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValues.assertEquals(value,  out.toString());	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	116	None	replace
651	[BUG]  [BUGGY]  MutableValues.assertTrue(value!=  0.0);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValues.assertTrue(value!=  0.0);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValues.assertTrue(value!=  0.0);	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	116	None	replace
652	[BUG]  [BUGGY]  MutableValues.writeNumber(value,  out);  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValues.writeNumber(value,  out);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValues.writeNumber(value,  out);	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	116	None	replace
653	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	159	None	replace
654	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    this);    	non-compiled	[CE]  	163	None	replace
655	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  indent);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    this);    	non-compiled	[CE]  	163	None	replace
656	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    this);    	non-compiled	[CE]  	163	None	replace
657	[BUG]  [BUGGY]  StaxUtil.writeStandardNull(out);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  StaxUtil.writeStandardNull(out);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	StaxUtil.writeStandardNull(out);	          writeNull();    	non-compiled	[CE]  	52	None	replace
658	[BUG]  [BUGGY]  Writer  out  =  null;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  null;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  null;	          writeNull();    	non-compiled	[CE]  	52	None	replace
659	[BUG]  [BUGGY]  StaxUtil.writeStandardNull(out,  stack);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  StaxUtil.writeStandardNull(out,  stack);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	StaxUtil.writeStandardNull(out,  stack);	          writeNull();    	non-compiled	[CE]  	52	None	replace
660	[BUG]  [BUGGY]  StaxUtil.writeStandardNull(out, "null ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  StaxUtil.writeStandardNull(out, "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	StaxUtil.writeStandardNull(out, "null ");	          writeNull();    	non-compiled	[CE]  	52	None	replace
661	[BUG]  [BUGGY]  StaxUtil.writeNull(out);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  StaxUtil.writeNull(out);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	StaxUtil.writeNull(out);	          writeNull();    	non-compiled	[CE]  	52	None	replace
662	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	67	None	replace
663	[BUG]  [BUGGY]  ||(value  <  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
664	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	139	None	replace
665	[BUG]  [BUGGY]  Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  initialized,  but  was   "  +  value);	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	139	None	replace
666	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	139	None	replace
667	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	2	None	add
668	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Number  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	2	None	add
669	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	2	None	add
670	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException:  numeric  values  must  be  empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException:  numeric  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    java.lang.IllegalArgumentException:  numeric  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	2	None	add
671	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException:  null  values  must  be  empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  empty,  but  was   "  +  value);  java.lang.IllegalArgumentException:  null  values  must  be  empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    java.lang.IllegalArgumentException:  null  values  must  be  empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	2	None	add
672	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
673	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	39	None	replace
674	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	101	None	replace
675	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  }  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
676	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was, "  +  value);  }  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was, "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was, "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
677	[BUG]  [BUGGY]  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	109	None	replace
678	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
679	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toString(value));  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
680	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Integer.toHexString(value));  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
681	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
682	[BUG]  [BUGGY]  ||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  Double.isNaN(value)))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
683	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( " ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
684	[BUG]  [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [CE]  illegal  start  of  expression  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
685	[BUG]  [BUGGY]  if(value.length()  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [CE]  illegal  start  of  expression  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value.length()  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value.length()  ==  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
686	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [CE]  illegal  start  of  expression  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
687	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  out.append(Double.toString(value));  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  out.append(Double.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  out.append(Double.toString(value));  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
688	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ": ");  out.append(Double.toString(value));  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ": ");  out.append(Double.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ": ");  out.append(Double.toString(value));  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
689	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  out.append(Double.toString(value));  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  out.append(Double.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  out.append(Double.toString(value));  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
690	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append(Double.toString(value));  return  this;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append(Double.toString(value));  return  this;  }	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
691	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  Double.isNaN(value))  {  writeNull();  }  else  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
692	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value))  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  Double.isInfinite(value))  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  Double.isInfinite(value))  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
693	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value))  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  Double.isInfinite(value))  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  Double.isInfinite(value))  {  writeNull();  }  else  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
694	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  Double.isNaN(value))  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
695	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
696	[BUG]  [BUGGY]  Numeric  values  must  be  numeric,  but  was   "  +  value;  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  numeric,  but  was   "  +  value;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  numeric,  but  was   "  +  value;	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	102	None	replace
697	[BUG]  [BUGGY]  NullValue  value  =  values.doubleValue();  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  value  =  values.doubleValue();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  value  =  values.doubleValue();	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	102	None	replace
698	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
699	[BUG]  [BUGGY]  writeDeferredName();  out.append( ".s.IFJDCS ".charAt(value));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeDeferredName();  out.append( ".s.IFJDCS ".charAt(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeDeferredName();  out.append( ".s.IFJDCS ".charAt(value));	          writeDeferredName();    out.append(   "null   ");    	non-compiled	[CE]  not  a  statement	133	None	replace
700	[BUG]  [BUGGY]  writeDeferredName();  out.append( "null ",  Double.toString(value));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeDeferredName();  out.append( "null ",  Double.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeDeferredName();  out.append( "null ",  Double.toString(value));	          writeDeferredName();    out.append(   "null   ");    	non-compiled	[CE]  <identifier>  expected	133	None	replace
701	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  writeNull();    out.append(   "null   ");    	non-compiled	[CE]  <identifier>  expected	147	None	replace
702	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  writeNull();    out.append(   "null   ");    	non-compiled	[CE]  <identifier>  expected	147	None	replace
703	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  }  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
704	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was. "  +  value);  }  [CE]  <identifier>  expected  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was. "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
705	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [CE]  <identifier>  expected  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
706	[BUG]  [BUGGY]  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
707	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  indent);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  indent);	  new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	63	None	replace
708	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  this);	  new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  	63	None	replace
709	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  	91	None	replace
710	[BUG]  [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[0]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[0]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  stack.getStackSize();  out.append(newStack[0]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  	55	None	replace
711	[BUG]  [BUGGY]  int  stackSize  =  stack.getStackSize();  out.append(newStack[stackSize]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int  stackSize  =  stack.getStackSize();  out.append(newStack[stackSize]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int  stackSize  =  stack.getStackSize();  out.append(newStack[stackSize]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  	55	None	replace
712	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	138	None	replace
713	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	138	None	replace
714	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	138	None	replace
715	[BUG]  [BUGGY]  Numeric  values  must  be  infinity,  but  was   "  +  value;  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Numeric  values  must  be  infinity,  but  was   "  +  value;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Numeric  values  must  be  infinity,  but  was   "  +  value;	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	138	None	replace
716	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
717	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  Integer.toHexString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
718	[BUG]  [BUGGY]  out.append(JsonNull.toString(value));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(JsonNull.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(JsonNull.toString(value));	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
719	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    new  IllegalArgumentException( ")Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  	42	None	add
720	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was   "  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  endless,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	88	None	replace
721	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  REPLACEMENT_CHARS);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  REPLACEMENT_CHARS);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  REPLACEMENT_CHARS);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   ",    value);    	non-compiled	[CE]  	51	None	replace
722	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    new  IllegalArgumentException( ")Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  	17	None	add
723	[BUG]  [BUGGY]  Parchet.IllegalArgumentException  :  Math.abs(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Parchet.IllegalArgumentException  :  Math.abs(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Parchet.IllegalArgumentException  :  Math.abs(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
724	[BUG]  [BUGGY]  Parchet.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Parchet.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Parchet.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	100	None	replace
725	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	158	None	replace
726	[BUG]  [BUGGY]  MutableValueSerializer.assertTrue(value  >  0.0, "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueSerializer.assertTrue(value  >  0.0, "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueSerializer.assertTrue(value  >  0.0, "Numeric  values  must  be  initialized,  but  was "  +  value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	158	None	replace
727	[BUG]  [BUGGY]  Number  values  must  be  initialized,  but  was   "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  initialized,  but  was   "  +  value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	158	None	replace
728	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	134	None	replace
729	[BUG]  [BUGGY]  NullValue  values  =  value.doubleValue();  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValue  values  =  value.doubleValue();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValue  values  =  value.doubleValue();	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	41	None	replace
730	[BUG]  [BUGGY]  Null  values  must  be  undefined;  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Null  values  must  be  undefined;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Null  values  must  be  undefined;	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	41	None	replace
731	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    	non-compiled	[CE]  	3	None	replace
732	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
733	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
734	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
735	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
736	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
737	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
738	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException( ")Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    new  IllegalArgumentException( ")Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
739	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	16	None	replace
740	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  indent);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  indent);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  	92	None	replace
741	[BUG]  [BUGGY]  Writer  out  =  getOutputFactory();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputFactory();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputFactory();	          Writer    out    =    getWriter();    	non-compiled	[CE]  	56	None	replace
742	[BUG]  [BUGGY]  Writer  out  =  getOutputPath();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputPath();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputPath();	          Writer    out    =    getWriter();    	non-compiled	[CE]  	56	None	replace
743	[BUG]  [BUGGY]  Math.sqrt(value,  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Math.sqrt(value,  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Math.sqrt(value,  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	110	None	replace
744	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Value.valueOf(value));  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Value.valueOf(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  Value.valueOf(value));  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	110	None	replace
745	[BUG]  [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	NullValues.writeNumber(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	122	None	replace
746	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toString(value));  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	122	None	replace
747	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Integer.toHexString(value));  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	122	None	replace
748	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Value.valueOf(value));  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Value.valueOf(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  Value.valueOf(value));  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	122	None	replace
749	[BUG]  [BUGGY]  JsonWriter  out  =  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  JsonWriter  out  =  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	JsonWriter  out  =  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value);	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	46	None	replace
750	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was ",  +  value);  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  undefined,  but  was ",  +  value);	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	46	None	replace
751	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  	non-compiled	[CE]  	84	None	add
752	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  	84	None	add
753	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
754	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was ",  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	121	None	replace
755	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  not  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  not  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  not  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
756	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Number  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Number  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Number  values  must  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
757	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	140	None	replace
758	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was. "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was. "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	140	None	replace
759	[BUG]  [BUGGY]  writeName();  out.append(Double.toString(value));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeName();  out.append(Double.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeName();  out.append(Double.toString(value));	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  not  a  statement	130	None	replace
760	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  	130	None	replace
761	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  not  a  statement	130	None	replace
762	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  out.append( ", ");  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  out.append( ", ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeDeferredName();  out.append(Double.toString(value));  }  else  {  out.append( ", ");  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  not  a  statement	130	None	replace
763	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Number  values  must  be  infinity,  but  was "  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Number  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Number  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	6	None	replace
764	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	6	None	replace
765	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  	64	None	add
766	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this.value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  this.value);	  new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  	94	None	replace
767	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  	94	None	replace
768	[BUG]  [BUGGY]  Number  values  must  be  non-empty,  but  was   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  non-empty,  but  was   "  +  value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
769	[BUG]  [BUGGY]  Iterator  <  Number>  it  =  values.iterator();  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Iterator  <  Number>  it  =  values.iterator();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Iterator  <  Number>  it  =  values.iterator();	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
770	[BUG]  [BUGGY]  MutableValueMap.put(value,  null);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueMap.put(value,  null);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueMap.put(value,  null);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
771	[BUG]  [BUGGY]  MutableValues.isNull(value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValues.isNull(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValues.isNull(value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	161	None	replace
772	[BUG]  [BUGGY]  aughtInitializationException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInitializationException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInitializationException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	65	None	replace
773	[BUG]  [BUGGY]  aughtException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	65	None	replace
774	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was:   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was:   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was:   "  +  value);	  	non-compiled	[CE]  not  a  statement	13	None	add
775	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was:   "  +  value);	  	non-compiled	[CE]  	13	None	add
776	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  Numeric  values  must  be  infinity,  but  was:   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was:   "  +  value);  Numeric  values  must  be  infinity,  but  was:   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    Numeric  values  must  be  infinity,  but  was:   "  +  value);	  	non-compiled	[CE]  	13	None	add
777	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  	32	None	replace
778	[BUG]  [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	111	None	replace
779	[BUG]  [BUGGY]  Number  values  must  be  undefined,  but  was   "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  undefined,  but  was   "  +  value);	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	111	None	replace
780	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined.  But  was "  +  value);  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined.  But  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined.  But  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	111	None	replace
781	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  	40	None	add
782	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
783	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value.toString());  [CE]  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value.toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this.value.toString());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value.toString());    	non-compiled	[CE]  	76	None	replace
784	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  Numeric  values  must  be  null,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	157	None	replace
785	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  }	  	non-compiled	[CE]  	66	None	add
786	[BUG]  [BUGGY]  aughtIfNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtIfNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtIfNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  	91	None	replace
787	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
788	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
789	[BUG]  [BUGGY]  aughtException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtException( "Numeric  values  must  be  zero,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  	91	None	replace
790	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  	49	None	replace
791	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  	49	None	replace
792	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  infinity,  but  was: "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was:   "    +    value);    	non-compiled	[CE]  	14	None	replace
793	[BUG]  [BUGGY]  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
794	[BUG]  [BUGGY]  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
795	[BUG]  [BUGGY]  MutableValueMap.put(value,  Double.toString(value));  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueMap.put(value,  Double.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueMap.put(value,  Double.toString(value));	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  	93	None	replace
796	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was ",  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was ",  value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  	93	None	replace
797	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    }    	non-compiled	[CE]  	93	None	replace
798	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	33	None	replace
799	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	33	None	replace
800	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	135	None	replace
801	[BUG]  [BUGGY]  Throwable  message( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwable  message( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwable  message( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  	38	None	replace
802	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	139	None	replace
803	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was. "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was. "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	139	None	replace
804	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  <identifier>  expected	77	None	add
805	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was ",  value);  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was ",  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
806	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  	non-compiled	[CE]  	73	None	add
807	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
808	[BUG]  [BUGGY]  MutableValueMap.put(value,  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueMap.put(value,  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueMap.put(value,  value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	115	None	replace
809	[BUG]  [BUGGY]  MutableValueMap.put(value,  new  Double(value));  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  MutableValueMap.put(value,  new  Double(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	MutableValueMap.put(value,  new  Double(value));	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	115	None	replace
810	[BUG]  [BUGGY]  aughtInvalidNullsException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidNullsException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidNullsException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	100	None	replace
811	[BUG]  [BUGGY]  aughtException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	100	None	replace
812	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	100	None	replace
813	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  numeric, "  +  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  numeric, "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  numeric, "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  	100	None	replace
814	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	16	None	replace
815	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toHexString(value));  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	16	None	replace
816	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  Integer.toString(value));  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	16	None	replace
817	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	16	None	replace
818	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  value);  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was ",  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
819	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was: "  +  value);  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was: "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
820	[BUG]  [BUGGY]  out.append(SerializeNulls.toString(value));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(SerializeNulls.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(SerializeNulls.toString(value));	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
821	[BUG]  [BUGGY]  out.append(Double.toPlainString(value));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toPlainString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toPlainString(value));	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
822	[BUG]  [BUGGY]  out.append(value);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(value);	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
823	[BUG]  [BUGGY]  out.append('n');  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append('n');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append('n');	          out.append(Double.toString(value));    	non-compiled	[CE]  	129	None	replace
824	[BUG]  [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
825	[BUG]  [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was. "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
826	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  	131	None	replace
827	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  out.append(Double.toString(value));  return  this;  }	          writeDeferredName();    out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  	131	None	replace
828	[BUG]  [BUGGY]  Writer  out  =  getOutputBuffer();  if(out!=  null)  {  out.append( "null ");  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputBuffer();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputBuffer();  if(out!=  null)  {  out.append( "null ");  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append(   "null   ");    }    	non-compiled	[CE]  	144	None	replace
829	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  Integer.toHexString(value));  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  Integer.toHexString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  Integer.toHexString(value));	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   ",    value);    	non-compiled	[CE]  	51	None	replace
830	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  indent);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  indent);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  indent);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   ",    value);    	non-compiled	[CE]  	51	None	replace
831	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  lenient);  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  lenient);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   ",  value,  lenient);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   ",    value);    	non-compiled	[CE]  	51	None	replace
832	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  Integer.toHexString(value),  value);  [CE]  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  Integer.toHexString(value),  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  Integer.toHexString(value),  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   ",    value);    	non-compiled	[CE]  	51	None	replace
833	[BUG]  [BUGGY]  ||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
834	[BUG]  [BUGGY]  ||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
835	[BUG]  [BUGGY]  out.append(this.separator);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(this.separator);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(this.separator);	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  	145	None	replace
836	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value).toString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value).toString());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value).toString());	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  	145	None	replace
837	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value  -  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value  -  1));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value  -  1));	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  	145	None	replace
838	[BUG]  [BUGGY]  Throwable  message( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwable  message( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwable  message( "Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	23	None	replace
839	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
840	[BUG]  [BUGGY]  ||(value!=  null  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
841	[BUG]  [BUGGY]  ||(value!=  null  &&  value.length()  >  0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  null  &&  value.length()  >  0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  null  &&  value.length()  >  0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
842	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
843	[BUG]  [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw    new    IllegalArgumentException(     "Numeric    values    must    be    infinite,    but    was     "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was     "  +  value);  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw        new        IllegalArgumentException(       "Numeric        values        must        be        infinite,        but        was       "        +        value);        throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
844	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
845	[BUG]  [BUGGY]  if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
846	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	67	None	replace
847	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	95	None	replace
848	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalStateException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalStateException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	95	None	replace
849	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  in  undefined,  but  was "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  in  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  in  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	95	None	replace
850	[BUG]  [BUGGY]  out.getLineno(),  value.getColumnsOfSecond());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.getLineno(),  value.getColumnsOfSecond());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.getLineno(),  value.getColumnsOfSecond());	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  	57	None	replace
851	[BUG]  [BUGGY]  out.append( "null ").append(size()).append('n');  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( "null ").append(size()).append('n');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( "null ").append(size()).append('n');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  	57	None	replace
852	[BUG]  [BUGGY]  out.getLineno(),  value.getColumnsOfStandard());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.getLineno(),  value.getColumnsOfStandard());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.getLineno(),  value.getColumnsOfStandard());	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  	57	None	replace
853	[BUG]  [BUGGY]  out.getLineno(),  value.getColumnsOfSeparator());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.getLineno(),  value.getColumnsOfSeparator());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.getLineno(),  value.getColumnsOfSeparator());	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  	57	None	replace
854	[BUG]  [BUGGY]  out.append( "null ").append(size()).append('_');  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( "null ").append(size()).append('_');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( "null ").append(size()).append('_');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString(    	non-compiled	[CE]  	57	None	replace
855	[BUG]  [BUGGY]  _throwUnquotedSpace( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _throwUnquotedSpace( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_throwUnquotedSpace( "Numeric  values  must  be  undefined,  but  was "  +  value);	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	46	None	replace
856	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was ",  value);  [CE]  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  undefined,  but  was ",  value);	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	46	None	replace
857	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [CE]  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  undefined,  but  was "  +  this.value);	  _reportError(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	46	None	replace
858	[BUG]  [BUGGY]  ||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
859	[BUG]  [BUGGY]  ||(value  <  0.0  ||  value  >  1.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  ||  value  >  1.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  ||  value  >  1.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
860	[BUG]  [BUGGY]  ||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was. "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was. "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
861	[BUG]  [BUGGY]  ||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]          NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
862	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  non-empty,  but  was   "  +  value);  }	  	non-compiled	[CE]  not  a  statement	71	None	add
863	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i).getLength());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i).getLength());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i).getLength());	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append(Double.toString    	non-compiled	[CE]  	60	None	replace
864	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  	81	None	add
865	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0.0)  {  throw  new  IllegalArgumentException(. "Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
866	[BUG]  [BUGGY]  Writer  out  =  getOutputBuffer();  if(out!=  null)  {  out.append('n');  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputBuffer();  if(out!=  null)  {  out.append('n');  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputBuffer();  if(out!=  null)  {  out.append('n');  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append('n');    }    	non-compiled	[CE]  	148	None	replace
867	[BUG]  [BUGGY]  Writer  out  =  getOutput();  if(out!=  null)  {  out.append('n');  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutput();  if(out!=  null)  {  out.append('n');  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutput();  if(out!=  null)  {  out.append('n');  }	  Writer    out    =    getWriter();    if(out!=    null)    {    out.append('n');    }    	non-compiled	[CE]  	148	None	replace
868	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was, "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was, "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was, "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	21	None	replace
869	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	34	None	replace
870	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  less  than  zero,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  less  than  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  less  than  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  	28	None	replace
871	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  	28	None	replace
872	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  0,  but  was   "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  0,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  0,  but  was   "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  	28	None	replace
873	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  negative,  but  was "  +  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  negative,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  negative,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  	28	None	replace
874	[BUG]  [BUGGY]  if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    zero,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Number    values    must    be    zero,    but    was       "    +    value);    	non-compiled	[CE]  	120	None	replace
875	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was     "  +  value);  }  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  	non-compiled	[CE]  	15	None	add
876	[BUG]  [BUGGY]  ||(value  <  0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0  &&  value.equals( "0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	136	None	replace
877	[BUG]  [BUGGY]  aughtException( "Numeric  values  must  be  null,  but  was "  +  value);  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtException( "Numeric  values  must  be  null,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	80	None	replace
878	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Thread.currentThread().interrupt();	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	80	None	replace
879	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  null,  but  was ",  value);  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  null,  but  was ",  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  null,  but  was ",  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	80	None	replace
880	[BUG]  [BUGGY]  Writer  out  =  getOutputFormat();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Writer  out  =  getOutputFormat();  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getOutputFormat();	          Writer    out    =    getWriter();    	non-compiled	[CE]  	56	None	replace
881	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  	155	None	replace
882	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  >=  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  	79	None	add
883	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was     "  +  value);  }  if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    if(value  <  0)  {  throw  new  IllegalArgumentException( ",Numeric  values  must  be  null,  but  was   "  +  value);  }	  	non-compiled	[CE]  	79	None	add
884	[BUG]  [BUGGY]  writeDeferredName(value);  out.append( "null ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeDeferredName(value);  out.append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeDeferredName(value);  out.append( "null ");	          writeDeferredName();    out.append(   "null   ");    	non-compiled	[CE]  	133	None	replace
885	[BUG]  [BUGGY]  writeFieldName();  out.append( "null ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  writeFieldName();  out.append( "null ");  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeFieldName();  out.append( "null ");	          writeDeferredName();    out.append(   "null   ");    	non-compiled	[CE]  	133	None	replace
886	[BUG]  [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	113	None	replace
887	[BUG]  [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  	113	None	replace
888	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this.value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    this.value);    	non-compiled	[CE]  	50	None	replace
889	[BUG]  [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  new  IllegalArgumentException(. "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    new  IllegalArgumentException(. "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  	48	None	add
890	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          writeDeferredName();    	non-compiled	[CE]  	54	None	replace
891	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  	118	None	replace
892	[BUG]  [BUGGY]  if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  	87	None	replace
893	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  writeNull();  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  writeNull();    out.append(   "null   ");    	non-compiled	[CE]  	147	None	replace
894	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  lenient);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  lenient);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  lenient);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  	61	None	replace
895	[BUG]  [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	140	None	replace
896	[BUG]  [BUGGY]  ||(value!=  0.0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value!=  0.0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value!=  0.0  &&  value.equals( "0.0 ")))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	140	None	replace
897	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0  ||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0  ||  value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    }    	non-compiled	[CE]  	158	None	replace
898	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    java.lang.IllegalArgumentException:    Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	127	None	replace
899	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0  ||  Double.isNaN(value))  {  writeDeferredName();  out.append(Double.toString(value));  }	          writeDeferredName();    out.append(Double.toString(value));    	non-compiled	[CE]  	130	None	replace
900	[BUG]  [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was ",  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinite,    but    was       "    +    value);    Throwables.IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  	86	None	replace
901	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  	4	None	replace
902	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was. "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  	4	None	replace
903	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    infinity,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    	non-compiled	[CE]  	4	None	replace
904	[BUG]  [BUGGY]  ||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  ||  value  >  0.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	82	None	replace
905	[BUG]  [BUGGY]  ||(value  <  0.0  ||  value  >  1.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<[[true    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||(value  <  0.0  ||  value  >  1.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||(value  <  0.0  ||  value  >  1.0))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was       "    +    value);    }    	non-compiled	[CE]  	82	None	replace
906	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalStateException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalStateException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  	8	None	replace
907	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  	non-compiled	[CE]  	53	None	add
908	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  	53	None	add
909	[BUG]  [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]          writeDeferredName();  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	                writeDeferredName();    if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  	non-compiled	[CE]  	53	None	add
910	[BUG]  [BUGGY]  ||  value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	112	None	replace
911	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtInvalidArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtInvalidArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	112	None	replace
912	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    throw    new    IllegalArgumentException(       "Numeric    values    must    be    null,    but    was       "    +    value);    	non-compiled	[CE]  	24	None	replace
913	[BUG]  [BUGGY]  if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    undefined,    but    was       "    +    value);    java.lang.IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was       "    +    value);    	non-compiled	[CE]  	97	None	replace
914	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	70	None	replace
915	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  VALUE_NULL);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  VALUE_NULL);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  VALUE_NULL);	  new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  	70	None	replace
916	[BUG]  [BUGGY]  if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  =  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
917	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	45	None	replace
918	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this.value);  [CE]  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this.value);	  new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  	83	None	replace
919	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this);  [CE]  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  this);	  new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  	83	None	replace
920	[BUG]  [BUGGY]  Number  values  must  be  null,  but  was   "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  null,  but  was   "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  null,  but  was   "  +  value);	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    }    	non-compiled	[CE]  	160	None	replace
921	[BUG]  [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
922	[BUG]  [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
923	[BUG]  [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value!=    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
924	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    this.value);    	non-compiled	[CE]  not  a  statement	141	None	replace
925	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	110	None	replace
926	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined.  But  was "  +  value);  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined.  But  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined.  But  was "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	110	None	replace
927	[BUG]  [BUGGY]  aughtException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  aughtException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	aughtException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  	41	None	replace
928	[BUG]  [BUGGY]  ||  value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  <  0  ||  value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
929	[BUG]  [BUGGY]  ||  value  <  0  ||  value  >  stackSize)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  ||  value  <  0  ||  value  >  stackSize)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	||  value  <  0  ||  value  >  stackSize)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
930	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	19	None	replace
931	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric, "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	19	None	replace
932	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was. "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    numeric,    but    was       "    +    value);    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    	non-compiled	[CE]  	19	None	replace
933	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    	non-compiled	[CE]  	3	None	replace
934	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  empty,  but  was "  +  value);  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  empty    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Numeric  values  must  be  empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    empty,    but    was   "    +    value);    	non-compiled	[CE]  	3	None	replace
935	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append(Double.toString(value));  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append(Double.toString(value));  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append(Double.toString(value));  }	          writeNull();    	non-compiled	[CE]  	52	None	replace
936	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append(Double.toString(value));  return  this;  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append(Double.toString(value));  return  this;  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append(Double.toString(value));  return  this;  }	          writeNull();    	non-compiled	[CE]  	52	None	replace
937	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append( ", ");  }	          writeNull();    	non-compiled	[CE]  	52	None	replace
938	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "n ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "n ");  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append( "n ");  }	          writeNull();    	non-compiled	[CE]  	52	None	replace
939	[BUG]  [BUGGY]  _reportError( "Can  not  serializeNulls  value: "+value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  _reportError( "Can  not  serializeNulls  value: "+value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Can  not  serializeNulls  value: "+value);	          writeNull();    	non-compiled	[CE]  	52	None	replace
940	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.safeNegate(value));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.safeNegate(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  ValueUtils.safeNegate(value));	  new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  	43	None	replace
941	[BUG]  [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNulls(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }	  if(value    ==    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  	99	None	replace
942	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().getName())  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  [FE]    NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Thread.currentThread().getContextClass().getName())  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Thread.currentThread().getContextClass().getName())  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	72	None	replace
943	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  [FE]      NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Thread.currentThread().getContextClassLoader().reportError( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	72	None	replace
944	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().getName())  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  [FE]        NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Thread.currentThread().getContextClass().getName())  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Thread.currentThread().getContextClass().getName())  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	72	None	replace
945	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Number  values  must  be  non-empty,  but  was "  +  value);  [CE]  [FE]          NoSuchMethodError    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Number  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Thread.currentThread().getContextClassLoader().reportError( "Number  values  must  be  non-empty,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    }    	non-compiled	[CE]  	72	None	replace
946	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
947	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  this.value);  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  this.value);	  Throwables.throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was       "    +    value);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
948	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  [CE]  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was: "  +  value);	  new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  	164	None	replace
949	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  this.value);  [CE]  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  this.value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  this.value);	  new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  	164	None	replace
950	[BUG]  [BUGGY]  Number  values  must  be  infinity,  but  was   "  +  value;  [CE]  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Number  values  must  be  infinity,  but  was   "  +  value;  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Number  values  must  be  infinity,  but  was   "  +  value;	  if(value    >    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was       "    +    value);    }    	non-compiled	[CE]  	138	None	replace
951	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    }    if(value  >=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  }	  	non-compiled	[CE]  	44	None	add
952	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(i),  value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(i),  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(i),  value);	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('-');    }    	non-compiled	[CE]  	59	None	replace
953	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value.length()  -  1));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value.length()  -  1));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value.length()  -  1));	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('-');    }    	non-compiled	[CE]  not  a  statement	59	None	replace
954	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value.length()  -  1)!=  '/');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value.length()  -  1)!=  '/');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value.length()  -  1)!=  '/');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  not  a  statement	58	None	replace
955	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value.length()  -  1)  ==  '/');  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value.length()  -  1)  ==  '/');  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append( ".s.IFJDCS ".charAt(value.length()  -  1)  ==  '/');	          if(value    <    0)    {    out.append(   "null   ");    }    else    {    int[]    stack    =    new    int[size()    ];    for(int    i    =    0;    i    <    stack.length;    ++i)    {    out.append('/');    }    	non-compiled	[CE]  not  a  statement	58	None	replace
956	[BUG]  [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  }  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  }  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	allowNull(value)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  }	  if(value    <    0.0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was       "    +    value);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
957	[BUG]  [BUGGY]  int[]  newStack  =  stack.stack.getStackSize();  out.append(newStack[newStack.size()  ]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  stack.stack.getStackSize();  out.append(newStack[newStack.size()  ]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  stack.stack.getStackSize();  out.append(newStack[newStack.size()  ]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	55	None	replace
958	[BUG]  [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[this.topOfStack.size()  ]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  int[]  newStack  =  stack.getStackSize();  out.append(newStack[this.topOfStack.size()  ]);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	int[]  newStack  =  stack.getStackSize();  out.append(newStack[this.topOfStack.size()  ]);	          int[]    newStack    =    stack.getStackSize();    out.append(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	55	None	replace
959	[BUG]  [BUGGY]  out.append(Double.toBooleanCase(value));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  out.append(Double.toBooleanCase(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	out.append(Double.toBooleanCase(value));	          out.append(Double.toString(value));    return    this;    	non-compiled	[CE]  not  a  statement	132	None	replace
960	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was ",  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    new    IllegalArgumentException(       "Numeric    values    must    be    initialized,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	107	None	replace
961	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  asPath());  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  asPath());  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  asPath());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    this);    	non-compiled	[CE]  not  a  statement	163	None	replace
962	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.toString(value));  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.toString(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.toString(value));	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	162	None	replace
963	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.safeNegate(value));	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	162	None	replace
964	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.stringValue(value));  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.stringValue(value));  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  ValueUtils.stringValue(value));	  Throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	162	None	replace
965	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  unempty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	37	None	replace
966	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  in  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {      [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  in  non-empty,  but  was "  +  value);  [BUGGY]      }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  in  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(       "Numeric    values    must    be    non-empty,    but    was       "    +    value);    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was       "    +    value);    	non-compiled	[CE]  not  a  statement	37	None	replace
