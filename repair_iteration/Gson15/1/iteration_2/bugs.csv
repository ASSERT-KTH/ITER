bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
2	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  empty  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  empty  	10	1	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  empty  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  empty  	10	1	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  unreachable  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  unreachable  statement	11	None	add
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  cannot  find  symbol  Throwables  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	11	None	add
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	11	None	add
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  unreachable  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  unreachable  statement	13	None	add
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  cannot  find  symbol  Throwables  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	13	None	add
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	13	None	add
12	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  	12	1	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was: "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  	12	1	replace
15	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  	12	2	replace
16	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  	12	2	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
18	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [FE]  AssertionFailedError  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  unreachable  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  unreachable  statement	1	None	add
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	1	None	add
21	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  cannot  find  symbol  Throwables  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	1	None	add
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
23	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
24	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  unreachable  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  unreachable  statement	7	None	add
25	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  cannot  find  symbol  Throwables  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	add
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	7	None	add
28	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  unreachable  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  	non-compiled	[CE]  unreachable  statement	5	None	add
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  cannot  find  symbol  Throwables  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	5	None	add
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
31	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	5	None	add
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
33	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  unreachable  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  unreachable  statement	3	None	add
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	3	None	add
35	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  cannot  find  symbol  Throwables  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	3	None	add
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  unreachable  statement  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  unreachable  statement	3	None	add
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  cannot  find  symbol  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
39	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
40	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  	18	2	replace
41	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  	18	2	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
43	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
44	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  	18	2	replace
45	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  	18	2	replace
46	[BUG]  [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value);  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  _reportError( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	_reportError( "Numeric  values  must  be  undefined,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
47	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
49	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this.value);  [CE]  cannot  find  symbol  value  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this.value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,double)  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was ",  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,double)	2	None	replace
52	[BUG]  [BUGGY]      writeNull();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      writeNull();  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        writeNull();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
53	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [FE]      AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      writeDeferredName();  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	        writeDeferredName();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  	15	1	add
54	[BUG]  [BUGGY]      writeDeferredName();  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [FE]      AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      writeDeferredName();  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        writeDeferredName();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  	15	1	add
55	[BUG]  [BUGGY]      int[]  newStack  =  stack.getStackSize();  out.append(newStack[newStack.size()  ]);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      int[]  newStack  =  stack.getStackSize();  out.append(newStack[newStack.size()  ]);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        int[]  newStack  =  stack.getStackSize();  out.append(newStack[newStack.size()  ]);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
56	[BUG]  [BUGGY]      Writer  out  =  getWriter();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      Writer  out  =  getWriter();  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        Writer  out  =  getWriter();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
57	[BUG]  [BUGGY]      if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString(  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString(	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
58	[BUG]  [BUGGY]      if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append('/');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append('/');  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append('/');  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
59	[BUG]  [BUGGY]      if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append('-');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append('-');  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append('-');  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
60	[BUG]  [BUGGY]      if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        if(value  <  0)  {  out.append( "null ");  }  else  {  int[]  stack  =  new  int[size()  ];  for(int  i  =  0;  i  <  stack.length;  ++i)  {  out.append(Double.toString	  	non-compiled	[CE]  	15	None	add
61	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
63	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
64	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  	14	2	replace
65	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  	14	2	replace
66	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  	14	2	replace
67	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  	14	2	replace
68	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
70	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
71	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	compilable	  [FE]  NoSuchMethodError  	4	2	replace
72	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [FE]  NoSuchMethodError  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	compilable	  [FE]  NoSuchMethodError  	4	2	replace
73	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	compilable	  [FE]  NoSuchMethodError  	4	2	replace
74	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [FE]  NoSuchMethodError  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	compilable	  [FE]  NoSuchMethodError  	4	2	replace
75	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	compilable	  [FE]  NoSuchMethodError  	4	2	replace
76	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [FE]  NoSuchMethodError  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value.toString());	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	compilable	  [FE]  NoSuchMethodError  	4	2	replace
77	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  	8	9	replace
78	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  	8	9	replace
79	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  	8	9	replace
80	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  	8	9	replace
81	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  	8	9	replace
82	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  	8	9	replace
83	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [CE]  cannot  find  symbol  Level  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  cannot  find  symbol  Level	8	None	replace
84	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  	9	9	add
85	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<[[true  	9	9	add
86	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  cannot  find  symbol  buffer  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  buffer	9	None	add
87	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  cannot  find  symbol  buffer  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  buffer	9	None	add
88	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  cannot  find  symbol  buffer  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  cannot  find  symbol  buffer	9	None	add
89	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  orphaned  case  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  orphaned  case	9	None	add
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  orphaned  case  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  orphaned  case	9	None	add
91	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  orphaned  case  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  orphaned  case	6	None	replace
92	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  orphaned  case  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throwables.throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  orphaned  case	6	None	replace
93	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  orphaned  case  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  orphaned  case	6	None	replace
94	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  case,  default,  or  '}'  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  case,  default,  or  '}'  expected	6	None	replace
95	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  case,  default,  or  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  case,  default,  or  	17	None	add
96	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  case,  default,  or  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    Throwables.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  case,  default,  or  	17	None	add
97	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  case,  default,  or  '}'  expected  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  java.lang.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    java.lang.IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	17	None	add
98	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  case,  default,  or  '}'  expected  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    Throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	17	None	add
99	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  case,  default,  or  '}'  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  case,  default,  or  '}'  expected	6	None	replace
100	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  case,  default,  or  '}'  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
101	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  case,  default,  or  '}'  expected  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
102	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  case,  default,  or  '}'  expected  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
103	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  case,  default,  or  '}'  expected  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  case,  default,  or  '}'  expected	8	None	replace
104	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  illegal  start  of  type  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
105	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  type	13	None	add
106	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  initialized,  but  was   "  +  value);  [CE]  illegal  start  of  type  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Number  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  type	13	None	add
107	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  type	13	None	add
108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
109	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  null,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Number  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	7	None	add
110	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	18	None	replace
111	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	18	None	replace
112	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	18	None	replace
113	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	10	None	replace
114	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	10	None	replace
115	[BUG]  [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	10	None	replace
116	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	10	None	replace
117	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	11	None	add
118	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	11	None	add
119	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  zero,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	5	None	add
120	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  zero,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  zero,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  zero,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Number  values  must  be  zero,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	5	None	add
121	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	4	None	replace
122	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	4	None	replace
123	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  infinite,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Number  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	9	None	add
124	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite	  	non-compiled	[CE]  not  a  statement	9	None	add
125	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite,  but  was   "  +  value);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	9	None	add
126	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinite,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	9	None	add
127	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	17	None	add
128	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  undefined,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Number  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	17	None	add
129	[BUG]  [BUGGY]      out.append(Double.toString(value));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      out.append(Double.toString(value));  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        out.append(Double.toString(value));	  	non-compiled	[CE]  not  a  statement	15	None	add
130	[BUG]  [BUGGY]      writeDeferredName();  out.append(Double.toString(value));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      writeDeferredName();  out.append(Double.toString(value));  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        writeDeferredName();  out.append(Double.toString(value));	  	non-compiled	[CE]  not  a  statement	15	None	add
131	[BUG]  [BUGGY]      writeDeferredName();  out.append(Double.toString(value));  return  this;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      writeDeferredName();  out.append(Double.toString(value));  return  this;  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        writeDeferredName();  out.append(Double.toString(value));  return  this;	  	non-compiled	[CE]  not  a  statement	15	None	add
132	[BUG]  [BUGGY]      out.append(Double.toString(value));  return  this;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      out.append(Double.toString(value));  return  this;  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        out.append(Double.toString(value));  return  this;	  	non-compiled	[CE]  not  a  statement	15	None	add
133	[BUG]  [BUGGY]      writeDeferredName();  out.append( "null ");  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]      writeDeferredName();  out.append( "null ");  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	        writeDeferredName();  out.append( "null ");	  	non-compiled	[CE]  not  a  statement	15	None	add
134	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	1	None	add
135	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  numeric,  but  was   "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  java.lang.IllegalArgumentException:  Number  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    java.lang.IllegalArgumentException:  Number  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	1	None	add
136	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	12	None	replace
137	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	12	None	replace
138	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	12	None	replace
139	[BUG]  [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  ==  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	14	None	replace
140	[BUG]  [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value!=  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	14	None	replace
141	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	12	None	replace
142	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	18	None	replace
143	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  this.value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	18	None	replace
144	[BUG]  [BUGGY]  Writer  out  =  getWriter();  if(out!=  null)  {  out.append( "null ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Writer  out  =  getWriter();  if(out!=  null)  {  out.append( "null ");  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getWriter();  if(out!=  null)  {  out.append( "null ");  }	      	non-compiled	[CE]  not  a  statement	16	None	replace
145	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append( "null ");  }	      	non-compiled	[CE]  not  a  statement	16	None	replace
146	[BUG]  [BUGGY]  Writer  out  =  getWriter();  if(out!=  null)  {  out.append( ", ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Writer  out  =  getWriter();  if(out!=  null)  {  out.append( ", ");  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getWriter();  if(out!=  null)  {  out.append( ", ");  }	      	non-compiled	[CE]  not  a  statement	16	None	replace
147	[BUG]  [BUGGY]  writeNull();  out.append( "null ");  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  writeNull();  out.append( "null ");  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	writeNull();  out.append( "null ");	      	non-compiled	[CE]  not  a  statement	16	None	replace
148	[BUG]  [BUGGY]  Writer  out  =  getWriter();  if(out!=  null)  {  out.append('n');  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Writer  out  =  getWriter();  if(out!=  null)  {  out.append('n');  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Writer  out  =  getWriter();  if(out!=  null)  {  out.append('n');  }	      	non-compiled	[CE]  not  a  statement	16	None	replace
149	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	17	None	add
150	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  Numeric  values  must  be  undefined,  but  was   "  +  value);  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  undefined,  but  was   "  +  value);  Numeric  values  must  be  undefined,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    undefined,    but    was   "    +    value);    Numeric  values  must  be  undefined,  but  was   "  +  value);	  	non-compiled	[CE]  	17	None	add
151	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    IllegalArgumentException(   "Numeric  values  must  be  initialized,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	13	None	add
152	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  numeric,  but  was   "  +  value);  Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    numeric,    but    was   "    +    value);    Numeric  values  must  be  numeric,  but  was   "  +  value);	  	non-compiled	[CE]  	1	None	add
153	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  zero    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	6	None	replace
154	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  not  a  statement	11	None	add
155	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  Numeric  values  must  be  infinity,  but  was   "  +  value);  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  infinity,  but  was   "  +  value);  Numeric  values  must  be  infinity,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinity,    but    was   "    +    value);    Numeric  values  must  be  infinity,  but  was   "  +  value);	  	non-compiled	[CE]  	11	None	add
156	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  	7	None	add
157	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Numeric  values  must  be  null,  but  was   "  +  value);  [CE]  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  null,  but  was   "  +  value);  Numeric  values  must  be  null,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    Numeric  values  must  be  null,  but  was   "  +  value);	  	non-compiled	[CE]  	7	None	add
158	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    initialized,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	14	None	replace
159	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  Numeric  values  must  be  non-empty,  but  was   "  +  value);  [CE]  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Numeric  values  must  be  non-empty,  but  was   "  +  value);  Numeric  values  must  be  non-empty,  but  was   "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    Numeric  values  must  be  non-empty,  but  was   "  +  value);	  	non-compiled	[CE]  	3	None	add
160	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  null    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    null,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	8	None	replace
161	[BUG]  [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	if(value  >  0.0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	4	None	replace
162	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	Throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	4	None	replace
163	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  this);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    non-empty,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	4	None	replace
164	[BUG]  [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite    [CONTEXT]    public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {    [BUGGY]  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [BUGGY]    }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);	  throw    new    IllegalArgumentException(   "Numeric    values    must    be    infinite,    but    was   "    +    value);    	non-compiled	[CE]  not  a  statement	10	None	replace
