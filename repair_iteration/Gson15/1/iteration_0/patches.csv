bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric  	1	1	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  numeric  	1	1	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty  	1	1	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  non-empty  	1	1	replace
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero  	1	1	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  zero  	1	1	replace
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  null  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  null  	1	1	replace
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  null  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  null  	1	1	replace
9	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite  	1	1	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinite  	1	1	replace
11	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  	1	1	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  infinity  	1	1	replace
13	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  	1	1	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  initialized,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  initialized  	1	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]    [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	  	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  AssertionFailedError  	1	1	replace
16	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]    [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	  	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  AssertionFailedError  	1	1	replace
17	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	add	throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  	1	1	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  writeDeferredName();  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);  [BUGGY]  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.7071067811865475	496	496	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  undefined,  but  was "  +  value);	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  	compilable	  [FE]  java.lang.IllegalArgumentException:  Numeric  values  must  be  undefined  	1	1	replace
