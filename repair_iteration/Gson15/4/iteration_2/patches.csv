bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  readNull();  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  readNull();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	readNull();	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
2	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  value);	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
3	[BUG]  [BUGGY]  Writer  out  =  this.serializeNulls(value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.serializeNulls(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.serializeNulls(value);	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
4	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  this);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  this);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  StringReader(value),  this);	  Writer    out    =    new    JsonWriter(new    StringReader(value));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
5	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  true);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  true);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  StringReader(value),  true);	  Writer    out    =    new    JsonWriter(new    StringReader(value));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
6	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  this.serializeNulls);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  this.serializeNulls);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  StringReader(value),  this.serializeNulls);	  Writer    out    =    new    JsonWriter(new    StringReader(value));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
7	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  DEFAULT_NUMBER_ERROR);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  DEFAULT_NUMBER_ERROR);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  StringReader(value),  DEFAULT_NUMBER_ERROR);	  Writer    out    =    new    JsonWriter(new    StringReader(value));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
8	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value)).getWriter();  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value)).getWriter();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  StringReader(value)).getWriter();	  Writer    out    =    new    JsonWriter(new    StringReader(value));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
9	[BUG]  [BUGGY]  out.append( "NaN  values  must  be  infinite,  but  was ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "NaN  values  must  be  infinite,  but  was ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "NaN  values  must  be  infinite,  but  was ");	  out.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
10	[BUG]  [BUGGY]  out.append( "NaN  values  must  be  infinite,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "NaN  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "NaN  values  must  be  infinite,  but  was   "  +  value);	  out.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
11	[BUG]  [BUGGY]  out.append( "NaN  values  must  be  finite,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "NaN  values  must  be  finite,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "NaN  values  must  be  finite,  but  was   "  +  value);	  out.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
12	[BUG]  [BUGGY]  while(value  <  =  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  =  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  =  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  while(value  <  0)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeNull();  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  while(value  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  while(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  while(value  <  =  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  =  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  =  0)  {  writeDeferredName();  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  while(value  <  0)  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append('n');  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  aughtException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  aughtException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	aughtException( "Numeric  values  must  be  zero,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
20	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
21	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
22	[BUG]  [BUGGY]  while(value  <  0)  {  out.append( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append( "Numeric  values  must  be  zero,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
23	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
24	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
25	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
26	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was: "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was: "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was: "  +  value);  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
27	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".toString());  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".toString());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".toString());	  if(value    <    0)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
28	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value));  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".charAt(value));	  if(value    <    0)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
29	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".getBytes());  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".getBytes());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".getBytes());	  if(value    <    0)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
30	[BUG]  [BUGGY]  while(value  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  >  0)  {  writeDeferredName();  }	  while(value    <    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  while(value  >=  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  >=  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  >=  0)  {  writeDeferredName();  }	  while(value    <    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  while(value  <  1)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  1)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  1)  {  writeDeferredName();  }	  while(value    <    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  while(value  <  0)  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append( "n ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append( "n ");  }	  while(value    <    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  while(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
35	[BUG]  [BUGGY]  while(value  <  0.0)  {  writeNull();  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0.0)  {  writeNull();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0.0)  {  writeNull();	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
36	[BUG]  [BUGGY]  while(value  <  0.0)  {  out.append(value);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0.0)  {  out.append(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0.0)  {  out.append(value);	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
37	[BUG]  [BUGGY]  while(value  <  0.0)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0.0)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0.0)  {  writeNull();  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
38	[BUG]  [BUGGY]  while(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
39	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "native   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "native   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "native  value ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "native  value ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "native  value ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "native   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  out.append( "no-serializeNulls ");  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "no-serializeNulls ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "no-serializeNulls ");	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
43	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.serializeNulls);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.serializeNulls);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.serializeNulls);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
44	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  this.value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  this.value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  this.value);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
45	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  this.serializeNulls,  value);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  this.serializeNulls,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  this.serializeNulls,  value);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
46	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.openBracket);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.openBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.openBracket);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
47	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  true);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  true);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  true);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
48	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.serializeBracket);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.serializeBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.serializeBracket);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
49	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.deferredName);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.deferredName);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.deferredName);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
50	[BUG]  [BUGGY]  if(value  <  0  ||  value  ==  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  ==  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  ==  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_DEFENSION)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
51	[BUG]  [BUGGY]  if(value  <  0  ||  value  >=  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >=  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >=  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_DEFENSION)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
52	[BUG]  [BUGGY]  if(value  <  0  ||  value!=  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value!=  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value!=  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_DEFENSION)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
53	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    SHORT_DEFENSION)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
54	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_DEFENSION)  {  writeDeferredName();  }  else  {  out.append( "n ");  }	  if(value    <    0    ||    value    >    SHORT_DEFENSION)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
55	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_DEFENSION)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
56	[BUG]  [BUGGY]  out.append( "no  value ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "no  value ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "no  value ");	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "no    value   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "no  value ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "no  value ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "no  value ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "no    value   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
58	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "no  value. ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "no  value. ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "no  value. ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "no    value   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  validateNotNull(value);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNotNull(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNotNull(value);	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
60	[BUG]  [BUGGY]  validateNull(value,  out);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNull(value,  out);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNull(value,  out);	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
61	[BUG]  [BUGGY]  validateEmpty(value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateEmpty(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateEmpty(value);	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
62	[BUG]  [BUGGY]  validateNumberValue(value);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumberValue(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumberValue(value);	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
63	[BUG]  [BUGGY]  validateNumber(value);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumber(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumber(value);	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
64	[BUG]  [BUGGY]  validateNumeric(value);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumeric(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumeric(value);	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
65	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ".doubleValue());  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
66	[BUG]  [BUGGY]  out.append(Double.toString(value));  return  this;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(Double.toString(value));  return  this;  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(Double.toString(value));  return  this;	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
67	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ".toString());  }  else  {  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ".toString());  }  else  {  out.append(Double.toString(value));  return  this;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " ".toString());  }  else  {  out.append(Double.toString(value));  return  this;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
68	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  else  {  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  else  {  out.append(Double.toString(value));  return  this;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  else  {  out.append(Double.toString(value));  return  this;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
69	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
70	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
71	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
72	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
73	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
74	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Null  values  must  be  finite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Null  values  must  be  finite,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Null  values  must  be  finite,  but  was "  +  value);  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
75	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
76	[BUG]  [BUGGY]  out.append( ",n ");  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ",n ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ",n ");	  if(values!=    null)    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
77	[BUG]  [BUGGY]  while(value  <  0)  {  out.append( ", ");  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append( ", ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append( ", ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(value);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
78	[BUG]  [BUGGY]  while(value  <  0)  {  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(value);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
79	[BUG]  [BUGGY]  aughtException( "Negative  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  aughtException( "Negative  values  must  be  zero,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	aughtException( "Negative  values  must  be  zero,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
80	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
81	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
82	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was. "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was. "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was. "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
83	[BUG]  [BUGGY]  writeNull();  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  writeNull();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	writeNull();	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
84	[BUG]  [BUGGY]  Writer  out  =  this.values.getWriter();  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.getWriter();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.getWriter();	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
85	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( "n ");  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( "n ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize)  {  out.append( "n ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(getName());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
86	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( ", ");  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( ", ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize)  {  out.append( ", ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(getName());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
87	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize.length)  {  out.append( "n ");  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize.length)  {  out.append( "n ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize.length)  {  out.append( "n ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(getName());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
88	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(getName());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
89	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize.length)  {  out.append( ", ");  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize.length)  {  out.append( ", ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize.length)  {  out.append( ", ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(getName());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
90	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  value.doubleValue());  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  value.doubleValue());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  value.doubleValue());	  if(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
91	[BUG]  [BUGGY]  out.write('n');  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.write('n');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.write('n');	  out.append('n');    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
92	[BUG]  [BUGGY]  reader.write(value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(value);	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
93	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  NumberReader(value));  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  NumberReader(value));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  NumberReader(value));	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
94	[BUG]  [BUGGY]  out.append(',');  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(',');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(',');	  out.append(   ",   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
95	[BUG]  [BUGGY]  out.append(this.closeBracket);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.closeBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.closeBracket);	  out.append(this.deferredName);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
96	[BUG]  [BUGGY]  out.append(this.deferredName,  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.deferredName,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.deferredName,  value);	  out.append(this.deferredName);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
97	[BUG]  [BUGGY]  out.append(this.deferredName).append( "n ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.deferredName).append( "n ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.deferredName).append( "n ");	  out.append(this.deferredName);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
98	[BUG]  [BUGGY]  out.append(this.deferredName).append('n');  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.deferredName).append('n');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.deferredName).append('n');	  out.append(this.deferredName);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
99	[BUG]  [BUGGY]  out.append(this.deferredName).append( ", ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.deferredName).append( ", ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.deferredName).append( ", ");	  out.append(this.deferredName);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
100	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
101	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
102	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ". ".toString());  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ". ".toString());  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ". ".toString());  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
103	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "[IFJDCS] ".toString());  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "[IFJDCS] ".toString());  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "[IFJDCS] ".toString());  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
104	[BUG]  [BUGGY]  Writer  out  =(this.values!=  null)?  this.values.get(0):  this.values.get(0);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =(this.values!=  null)?  this.values.get(0):  this.values.get(0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =(this.values!=  null)?  this.values.get(0):  this.values.get(0);	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
105	[BUG]  [BUGGY]  Writer  out  =  this.values.iterator().next();  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.iterator().next();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.iterator().next();	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
106	[BUG]  [BUGGY]  Writer  out  =(this.values!=  null)?  this.values.get(0):  this.values.get(1);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =(this.values!=  null)?  this.values.get(0):  this.values.get(1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =(this.values!=  null)?  this.values.get(0):  this.values.get(1);	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
107	[BUG]  [BUGGY]  Writer  out  =(this.values!=  null)?  this.values.get(1):  this.values.get(0);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =(this.values!=  null)?  this.values.get(1):  this.values.get(0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =(this.values!=  null)?  this.values.get(1):  this.values.get(0);	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
108	[BUG]  [BUGGY]  Writer  out  =(this.values!=  null)?  this.values.get(1):  this.values.get(1);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =(this.values!=  null)?  this.values.get(1):  this.values.get(1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =(this.values!=  null)?  this.values.get(1):  this.values.get(1);	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
109	[BUG]  [BUGGY]  out.append(this.separator  +  value);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator  +  value);	  out.append(this.separator);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
110	[BUG]  [BUGGY]  out.append(this.separator).append( "n ");  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append( "n ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append( "n ");	  out.append(this.separator);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
111	[BUG]  [BUGGY]  out.append(this.separator).append('n');  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append('n');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append('n');	  out.append(this.separator);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
112	[BUG]  [BUGGY]  out.append(this.separator).append( ", ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append( ", ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append( ", ");	  out.append(this.separator);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
113	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
114	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
115	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was: "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was: "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was: "  +  value);  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
116	[BUG]  [BUGGY]  out.append( "NaN ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "NaN ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "NaN ");	  out.append(   "naN   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
117	[BUG]  [BUGGY]  out.append( "NaN  value: ");  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "NaN  value: ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "NaN  value: ");	  out.append(   "naN   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
118	[BUG]  [BUGGY]  out.append( "NaN: ");  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "NaN: ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "NaN: ");	  out.append(   "naN   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
119	[BUG]  [BUGGY]  out.append( ".serializeNulls ");  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".serializeNulls ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".serializeNulls ");	  out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
120	[BUG]  [BUGGY]  out.append( "null ",  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "null ",  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "null ",  value);	  out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
121	[BUG]  [BUGGY]  out.write( "null ");  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.write( "null ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.write( "null ");	  out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
122	[BUG]  [BUGGY]  out.append( "Null ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "Null ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "Null ");	  out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
123	[BUG]  [BUGGY]  Writer  out  =  this.values.get(value  -  1);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(value  -  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(value  -  1);	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
124	[BUG]  [BUGGY]  Writer  out  =  this.values.get(value  +  1);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(value  +  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(value  +  1);	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
125	[BUG]  [BUGGY]  Writer  out  =  this.values.get(value,  null);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(value,  null);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(value,  null);	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
126	[BUG]  [BUGGY]  Writer  out  =  this.values.get(value)+  1;  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(value)+  1;  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(value)+  1;	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
127	[BUG]  [BUGGY]  Writer  out  =  this.values.get(value,  true);  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(value,  true);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(value,  true);	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
128	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  value);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getName(),  value);	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
129	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getSimpleName());  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getSimpleName());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getSimpleName());	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
130	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  values);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getName(),  values);	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
131	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getRawClass());  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getRawClass());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getRawClass());	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
132	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  true);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  true);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getName(),  true);	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
133	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getReturnType());  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getReturnType());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getReturnType());	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
134	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
135	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  values);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  values);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
136	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  this);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  this);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  this);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
137	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  true);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  true);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  true);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
138	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  stack);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  stack);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  stack);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
139	[BUG]  [BUGGY]  out.append(this.serializeNulls);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.serializeNulls);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.serializeNulls);	  out.append(value);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
140	[BUG]  [BUGGY]  out.append(Double.toString(value));  return  null;  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(Double.toString(value));  return  null;  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(Double.toString(value));  return  null;	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
141	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  else  {  out.append(Double.toString(value));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  else  {  out.append(Double.toString(value));  return  null;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  else  {  out.append(Double.toString(value));  return  null;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
142	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ".toString());  }  else  {  out.append(Double.toString(value));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ".toString());  }  else  {  out.append(Double.toString(value));  return  null;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " ".toString());  }  else  {  out.append(Double.toString(value));  return  null;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
143	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  value,  HTML_SAFE_REPLACEMENT_CHARS);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  value,  HTML_SAFE_REPLACEMENT_CHARS);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  value,  HTML_SAFE_REPLACEMENT_CHARS);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS,    value);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
144	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  stack,  HTML_SAFE_REPLACEMENT_CHARS);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  stack,  HTML_SAFE_REPLACEMENT_CHARS);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  stack,  HTML_SAFE_REPLACEMENT_CHARS);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS,    value);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
145	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value  +  1);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value  +  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value  +  1);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS,    value);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
146	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  this,  HTML_SAFE_REPLACEMENT_CHARS,  value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  this,  HTML_SAFE_REPLACEMENT_CHARS,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  this,  HTML_SAFE_REPLACEMENT_CHARS,  value);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS,    value);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
147	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value  -  1);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value  -  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  value  -  1);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS,    value);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
148	[BUG]  [BUGGY]  writeFieldName();  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  writeFieldName();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	writeFieldName();	  if(value    >    0.0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
149	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeNull();  }	  if(value    <    0.0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
150	[BUG]  [BUGGY]  if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
151	[BUG]  [BUGGY]  if(value  <  0  ||  value  ==  stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  ==  stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  ==  stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
152	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
153	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
154	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
155	[BUG]  [BUGGY]  if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
156	[BUG]  [BUGGY]  out.append( "' ").append(value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "' ").append(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "' ").append(value);	  out.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
157	[BUG]  [BUGGY]  out.write( "' ");  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.write( "' ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.write( "' ");	  out.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
158	[BUG]  [BUGGY]  out.append( "',' ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "',' ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "',' ");	  out.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
159	[BUG]  [BUGGY]  out.append( "';n ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "';n ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "';n ");	  out.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
160	[BUG]  [BUGGY]  out.append( "': ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "': ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "': ");	  out.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
161	[BUG]  [BUGGY]  validateNull(values,  out);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNull(values,  out);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNull(values,  out);	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
162	[BUG]  [BUGGY]  validateNumberValues(values);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumberValues(values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumberValues(values);	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
163	[BUG]  [BUGGY]  validateNotNull(values);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNotNull(values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNotNull(values);	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
164	[BUG]  [BUGGY]  validateNull(values,  true);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNull(values,  true);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNull(values,  true);	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
165	[BUG]  [BUGGY]  validateEmpty(values);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateEmpty(values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateEmpty(values);	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
166	[BUG]  [BUGGY]  validateNull(values,  null);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNull(values,  null);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNull(values,  null);	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
167	[BUG]  [BUGGY]  out.append( "native  value ");  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "native  value ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "native  value ");	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
168	[BUG]  [BUGGY]  out.append( "Native  values  must  be  infinite,  but  was ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "Native  values  must  be  infinite,  but  was ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "Native  values  must  be  infinite,  but  was ");	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
169	[BUG]  [BUGGY]  out.append( "native  value: ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "native  value: ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "native  value: ");	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
170	[BUG]  [BUGGY]  out.append( "Native  values  must  be  finite,  but  was ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "Native  values  must  be  finite,  but  was ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "Native  values  must  be  finite,  but  was ");	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
171	[BUG]  [BUGGY]  out.append( "Native  values  must  be  finite,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "Native  values  must  be  finite,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "Native  values  must  be  finite,  but  was   "  +  value);	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
172	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize)  {  writeNull();  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
173	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  writeNull();  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize)  {  writeNull();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize)  {  writeNull();	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
174	[BUG]  [BUGGY]  while(value  <  0)  {  writeNull();  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeNull();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeNull();	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
175	[BUG]  [BUGGY]  while(value  <  0)  {  out.append('n');  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append('n');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append('n');	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
176	[BUG]  [BUGGY]  if(value  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  writeDeferredName();  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
177	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeNull();  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
178	[BUG]  [BUGGY]  while(value  <  =  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  =  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  =  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
179	[BUG]  [BUGGY]  while(value  <  0)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append( "null ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
180	[BUG]  [BUGGY]  while(value  >  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  >  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  >  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
181	[BUG]  [BUGGY]  while(value  >=  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  >=  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  >=  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
182	[BUG]  [BUGGY]  Writer  out  =(Writer)this.stack.peek();  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =(Writer)this.stack.peek();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =(Writer)this.stack.peek();	  if(value    >    0.0)    {    writeString();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
183	[BUG]  [BUGGY]  writeString();  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  writeString();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	writeString();	  if(value    >    0.0)    {    writeString();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
184	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  StringWriter(value));  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  StringWriter(value));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  StringWriter(value));	  if(value    >    0.0)    {    writeString();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
185	[BUG]  [BUGGY]  OutputStream  out  =  this.separator.outputStream(value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.separator.outputStream(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	OutputStream  out  =  this.separator.outputStream(value);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
186	[BUG]  [BUGGY]  OutputStream  out  =  this.separator.getOutputStream();  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.separator.getOutputStream();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	OutputStream  out  =  this.separator.getOutputStream();	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
187	[BUG]  [BUGGY]  out.append( "negative,  but  was   ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "negative,  but  was   ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "negative,  but  was   ");	  out.append(   "negative   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
188	[BUG]  [BUGGY]  out.append( "negative: ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "negative: ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "negative: ");	  out.append(   "negative   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
189	[BUG]  [BUGGY]  out.append( "negative ",  value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "negative ",  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "negative ",  value);	  out.append(   "negative   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
190	[BUG]  [BUGGY]  out.append( "negative,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "negative,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "negative,  but  was   "  +  value);	  out.append(   "negative   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
191	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
192	[BUG]  [BUGGY]  out.append(this.separator).append( "' ");  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append( "' ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append( "' ");	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
193	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	throw  new  IllegalArgumentException( " ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
194	[BUG]  [BUGGY]  ||(value  <  0  &&  value  <  =  Double.POSITIVE_INFINITY))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  ||(value  <  0  &&  value  <  =  Double.POSITIVE_INFINITY))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	||(value  <  0  &&  value  <  =  Double.POSITIVE_INFINITY))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
195	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( " ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
196	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
197	[BUG]  [BUGGY]  while(value  <  0  ||  value  >  stackSize.length)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0  ||  value  >  stackSize.length)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0  ||  value  >  stackSize.length)  {  throw  new  IllegalArgumentException( " ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
198	[BUG]  [BUGGY]  ||(value  <  0  &&  value  <  =  Double.POSITIVE_INFINITY))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  ||(value  <  0  &&  value  <  =  Double.POSITIVE_INFINITY))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	||(value  <  0  &&  value  <  =  Double.POSITIVE_INFINITY))  {  throw  new  IllegalArgumentException( " ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
199	[BUG]  [BUGGY]  while(values!=  null)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  writeNull();  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
200	[BUG]  [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
201	[BUG]  [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
202	[BUG]  [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
203	[BUG]  [BUGGY]  if(value  <  0  ||  value  >=  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >=  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >=  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
204	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
205	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
206	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "n ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
207	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_FIRST)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_FIRST)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_NUMBER_FIRST)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
208	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
209	[BUG]  [BUGGY]  if(value  <  0  ||  value  >=  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >=  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >=  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
210	[BUG]  [BUGGY]  if(value  <  0  ||  value  ==  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  ==  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  ==  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
211	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_FIRST)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_FIRST)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_NUMBER_FIRST)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
212	[BUG]  [BUGGY]  out.append(this.separator).append(value  +  1);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append(value  +  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append(value  +  1);	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
213	[BUG]  [BUGGY]  out.append(this.separator).append(this.openBracket);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append(this.openBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append(this.openBracket);	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
214	[BUG]  [BUGGY]  out.append(value).append(this.separator);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(value).append(this.separator);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(value).append(this.separator);	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
215	[BUG]  [BUGGY]  out.append(this.separator).append('/');  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append('/');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append('/');	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
216	[BUG]  [BUGGY]  out.append(this.separator).append(this.separator);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append(this.separator);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append(this.separator);	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
217	[BUG]  [BUGGY]  validateNumberValue();  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumberValue();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumberValue();	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
218	[BUG]  [BUGGY]  validateEmptyValue();  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateEmptyValue();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateEmptyValue();	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
219	[BUG]  [BUGGY]  validateNotNull();  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNotNull();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNotNull();	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
220	[BUG]  [BUGGY]  validateNumericValues();  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumericValues();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumericValues();	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
221	[BUG]  [BUGGY]  validateEmpty();  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateEmpty();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateEmpty();	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
222	[BUG]  [BUGGY]  validateNumericValue(value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumericValue(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumericValue(value);	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
223	[BUG]  [BUGGY]  reader.write(this.value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(this.value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(this.value);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
224	[BUG]  [BUGGY]  reader.write(this.stack,  values);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(this.stack,  values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(this.stack,  values);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
225	[BUG]  [BUGGY]  reader.write(this.stack,  value);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(this.stack,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(this.stack,  value);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
226	[BUG]  [BUGGY]  reader.write(this.values);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(this.values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(this.values);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
227	[BUG]  [BUGGY]  reader.write(this.stackSize);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(this.stackSize);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(this.stackSize);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
228	[BUG]  [BUGGY]  reader.write(values,  0,  value.length);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(values,  0,  value.length);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(values,  0,  value.length);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
229	[BUG]  [BUGGY]  reader.write(this.serializeNulls,  value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(this.serializeNulls,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(this.serializeNulls,  value);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
230	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
231	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
232	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
233	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
234	[BUG]  [BUGGY]  while(value  <  =  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  =  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  =  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
235	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
236	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
237	[BUG]  [BUGGY]  if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
238	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
239	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
240	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
241	[BUG]  [BUGGY]  Writer  out  =  getOutputFile();  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  getOutputFile();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  getOutputFile();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
242	[BUG]  [BUGGY]  Writer  out  =  this.getWriter();  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.getWriter();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.getWriter();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
243	[BUG]  [BUGGY]  Writer  out  =  getWriter(value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  getWriter(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  getWriter(value);	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
244	[BUG]  [BUGGY]  Writer  out  =  getReader();  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  getReader();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  getReader();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
245	[BUG]  [BUGGY]  Writer  out  =  getOutputStream();  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  getOutputStream();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  getOutputStream();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
246	[BUG]  [BUGGY]  Writer  out  =  getOutput();  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  getOutput();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  getOutput();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
247	[BUG]  [BUGGY]  out.append(this.value,  value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.value,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.value,  value);	  out.append(this.value);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
248	[BUG]  [BUGGY]  out.write(this.value);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.write(this.value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.write(this.value);	  out.append(this.value);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
249	[BUG]  [BUGGY]  out.write(this.value,  0,  value.length);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.write(this.value,  0,  value.length);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.write(this.value,  0,  value.length);	  out.append(this.value);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
250	[BUG]  [BUGGY]  out.append(this.value,  null);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.value,  null);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.value,  null);	  out.append(this.value);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
251	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
252	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
253	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
254	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
255	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
256	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
257	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
258	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
259	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
260	[BUG]  [BUGGY]  Math.sqrt(value);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Math.sqrt(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Math.sqrt(value);	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
261	[BUG]  [BUGGY]  Writer  out  =(Writer)this.values.get(0);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =(Writer)this.values.get(0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =(Writer)this.values.get(0);	  if(values!=    null    &&    values.length    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
262	[BUG]  [BUGGY]  while(values!=  null  &&  values.length  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  values.length  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  values.length  >  0)  {  writeDeferredName();  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
263	[BUG]  [BUGGY]  while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
264	[BUG]  [BUGGY]  while(values!=  null  &&  value.length()  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  value.length()  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  value.length()  >  0)  {  writeDeferredName();  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
265	[BUG]  [BUGGY]  while(values!=  null  &&  value  <  =  Double.MIN_VALUE)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  value  <  =  Double.MIN_VALUE)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  value  <  =  Double.MIN_VALUE)  {  writeDeferredName();  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
266	[BUG]  [BUGGY]  while(values  ==  null)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values  ==  null)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values  ==  null)  {  writeNull();  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
267	[BUG]  [BUGGY]  while(values!=  null)  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  out.append( "n ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  out.append( "n ");  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
268	[BUG]  [BUGGY]  int[]  stack  =  getStackSize()  +  1;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackSize()  +  1;  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackSize()  +  1;	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
269	[BUG]  [BUGGY]  int[]  stack  =  getSerializeNulls();  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getSerializeNulls();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getSerializeNulls();	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
270	[BUG]  [BUGGY]  int[]  stack  =  getStackSize(value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackSize(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackSize(value);	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
271	[BUG]  [BUGGY]  int[]  stack  =  getStackSize().toArray(new  int[size()  ]);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackSize().toArray(new  int[size()  ]);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackSize().toArray(new  int[size()  ]);	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
272	[BUG]  [BUGGY]  int[]  stack  =  getStackSize().length;  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackSize().length;  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackSize().length;	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
273	[BUG]  [BUGGY]  int[]  stack  =  getStackSize()  /  2;  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackSize()  /  2;  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackSize()  /  2;	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
274	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
275	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
276	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
277	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
278	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
279	[BUG]  [BUGGY]  while(value  <  0)  {  out.append( "Null  values  must  be  infinite,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append( "Null  values  must  be  infinite,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append( "Null  values  must  be  infinite,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
280	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(values.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(values.size()  -  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(values.size()  -  1);	  if(values!=    null    &&    values.size()    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
281	[BUG]  [BUGGY]  Writer  out  =(Writer)values.get(0);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =(Writer)values.get(0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =(Writer)values.get(0);	  if(values!=    null    &&    values.size()    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
282	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
283	[BUG]  [BUGGY]  out.append(Double.toString(value)+  1);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(Double.toString(value)+  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(Double.toString(value)+  1);	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
284	[BUG]  [BUGGY]  out.append('ufffd');  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append('ufffd');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append('ufffd');	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
285	[BUG]  [BUGGY]  if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >=  stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
286	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
287	[BUG]  [BUGGY]  if(value  <  0  ||  value  ==  stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  ==  stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  ==  stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
288	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
289	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }	  if(value    >    0.0    ||    value    <    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
290	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
291	[BUG]  [BUGGY]  while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
292	[BUG]  [BUGGY]  while(values!=  null  &&  values.length  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  values.length  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  values.length  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
293	[BUG]  [BUGGY]  while(values!=  null)  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  out.append( ", ");  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
294	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  value.doubleValue());  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  value.doubleValue());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(value.doubleValue(),  value.doubleValue());	  Writer    out    =    new    JsonWriter(value.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
295	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.value.doubleValue());  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.value.doubleValue());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.value.doubleValue());	  Writer    out    =    new    JsonWriter(value.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
296	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(value.doubleValue(),  value);	  Writer    out    =    new    JsonWriter(value.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
297	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  true);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  true);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(value.doubleValue(),  true);	  Writer    out    =    new    JsonWriter(value.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
298	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  value.intValue());  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  value.intValue());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(value.doubleValue(),  value.intValue());	  Writer    out    =    new    JsonWriter(value.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
299	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue()  +  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(value.doubleValue()  +  1);	  Writer    out    =    new    JsonWriter(value.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
300	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
301	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
302	[BUG]  [BUGGY]  while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
303	[BUG]  [BUGGY]  while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
304	[BUG]  [BUGGY]  while(value  <  null)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  null)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  null)  {  writeDeferredName();  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
305	[BUG]  [BUGGY]  Out.write(this.separator,  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Out.write(this.separator,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Out.write(this.separator,  value);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
306	[BUG]  [BUGGY]  OutputStream  out  =  this.separator.outputInt(value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.separator.outputInt(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	OutputStream  out  =  this.separator.outputInt(value);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
307	[BUG]  [BUGGY]  out.append( "' "  +  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "' "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "' "  +  value);	  out.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
308	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
309	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
310	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
311	[BUG]  [BUGGY]  if(value  >  0.0)  {  out.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  out.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  out.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
312	[BUG]  [BUGGY]  Negative  values  must  be  zero,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Negative  values  must  be  zero,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Negative  values  must  be  zero,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
313	[BUG]  [BUGGY]  Numeric  values  must  be  numeric,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Numeric  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Numeric  values  must  be  numeric,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
314	[BUG]  [BUGGY]  MutableValues.checkNegativeValues(value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  MutableValues.checkNegativeValues(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	MutableValues.checkNegativeValues(value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
315	[BUG]  [BUGGY]  MutableValueSerializer.assertEquals(value,  out);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  MutableValueSerializer.assertEquals(value,  out);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	MutableValueSerializer.assertEquals(value,  out);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
316	[BUG]  [BUGGY]  NullValues.writeNumber(value,  out);  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NullValues.writeNumber(value,  out);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NullValues.writeNumber(value,  out);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
317	[BUG]  [BUGGY]  MutableValues.checkNotNull(value);  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  MutableValues.checkNotNull(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	MutableValues.checkNotNull(value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
318	[BUG]  [BUGGY]  MutableValueSerializer.assertEquals(value,  null);  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  MutableValueSerializer.assertEquals(value,  null);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	MutableValueSerializer.assertEquals(value,  null);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
319	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  this.openBracket);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  this.openBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  this.openBracket);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
320	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.closeBracket);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.closeBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  value,  this.closeBracket);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
321	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value  +  1);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  value  +  1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  value  +  1);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
322	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    <    =    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
323	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }	  if(value    <    =    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
324	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    <    =    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
325	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    =    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
326	[BUG]  [BUGGY]  if(values  ==  null)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null)  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null)  {  out.append( "null ");  }	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
327	[BUG]  [BUGGY]  NullValues.writeNull(value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NullValues.writeNull(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NullValues.writeNull(value);	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
328	[BUG]  [BUGGY]  if(values!=  null)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  out.append( "null ");  }	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
329	[BUG]  [BUGGY]  if(values  ==  null)  {  out.writeNull();  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null)  {  out.writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null)  {  out.writeNull();  }	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
330	[BUG]  [BUGGY]  if(values  ==  null)  {  out.write( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null)  {  out.write( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null)  {  out.write( " ");  }	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
331	[BUG]  [BUGGY]  if(values!=  null  ||  values.length  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null  ||  values.length  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null  ||  values.length  >  0)  {  writeDeferredName();  }	  if(values!=    null    &&    values.length    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
332	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null  ||  values.length  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null  ||  values.length  >  0)  {  writeDeferredName();  }	  if(values!=    null    &&    values.length    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
333	[BUG]  [BUGGY]  Writer  out  =  this.serializeNull(value);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.serializeNull(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.serializeNull(value);	  if(values!=    null    &&    values.length    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
334	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
335	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
336	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
337	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
338	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
339	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(getName());  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(getName());  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(getName());  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(getName());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
340	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(getName());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
341	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
342	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
343	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
344	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
345	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Integer.toString(value));  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Integer.toString(value));  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Integer.toString(value));  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(value);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
346	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(value);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
347	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Integer.toHexString(value));  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Integer.toHexString(value));  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Integer.toHexString(value));  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(value);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
348	[BUG]  [BUGGY]  if(value  >  0)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  out.append( "null ");  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
349	[BUG]  [BUGGY]  while(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
350	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
351	[BUG]  [BUGGY]  reader.write(values,  out);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(values,  out);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(values,  out);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
352	[BUG]  [BUGGY]  reader.write(this.serializeNulls);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(this.serializeNulls);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(this.serializeNulls);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
353	[BUG]  [BUGGY]  reader.write(values,  0,  0);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(values,  0,  0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(values,  0,  0);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
354	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
355	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  NUMBER_VALUE_NULL)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  NUMBER_VALUE_NULL)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  NUMBER_VALUE_NULL)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
356	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO_NUMBER)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO_NUMBER)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO_NUMBER)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
357	[BUG]  [BUGGY]  out.append(this.openBracket);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.openBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.openBracket);	  out.append(this.separator);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
358	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
359	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  10)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  10)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  10)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
360	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  59)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  59)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  59)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
361	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
362	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
363	[BUG]  [BUGGY]  Null  values  must  be  numeric,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Null  values  must  be  numeric,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Null  values  must  be  numeric,  but  was   "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
364	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
365	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was ",  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  numeric,  but  was ",  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
366	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
367	[BUG]  [BUGGY]  out.append( "negateNulls ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "negateNulls ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "negateNulls ");	  out.append(   "naN   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
368	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
369	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
370	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-null,  but  was "  +  value);  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
371	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
372	[BUG]  [BUGGY]  Writer  out  =  getOutputForWriter();  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  getOutputForWriter();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  getOutputForWriter();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
373	[BUG]  [BUGGY]  Writer  out  =  getOut();  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  getOut();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  getOut();	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
374	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
375	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  10)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  10)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  10)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
376	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
377	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(Double.toString(value));  return  this;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(Double.toString(value));  return  this;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
378	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  out.append(Double.toString(value));  return  this;  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  out.append(Double.toString(value));  return  this;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  out.append(Double.toString(value));  return  this;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
379	[BUG]  [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
380	[BUG]  [BUGGY]  if(value  >=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
381	[BUG]  [BUGGY]  if(value  >=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
382	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  out.append( "naN ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
383	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  out.append( "NaN ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
384	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( "naN ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  out.append( "naN ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  out.append( "naN ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "naN   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
385	[BUG]  [BUGGY]  out.append(this.separator).append(this.closeBracket);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append(this.closeBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append(this.closeBracket);	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
386	[BUG]  [BUGGY]  out.append(this.openBracket).append(value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.openBracket).append(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.openBracket).append(value);	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
387	[BUG]  [BUGGY]  while(values!=  null)  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  out.append('n');  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
388	[BUG]  [BUGGY]  if(values!=  null)  {  validateNull(values);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  validateNull(values);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  validateNull(values);  }	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
389	[BUG]  [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  validateNull(values);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
390	[BUG]  [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  out.append( "n ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  validateNull(values);  }  else  {  out.append( "n ");  }	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
391	[BUG]  [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  validateNull(values);  }  else  {  out.append( ", ");  }	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
392	[BUG]  [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  validateNull(values);  }  else  {  out.append( "null ");  }	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
393	[BUG]  [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  validateNull(values);  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  validateNull(values);  }  else  {  out.append('n');  }	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
394	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS,  value);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  REPLACEMENT_CHARS,  value);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS,    value);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
395	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  stack,  HTML_SAFE_REPLACEMENT_CHARS,  value);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  stack,  HTML_SAFE_REPLACEMENT_CHARS,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  stack,  HTML_SAFE_REPLACEMENT_CHARS,  value);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS,    value);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
396	[BUG]  [BUGGY]  if(value  <  =  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
397	[BUG]  [BUGGY]  if(value  <  =  0.0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
398	[BUG]  [BUGGY]  if(value  <  =  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
399	[BUG]  [BUGGY]  out.append(this.value  + ", ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.value  + ", ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.value  + ", ");	  out.append(this.value);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
400	[BUG]  [BUGGY]  OutputStream  out  =  this.separator.outputOutput(value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.separator.outputOutput(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	OutputStream  out  =  this.separator.outputOutput(value);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
401	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
402	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
403	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
404	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
405	[BUG]  [BUGGY]  if(value  <  0)  {  validateNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  validateNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  validateNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
406	[BUG]  [BUGGY]  if(value  <  0.0)  {  validateNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  validateNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  validateNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
407	[BUG]  [BUGGY]  if(value  <  0)  {  validateNull();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  validateNull();  }  else  {  out.append( "n ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  validateNull();  }  else  {  out.append( "n ");  }	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
408	[BUG]  [BUGGY]  if(value  <  0)  {  validateNull();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  validateNull();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  validateNull();  }  else  {  out.append( ", ");  }	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
409	[BUG]  [BUGGY]  if(value  <  0)  {  validateNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  validateNull();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  validateNull();  }  else  {  out.append( "null ");  }	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
410	[BUG]  [BUGGY]  if(value  <  0.0)  {  validateNull();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  validateNull();  }  else  {  out.append( "n ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  validateNull();  }  else  {  out.append( "n ");  }	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
411	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  REPLACEMENT_CHARS);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  REPLACEMENT_CHARS);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getName(),  REPLACEMENT_CHARS);	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
412	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  this);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  this);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getName(),  this);	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
413	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  DEFERRED_NAME);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  DEFERRED_NAME);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getName(),  DEFERRED_NAME);	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
414	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
415	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
416	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeDeferredName();  }	  if(value    <    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
417	[BUG]  [BUGGY]  if(value  <  0)  {  writeFieldName();  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeFieldName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeFieldName();  }	  if(value    <    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
418	[BUG]  [BUGGY]  Writer  out  =  this.values.get(new  Integer(0));  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(new  Integer(0));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(new  Integer(0));	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
419	[BUG]  [BUGGY]  Writer  out  =  this.values.getImpl(0);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.getImpl(0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.getImpl(0);	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
420	[BUG]  [BUGGY]  Writer  out  =  this.values.get(1);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(1);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(1);	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
421	[BUG]  [BUGGY]  Writer  out  =  this.values.get(index);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(index);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(index);	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
422	[BUG]  [BUGGY]  validateNull(out);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNull(out);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNull(out);	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
423	[BUG]  [BUGGY]  validateNegative(value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNegative(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNegative(value);	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
424	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
425	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
426	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
427	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Negative  values  must  be  zero,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
428	[BUG]  [BUGGY]  Writer  out  =  this.values.remove(value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.remove(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.remove(value);	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
429	[BUG]  [BUGGY]  Writer  out  =  this.values.get(value,  0);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(value,  0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(value,  0);	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
430	[BUG]  [BUGGY]  Writer  out  =  this.values.get(value  /  2.0);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(value  /  2.0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(value  /  2.0);	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
431	[BUG]  [BUGGY]  out.append('  ');  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append('  ');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append('  ');	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
432	[BUG]  [BUGGY]  out.append( "[null] ");  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "[null] ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "[null] ");	  out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
433	[BUG]  [BUGGY]  out.append( "null ",  Double.valueOf(value));  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "null ",  Double.valueOf(value));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "null ",  Double.valueOf(value));	  out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
434	[BUG]  [BUGGY]  out.append( "null ",  null);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "null ",  null);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "null ",  null);	  out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
435	[BUG]  [BUGGY]  if(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >=  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
436	[BUG]  [BUGGY]  if(value  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
437	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
438	[BUG]  [BUGGY]  while(value!=  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value!=  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value!=  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
439	[BUG]  [BUGGY]  out.append( "negative, ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "negative, ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "negative, ");	  out.append(   "negative   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
440	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
441	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  stackSize)  {  out.append( "null ");  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
442	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
443	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
444	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(Double.toString(value));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(Double.toString(value));  return  null;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  out.append( ", ");  }  else  {  out.append(Double.toString(value));  return  null;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
445	[BUG]  [BUGGY]  JSWriter  out  =  new  JsonWriter(new  StringReader(value));  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  JSWriter  out  =  new  JsonWriter(new  StringReader(value));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	JSWriter  out  =  new  JsonWriter(new  StringReader(value));	  Writer    out    =    new    JsonWriter(new    StringReader(value));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
446	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  0);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  StringReader(value),  0);	  Writer    out    =    new    JsonWriter(new    StringReader(value));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
447	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
448	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
449	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
450	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinite,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
451	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
452	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  infinity,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
453	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  endless,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  endless,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Null  values  must  be  endless,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
454	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
455	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
456	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
457	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZEROS)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZEROS)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZEROS)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
458	[BUG]  [BUGGY]  out.append( "msg.no.value ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "msg.no.value ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "msg.no.value ");	  out.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
459	[BUG]  [BUGGY]  int[]  stack  =  getStackSize()  -  1;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackSize()  -  1;  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackSize()  -  1;	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
460	[BUG]  [BUGGY]  int[]  stack  =  getStackSize().doubleValue();  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackSize().doubleValue();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackSize().doubleValue();	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
461	[BUG]  [BUGGY]  int[]  stack  =  getStackPosition();  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackPosition();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackPosition();	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
462	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append('n');  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append('n');  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".charAt(value)).append('n');	  if(value    <    0)    {    out.append('n');    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
463	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value  -  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value  -  1)  ==  'n')  {  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".charAt(value  -  1)  ==  'n')  {	  if(value    <    0)    {    out.append('n');    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
464	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  <  1)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null  ||  values.length  <  1)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null  ||  values.length  <  1)  {  writeDeferredName();  }	  if(values    ==    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
465	[BUG]  [BUGGY]  if(values  ==  null)  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null)  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null)  {  out.append( ", ");  }	  if(values    ==    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
466	[BUG]  [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    <    0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
467	[BUG]  [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    <    0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
468	[BUG]  [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    <    0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
469	[BUG]  [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was "  +  value);  }	  if(value    <    0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
470	[BUG]  [BUGGY]  if(value  >  0)  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  out.append( ", ");  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
471	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_ERROR);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_ERROR);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_ERROR);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
472	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_OF_RANGE);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_OF_RANGE);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_OF_RANGE);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
473	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUES);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUES);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  DEFINE_NULL_VALUES);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
474	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  stack);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  stack);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  stack);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
475	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_FONT);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_FONT);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  DEFAULT_NUMBER_FONT);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
476	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
477	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
478	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
479	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
480	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
481	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
482	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was ",  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was ",  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was ",  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
483	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was, "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was, "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was, "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
484	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was. "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
485	[BUG]  [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NegativeValue  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  null,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
486	[BUG]  [BUGGY]  if(values!=  null)  {  out.write( " ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  out.write( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  out.write( " ");  }	  if(values!=    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
487	[BUG]  [BUGGY]  NullPointer  out  =  getNullPointer();  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NullPointer  out  =  getNullPointer();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NullPointer  out  =  getNullPointer();	  if(values!=    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
488	[BUG]  [BUGGY]  if(values!=  null)  {  out.writeNull();  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null)  {  out.writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  out.writeNull();  }	  if(values!=    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
489	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }	  if(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
490	[BUG]  [BUGGY]  if(values  ==  null  ||  values.size()  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null  ||  values.size()  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null  ||  values.size()  >  0)  {  writeDeferredName();  }	  if(values!=    null    &&    values.size()    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
491	[BUG]  [BUGGY]  if(values!=  null  ||  values.size()  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null  ||  values.size()  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null  ||  values.size()  >  0)  {  writeDeferredName();  }	  if(values!=    null    &&    values.size()    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
492	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(values.toArray(new  String[values.size()  ]));  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(values.toArray(new  String[values.size()  ]));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(values.toArray(new  String[values.size()  ]));	  if(values!=    null    &&    values.size()    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
493	[BUG]  [BUGGY]  if(values!=  null  &&  values.size()  >  1)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null  &&  values.size()  >  1)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null  &&  values.size()  >  1)  {  writeDeferredName();  }	  if(values!=    null    &&    values.size()    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
494	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO_DEFENSION)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_DEFENSION)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
495	[BUG]  [BUGGY]  out.append( "u ").append(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "u ".toString());  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "u ").append(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "u ".toString());  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "u ").append(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "u ".toString());  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
496	[BUG]  [BUGGY]  out.append( "[s.IFJDCS] ".toString());  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "[s.IFJDCS] ".toString());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "[s.IFJDCS] ".toString());	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
497	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "'s.IFJDCS ".toString());  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "'s.IFJDCS ".toString());  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "'s.IFJDCS ".toString());  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
498	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ".toString());  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ".toString());  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ".toString());  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
499	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( "no  value ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  out.append( "no  value ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  out.append( "no  value ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "no    value   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
500	[BUG]  [BUGGY]  while(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
501	[BUG]  [BUGGY]  while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
502	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
503	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Number  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
504	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
505	[BUG]  [BUGGY]  if(value  <  0)  {  out.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  out.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  out.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
506	[BUG]  [BUGGY]  if(value  <  0)  {  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  out.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
507	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
508	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  SHORT_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
509	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
510	[BUG]  [BUGGY]  if(value  <  =  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0  ||  value  >  stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
511	[BUG]  [BUGGY]  out.append( "[ ");  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "[ ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "[ ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
512	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(value.doubleValue(),  Double.POSITIVE_INFINITY);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(value.doubleValue(),  Double.POSITIVE_INFINITY);	  Writer    out    =    new    JsonWriter(value.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
513	[BUG]  [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0)  {  writeDeferredName();  }	  if(value    <    0.0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
514	[BUG]  [BUGGY]  while(value!=  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value!=  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value!=  0)  {  writeDeferredName();  }	  while(value    <    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
515	[BUG]  [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  out.append( "native ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "native   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
516	[BUG]  [BUGGY]  if(value  <  0.0)  {  out.append( "native ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0)  {  out.append( "native ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  out.append( "native ");  }	  if(value    <    0.0)    {    writeDeferredName();    }    else    {    out.append(   "native   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
517	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value  -  1));  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value  -  1));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".charAt(value  -  1));	  if(value    <    0)    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
518	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append( ", ");  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value)).append( ", ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".charAt(value)).append( ", ");	  if(value    <    0)    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
519	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(0));  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(0));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".charAt(0));	  if(value    <    0)    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
520	[BUG]  [BUGGY]  out.append( "Native  values  must  be  infinity. ");  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "Native  values  must  be  infinity. ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "Native  values  must  be  infinity. ");	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
521	[BUG]  [BUGGY]  if(value  <  =  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0)  {  writeDeferredName();  }	  if(value    <    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
522	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO_NUMBER_INT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
523	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO_NUMBER_FLOAT)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
524	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  INT_NULL)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  INT_NULL)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  INT_NULL)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
525	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  this.serializeNulls);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this.serializeNulls,  this.serializeNulls);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this.serializeNulls,  this.serializeNulls);	  Writer    out    =    new    JsonWriter(this.serializeNulls,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
526	[BUG]  [BUGGY]  Writer  out  =  this.values.remove(0);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.remove(0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.remove(0);	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
527	[BUG]  [BUGGY]  Writer  out  =  this.values.getImplicitReturn();  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.getImplicitReturn();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.getImplicitReturn();	  Writer    out    =    this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
528	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
529	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
530	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was "  +  value);  }	  if(value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
531	[BUG]  [BUGGY]  Writer  out  =  this.values.get(value).getWriter();  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  this.values.get(value).getWriter();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  this.values.get(value).getWriter();	  Writer    out    =    this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
532	[BUG]  [BUGGY]  out.append(this.separator).append(value,  this.openBracket);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append(value,  this.openBracket);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append(value,  this.openBracket);	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
533	[BUG]  [BUGGY]  out.append(this.separator).append(value  /  2.0);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append(value  /  2.0);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append(value  /  2.0);	  out.append(this.separator).append(value);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
534	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  stackSize)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
535	[BUG]  [BUGGY]  int[]  stack  =  getStackSize().intValue();  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  int[]  stack  =  getStackSize().intValue();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	int[]  stack  =  getStackSize().intValue();	  int[]    stack    =    getStackSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
536	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
537	[BUG]  [BUGGY]  out.append(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
538	[BUG]  [BUGGY]  out.append(value  <  0  ||  value  >  Float.MAX_VALUE)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(value  <  0  ||  value  >  Float.MAX_VALUE)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(value  <  0  ||  value  >  Float.MAX_VALUE)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
539	[BUG]  [BUGGY]  Iterator  <  Number>  it  =  values.iterator();  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Iterator  <  Number>  it  =  values.iterator();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Iterator  <  Number>  it  =  values.iterator();	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
540	[BUG]  [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  out.append( "no  value ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  out.append( "no  value ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeFieldName();  }  else  {  out.append( "no  value ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "no    value   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
541	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "no  value ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  out.append( "no  value ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeNull();  }  else  {  out.append( "no  value ");  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   "no    value   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
542	[BUG]  [BUGGY]  out.append( ",  but  was   ");  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ",  but  was   ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ",  but  was   ");	  out.append(   ",   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
543	[BUG]  [BUGGY]  if(value  <  =  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0  ||  value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
544	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
545	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
546	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
547	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
548	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
549	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  binary,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  binary,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  binary,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
550	[BUG]  [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
551	[BUG]  [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  benite,  but  was   "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
552	[BUG]  [BUGGY]  out.append( "NaN  values  must  be  finite,  but  was ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "NaN  values  must  be  finite,  but  was ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "NaN  values  must  be  finite,  but  was ");	  out.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
553	[BUG]  [BUGGY]  out.append( "Negative  values  must  be  finite,  but  was ");  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "Negative  values  must  be  finite,  but  was ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "Negative  values  must  be  finite,  but  was ");	  out.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
554	[BUG]  [BUGGY]  out.append( ". ").append(value);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ". ").append(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ". ").append(value);	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
555	[BUG]  [BUGGY]  out.append( "n ").append(value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "n ").append(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "n ").append(value);	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
556	[BUG]  [BUGGY]  out.append( "null ").append(value);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "null ").append(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "null ").append(value);	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
557	[BUG]  [BUGGY]  out.append( ", ".toString());  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ", ".toString());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ", ".toString());	  if(value    <    0)    {    writeDeferredName();    }    else    {    out.append(   ".s.IFJDCS   ".toString());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
558	[BUG]  [BUGGY]  validateNumericValues(values);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumericValues(values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumericValues(values);	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
559	[BUG]  [BUGGY]  validateIllegalArgument(values);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateIllegalArgument(values);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateIllegalArgument(values);	  validateNull(values);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
560	[BUG]  [BUGGY]  if(values!=  null  &&  values.size()  >  0)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null  &&  values.size()  >  0)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null  &&  values.size()  >  0)  {  writeNull();  }	  if(values!=    null    &&    values.size()    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
561	[BUG]  [BUGGY]  out.append( ",null ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ",null ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ",null ");	  if(value    <    0)    {    writeNull();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
562	[BUG]  [BUGGY]  out.append(getName());  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(getName());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(getName());	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
563	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
564	[BUG]  [BUGGY]  out.append( "' "  +  Double.toString(value));  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "' "  +  Double.toString(value));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "' "  +  Double.toString(value));	  out.append(Double.toString(value));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
565	[BUG]  [BUGGY]  while(value  <  0)  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append( ", ");  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
566	[BUG]  [BUGGY]  out.append(this.deferredName).append( ");n ");  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.deferredName).append( ");n ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.deferredName).append( ");n ");	  out.append(this.deferredName);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
567	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  null);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  getClass().getName(),  null);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  getClass().getName(),  null);	  Writer    out    =    new    JsonWriter(this,    getClass().getName());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
568	[BUG]  [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(value    <    0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
569	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  <  2)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null  ||  values.length  <  2)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null  ||  values.length  <  2)  {  writeNull();  }	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
570	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null  ||  values.length  ==  0)  {  writeNull();  }	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
571	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  <  1)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null  ||  values.length  <  1)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null  ||  values.length  <  1)  {  writeNull();  }	  if(values    ==    null)    {    writeNull();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
572	[BUG]  [BUGGY]  out.append(getDelimiter()).append(this.separator);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(getDelimiter()).append(this.separator);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(getDelimiter()).append(this.separator);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
573	[BUG]  [BUGGY]  OutputStream  out  =  this.separator.outputOutputFactory();  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.separator.outputOutputFactory();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	OutputStream  out  =  this.separator.outputOutputFactory();	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
574	[BUG]  [BUGGY]  OutputStream  out  =  this.separator.outputOutputFile(value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.separator.outputOutputFile(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	OutputStream  out  =  this.separator.outputOutputFile(value);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   "'   ");    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
575	[BUG]  [BUGGY]  out.append(value  <  0  ||  value  >  Float.floatToIntBits(value))  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(value  <  0  ||  value  >  Float.floatToIntBits(value))  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(value  <  0  ||  value  >  Float.floatToIntBits(value))  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
576	[BUG]  [BUGGY]  out.append(value  <  0  ||  value  >  Float.MAX_VALUE)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(value  <  0  ||  value  >  Float.MAX_VALUE)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(value  <  0  ||  value  >  Float.MAX_VALUE)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
577	[BUG]  [BUGGY]  out.append(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
578	[BUG]  [BUGGY]  out.append(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
579	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  indent);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  indent);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(this,  HTML_SAFE_REPLACEMENT_CHARS,  indent);	  Writer    out    =    new    JsonWriter(this,    HTML_SAFE_REPLACEMENT_CHARS);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
580	[BUG]  [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    <    0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
581	[BUG]  [BUGGY]  out.append( ".s.IFJDCS ".charAt(value).toString());  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( ".s.IFJDCS ".charAt(value).toString());  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( ".s.IFJDCS ".charAt(value).toString());	  if(value    <    0)    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
582	[BUG]  [BUGGY]  out.append(Integer.toHexString(value));  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(Integer.toHexString(value));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(Integer.toHexString(value));	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
583	[BUG]  [BUGGY]  out.append(Integer.toString(value));  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(Integer.toString(value));  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(Integer.toString(value));	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
584	[BUG]  [BUGGY]  MutableValues.isNull(value);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  MutableValues.isNull(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	MutableValues.isNull(value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
585	[BUG]  [BUGGY]  NullValues.writeNumber(value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  NullValues.writeNumber(value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	NullValues.writeNumber(value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
586	[BUG]  [BUGGY]  MutableValueMap.put(value,  null);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  MutableValueMap.put(value,  null);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	MutableValueMap.put(value,  null);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Negative    values    must    be    zero,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
587	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
588	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    >    0.0    ||    value    <    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
589	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
590	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  this.stackSize)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
591	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
592	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  ZERO)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
593	[BUG]  [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  numeric,  but  was   "  +  value);  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    numeric,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
594	[BUG]  [BUGGY]  while(value  <  0)  {  out.append(value);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append(value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append(value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
595	[BUG]  [BUGGY]  out.append( "' ",  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "' ",  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "' ",  value);	  out.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
596	[BUG]  [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  this.stackSize);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  new  JsonWriter(new  StringReader(value),  this.stackSize);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  new  JsonWriter(new  StringReader(value),  this.stackSize);	  Writer    out    =    new    JsonWriter(new    StringReader(value));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
597	[BUG]  [BUGGY]  if(value!=  null)  {  writeNull();  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeNull();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeNull();  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
598	[BUG]  [BUGGY]  out.append( "negative,  but  was: ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "negative,  but  was: ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "negative,  but  was: ");	  out.append(   "negative   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
599	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Double.toString(value));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Double.toString(value));  return  null;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  Double.isNaN(value))  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Double.toString(value));  return  null;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
600	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Double.toString(value));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Double.toString(value));  return  null;  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( " ");  }  else  {  out.append(Double.toString(value));  return  null;  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
601	[BUG]  [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  Double.isNaN(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  Double.isNaN(value))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(Double.toString(value));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
602	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  <  2)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null  ||  values.length  <  2)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null  ||  values.length  <  2)  {  writeDeferredName();  }	  if(values    ==    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
603	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null  ||  values.length  ==  0)  {  writeDeferredName();  }	  if(values    ==    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
604	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  non-empty,  but  was "  +  value);  }	  if(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
605	[BUG]  [BUGGY]  while(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
606	[BUG]  [BUGGY]  while(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  =  0)  {  throw  new  IllegalArgumentException( " ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
607	[BUG]  [BUGGY]  while(values  ==  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values  ==  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values  ==  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
608	[BUG]  [BUGGY]  while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  value  <  =  Double.POSITIVE_INFINITY)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
609	[BUG]  [BUGGY]  while(values  ==  null)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values  ==  null)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values  ==  null)  {  writeDeferredName();  }	  while(values!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
610	[BUG]  [BUGGY]  validateIllegalArgument();  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateIllegalArgument();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateIllegalArgument();	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
611	[BUG]  [BUGGY]  validateNumber();  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  validateNumber();  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	validateNumber();	  validateNull();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
612	[BUG]  [BUGGY]  while(values!=  null  &&  value  <  =  Double.NaN)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  value  <  =  Double.NaN)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  value  <  =  Double.NaN)  {  writeDeferredName();  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
613	[BUG]  [BUGGY]  while(values!=  null  &&  value  <  =  0.0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(values!=  null  &&  value  <  =  0.0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(values!=  null  &&  value  <  =  0.0)  {  writeDeferredName();  }	  while(values!=    null)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
614	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  writeNull();  }  else  {  out.append('n');  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
615	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
616	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  0.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeNull();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
617	[BUG]  [BUGGY]  out.append( "native  values  must  be  finite,  but  was ");  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "native  values  must  be  finite,  but  was ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "native  values  must  be  finite,  but  was ");	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
618	[BUG]  [BUGGY]  out.append( "Native  values  must  be  nonempty,  but  was ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "Native  values  must  be  nonempty,  but  was ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "Native  values  must  be  nonempty,  but  was ");	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
619	[BUG]  [BUGGY]  out.append( "Native  values  must  be  lenient,  but  was   ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "Native  values  must  be  lenient,  but  was   ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "Native  values  must  be  lenient,  but  was   ");	  out.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
620	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  100)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    stackSize)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
621	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  writeNull();  }  else  {  out.append( "null ");  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
622	[BUG]  [BUGGY]  if(values!=  null  &&  value.length  >  0)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(values!=  null  &&  value.length  >  0)  {  writeDeferredName();  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null  &&  value.length  >  0)  {  writeDeferredName();  }	  if(values!=    null    &&    values.length    >    0)    {    writeDeferredName();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
623	[BUG]  [BUGGY]  Writer  out  =  getWriter(this);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  Writer  out  =  getWriter(this);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	Writer  out  =  getWriter(this);	  Writer    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
624	[BUG]  [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
625	[BUG]  [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
626	[BUG]  [BUGGY]  out.append(this.separator).append( ");n ");  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append(this.separator).append( ");n ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append(this.separator).append( ");n ");	  out.append(this.separator);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
627	[BUG]  [BUGGY]  if(value  <  =  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  =  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    =    0.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
628	[BUG]  [BUGGY]  if(value  >  0.0  ||  value  <  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0  ||  value  <  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0  ||  value  <  0.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was "  +  value);  }	  if(value    >    0.0)    {    writeFieldName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
629	[BUG]  [BUGGY]  out.append( "negated,  but  was   "  +  value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "negated,  but  was   "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "negated,  but  was   "  +  value);	  if(value    <    0)    {    out.append(   "n   ");    }    else    {    out.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
630	[BUG]  [BUGGY]  OutputStream  indent  =  new  OutputStreamWriter(this.separator);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  OutputStream  indent  =  new  OutputStreamWriter(this.separator);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	OutputStream  indent  =  new  OutputStreamWriter(this.separator);	  if(value    <    0)    {    out.append(this.separator);    }    else    {    out.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
631	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
632	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
633	[BUG]  [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  fixed,  but  was "  +  value);  }	  while(value    <    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
634	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  instantiate,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeString();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
635	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value    >    0.0)    {    writeString();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
636	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  constant,  but  was   "  +  value);  }	  if(value    >    0.0)    {    writeString();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
637	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeString();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  }	  if(value    >    0.0)    {    writeString();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
638	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  0.0  ||  value  >  1.0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	  if(value    <    0    ||    value    >    0.0)    {    writeDeferredName();    }    else    {    out.append(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
639	[BUG]  [BUGGY]  if(value  >  0.0)  {  validateNull(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  validateNull(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  validateNull(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
640	[BUG]  [BUGGY]  if(value  <  0)  {  validateNull(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  validateNull(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  validateNull(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
641	[BUG]  [BUGGY]  if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( ", ");  }	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
642	[BUG]  [BUGGY]  if(value  <  0)  {  validateNull(value);  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0)  {  validateNull(value);  }  else  {  out.append( ", ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  validateNull(value);  }  else  {  out.append( ", ");  }	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
643	[BUG]  [BUGGY]  if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( "n ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( "n ");  }	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
644	[BUG]  [BUGGY]  if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( "null ");  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  validateNull(value);  }  else  {  out.append( "null ");  }	  validateNull(value);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
645	[BUG]  [BUGGY]  out.append( "null ",  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  out.append( "null ",  Double.POSITIVE_INFINITY);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	out.append( "null ",  Double.POSITIVE_INFINITY);	  out.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
646	[BUG]  [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  }	  if(value!=    null)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "Numeric    values    must    be    finite,    but    was       "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
647	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinity,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
648	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  infinite,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
649	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	throw  new  IllegalArgumentException( "Numeric  values  must  be  zero,  but  was "  +  value);	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "Null    values    must    be    infinite,    but    was   "    +    value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
650	[BUG]  [BUGGY]  while(value  <  0)  {  out.append( "' ");  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  while(value  <  0)  {  out.append( "' ");  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	while(value  <  0)  {  out.append( "' ");	  if(value    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    out.append(getName());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
651	[BUG]  [BUGGY]  reader.write(values,  0,  value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(values,  0,  value);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(values,  0,  value);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
652	[BUG]  [BUGGY]  reader.write(values,  null);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  reader.write(values,  null);  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	reader.write(values,  null);	  reader.write(values);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
653	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  INT_NULL)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0  ||  value  >  INT_NULL)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0  ||  value  >  INT_NULL)  {  writeDeferredName();  }  else  {  out.append('n');  }	  if(value    <    0    ||    value    >    SHORT_NUMBER_INT)    {    writeDeferredName();    }    else    {    out.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
654	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
655	[BUG]  [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  <  0.0  ||  value  >  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0  ||  value  >  1.0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    <    0.0    ||    value    >    1.0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
656	[BUG]  [BUGGY]  if(value  >  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  writeFieldName();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
657	[BUG]  [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite      [CONTEXT]      public  JsonWriter  value(double  value)  throws  IOException  {      [BUGGY]  if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  [BUGGY]      if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException(     "Numeric  values  must  be  finite,  but  was       "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0)  {  writeNull();  }  else  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }	  if(value    >    0)    {    writeDeferredName();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
