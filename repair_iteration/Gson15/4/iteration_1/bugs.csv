bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  if(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  >  0.0)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  if(values  ==  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(values  ==  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values  ==  null)  {  writeDeferredName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  if(values!=  null)  {  writeDeferredName();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(values!=  null)  {  writeDeferredName();  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(values!=  null)  {  writeDeferredName();  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]    [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	  	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( ", ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "' ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0.0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append( "null ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append('n');  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  0)  {  writeDeferredName();  }  else  {  out.append('n');  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  0)  {  writeDeferredName();  }  else  {  out.append('n');  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  if(value  <  =  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Numeric  values  must  be  finite  [CONTEXT]  public  JsonWriter  value(double  value)  throws  IOException  {  [BUGGY]  if(value  <  =  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }  [BUGGY]  if  (Double.isNaN(value)  ||  Double.isInfinite(value))  {  throw  new  IllegalArgumentException( "Numeric  values  must  be  finite,  but  was   "  +  value);  }  beforeValue();  out.append(Double.toString(value));  return  this;  }  [CLASS]  JsonWriter  [METHOD]  value  [RETURN_TYPE]  JsonWriter  double  value  [VARIABLES]  boolean  htmlSafe  lenient  serializeNulls  value  double  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  String  closeBracket  deferredName  indent  name  openBracket  separator  value  Writer  out  int  context  empty  newTop  nonempty  stackSize  topOfStack  	projects/Gson15/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.4082482904638631	494	494	1	replace	if(value  <  =  0)  {  writeDeferredName();  }  else  {  out.append( "n ");  }	writeDeferredName();  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
