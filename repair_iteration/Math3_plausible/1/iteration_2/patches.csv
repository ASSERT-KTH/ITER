bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  allowMismatchException(a,  b.length);  [CE]  cannot  find  symbol  [FE]          DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  allowMismatchException(a,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	allowMismatchException(a,  b.length);	          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
2	[BUG]  [BUGGY]  degrees.add(a.length  -  1,  b.length);  [CE]  cannot  find  symbol  degrees  [FE]            DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  degrees.add(a.length  -  1,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	degrees.add(a.length  -  1,  b.length);	          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  degrees	28	None	replace
3	[BUG]  [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length  +  1);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length  +  1);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length  +  1);	  DimensionMismatchException    a    =    new    DimensionMismatchException(a.length,    b.length);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	46	None	replace
4	[BUG]  [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a,  b.length);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  a  =  new  DimensionMismatchException(a,  b.length);	  DimensionMismatchException    a    =    new    DimensionMismatchException(a.length,    b.length);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	46	None	replace
5	[BUG]  [BUGGY]  if(b.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  cannot  find  symbol  len  [FE]            DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(b.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(b.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b[length]);    }    	non-compiled	[CE]  cannot  find  symbol  len	29	None	replace
6	[BUG]  [BUGGY]  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }  [CE]  cannot  find  symbol  length  [FE]              DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }	          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b[length]);    }    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	add
8	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	add
9	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	6	1	add
10	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	6	1	add
11	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	6	1	add
12	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	6	1	add
13	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a.length  -  1,  b.length);  [CE]  cannot  find  symbol  len  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  throw  new  DimensionMismatchException(a.length  -  1,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a.length  -  1,  b.length);	          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  len	9	None	replace
14	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
15	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
16	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
17	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
18	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
19	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
20	[BUG]  [BUGGY]  allowMismatchException(a[0],  b[1]  +  1);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  allowMismatchException(a[0],  b[1]  +  1);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	allowMismatchException(a[0],  b[1]  +  1);	  allowMismatchException(a[0],    b[1]);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
21	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  /  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length  /  2;	  final    int    len    =    a.length    /    1;    	compilable	  [FE]  DimensionMismatchException  	31	4	replace
22	[BUG]  [BUGGY]  final  int  len  =  a.length  /  2;  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  /  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  /  2;	  final    int    len    =    a.length    /    1;    	compilable	  [FE]  DimensionMismatchException  	31	4	replace
23	[BUG]  [BUGGY]  final  int  len  =  a.length  -  2;  final  int  len  =  a.length  -  2;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  -  2;  final  int  len  =  a.length  -  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    2;    final  int  len  =  a.length  -  2;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	22	None	add
24	[BUG]  [BUGGY]  final  int  len  =  a.length  -  2;  final  int  len  =  a.length  -  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  -  2;  final  int  len  =  a.length  -  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    2;    final  int  len  =  a.length  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	22	None	add
25	[BUG]  [BUGGY]  final  int  len  =  a.length  -  2;  int  len  =  a.length  -  2;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  -  2;  int  len  =  a.length  -  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    2;    int  len  =  a.length  -  2;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	22	None	add
26	[BUG]  [BUGGY]  if(b.length!=  0)  {  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  }  [CE]  cannot  find  symbol  len  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(b.length!=  0)  {  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  }  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(b.length!=  0)  {  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  }	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  cannot  find  symbol  len	53	None	replace
27	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(a.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
28	[BUG]  [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(a.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
29	[BUG]  [BUGGY]  degrees.add(a.length);  [CE]  cannot  find  symbol  degrees  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  degrees.add(a.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	degrees.add(a.length);	          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  degrees	33	None	replace
30	[BUG]  [BUGGY]  dimensions.add(a.length);  [CE]  cannot  find  symbol  dimensions  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  dimensions.add(a.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	dimensions.add(a.length);	          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  dimensions	33	None	replace
31	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a,    b.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	4	None	replace
32	[BUG]  [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a,    b.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	4	None	replace
33	[BUG]  [BUGGY]  final  int  a.length  =  a.length  +  1;  [CE]  ';'  expected  [FE]        DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  a.length  =  a.length  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  a.length  =  a.length  +  1;	  final    int    len    =    a.length    +    1;    final    int    a.length    =    a.length    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
34	[BUG]  [BUGGY]  final  int  a.length  =  a.length;  [CE]  ';'  expected  [FE]          DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  a.length  =  a.length;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  a.length  =  a.length;	  final    int    len    =    a.length    +    1;    final    int    a.length    =    a.length    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
35	[BUG]  [BUGGY]  Math.min(a.length,  b.length)-  1]  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  Math.min(a.length,  b.length)-  1]  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	Math.min(a.length,  b.length)-  1]  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }	  Math.min(a.length,    b.length))    {    throw    new    DimensionMismatchException(a[0],    b[1]);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
36	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length);	          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    ArrayIndexOutOfBoundsException    a    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	10	None	replace
37	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length,  b.length);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length,  b.length);	          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    ArrayIndexOutOfBoundsException    a    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	10	None	replace
38	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	8	1	add
39	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	8	1	add
40	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	8	1	add
41	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	8	1	add
42	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }  [CE]  cannot  find  symbol  length  [FE]        DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }	  	non-compiled	[CE]  cannot  find  symbol  length	8	None	add
43	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  [CE]  cannot  find  symbol  len  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  cannot  find  symbol  len	54	None	replace
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	replace
45	[BUG]  [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	replace
46	[BUG]  [BUGGY]  final  double  aLowSum  =  Math.min(a.length,  b.length  +  1);  [CE]  cannot  find  symbol  len  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  double  aLowSum  =  Math.min(a.length,  b.length  +  1);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  double  aLowSum  =  Math.min(a.length,  b.length  +  1);	  final    double    aLowSum    =    Math.min(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	25	None	replace
47	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]            DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  +  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length  +  2;	  final    int    len    =    a.length    +    1;    final    int    len    =    a.length    +    2;    	compilable	  [FE]  DimensionMismatchException  	40	4	replace
48	[BUG]  [BUGGY]  final  int  len  =  a.length  +  2;  [FE]  DimensionMismatchException  [FE]            DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  +  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  +  2;	  final    int    len    =    a.length    +    1;    final    int    len    =    a.length    +    2;    	compilable	  [FE]  DimensionMismatchException  	40	4	replace
49	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  /  1  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length  /  1  +  1;	  final    int    len    =    a.length    -    1    +    1;    	compilable	  [FE]  DimensionMismatchException  	49	4	replace
50	[BUG]  [BUGGY]  final  int  len  =  a.length  /  1  +  1;  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  /  1  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  /  1  +  1;	  final    int    len    =    a.length    -    1    +    1;    	compilable	  [FE]  DimensionMismatchException  	49	4	replace
51	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
52	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
53	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
54	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
55	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  =  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  illegal  start  of  expression  [FE]        DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  =  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  =  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
56	[BUG]  [BUGGY]  degrees.put(a.length,  b.length);  [CE]  cannot  find  symbol  degrees  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  degrees.put(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	degrees.put(a.length,  b.length);	          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  degrees	27	None	replace
57	[BUG]  [BUGGY]  final  int  len  =  a.length  /  1;  final  int  len  =  a.length  /  2;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  /  1;  final  int  len  =  a.length  /  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    /    1;    final  int  len  =  a.length  /  2;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	30	None	add
58	[BUG]  [BUGGY]  final  int  len  =  a.length  /  1;  final  int  len  =  a.length  /  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  /  1;  final  int  len  =  a.length  /  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    /    1;    final  int  len  =  a.length  /  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	30	None	add
59	[BUG]  [BUGGY]  final  int  len  =  a.length  /  1;  final  int  len  =  a.length  /  3;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  /  1;  final  int  len  =  a.length  /  3;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    /    1;    final  int  len  =  a.length  /  3;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	30	None	add
60	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
61	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
62	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
63	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
64	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
65	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
66	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a[0],  b[1]  +  1);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  throw  new  DimensionMismatchException(a[0],  b[1]  +  1);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a[0],  b[1]  +  1);	  throw    new    DimensionMismatchException(a[0],    b[1]);    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)	11	None	replace
67	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a[0],  b[1],  a.length);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  throw  new  DimensionMismatchException(a[0],  b[1],  a.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a[0],  b[1],  a.length);	  throw    new    DimensionMismatchException(a[0],    b[1]);    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double,int)	11	None	replace
68	[BUG]  [BUGGY]  final  int  lenSum  =  Math.max(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  lenSum  =  Math.max(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  lenSum  =  Math.max(a.length,  b.length);	  final    int    aLowSum    =    Math.max(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	24	None	replace
69	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a,    b.length    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	5	None	replace
70	[BUG]  [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a,    b.length    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	5	None	replace
71	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]          DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  len  =  a.length  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	int  len  =  a.length  +  1;	  final    int    len    =    a.length    +    1;    int    len    =    a.length    +    1;    	compilable	  [FE]  DimensionMismatchException  	39	4	replace
72	[BUG]  [BUGGY]  int  len  =  a.length  +  1;  [FE]  DimensionMismatchException  [FE]          DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  len  =  a.length  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	int  len  =  a.length  +  1;	  final    int    len    =    a.length    +    1;    int    len    =    a.length    +    1;    	compilable	  [FE]  DimensionMismatchException  	39	4	replace
73	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  b.length  -  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  b.length  -  2;	  final    int    len    =    b.length    -    1;    	compilable	  [FE]  DimensionMismatchException  	21	4	replace
74	[BUG]  [BUGGY]  final  int  len  =  b.length  -  2;  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  b.length  -  2;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  b.length  -  2;	  final    int    len    =    b.length    -    1;    	compilable	  [FE]  DimensionMismatchException  	21	4	replace
75	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a.length,  b.length  +  1);  [CE]  cannot  find  symbol  len  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  throw  new  DimensionMismatchException(a.length,  b.length  +  1);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a.length,  b.length  +  1);	  throw    new    DimensionMismatchException(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	1	None	replace
76	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]          DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  len  =  a.length  -  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	int  len  =  a.length  -  1;	  final    int    len    =    a.length    -    1;    int    len    =    a.length    -    1;    	compilable	  [FE]  DimensionMismatchException  	19	4	replace
77	[BUG]  [BUGGY]  int  len  =  a.length  -  1;  [FE]  DimensionMismatchException  [FE]          DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  len  =  a.length  -  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	int  len  =  a.length  -  1;	  final    int    len    =    a.length    -    1;    int    len    =    a.length    -    1;    	compilable	  [FE]  DimensionMismatchException  	19	4	replace
78	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a.length);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  throw  new  DimensionMismatchException(a.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a.length);	          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int)	7	None	replace
79	[BUG]  [BUGGY]  int  aLowSum  =  Math.max(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  aLowSum  =  Math.max(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	int  aLowSum  =  Math.max(a.length,  b.length);	          final    int    aLowSum    =    Math.min(a.length,    b.length);    final    int    aLowSum    =    Math.max(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	14	None	replace
80	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  len  =  b.length;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	int  len  =  b.length;	  final    int    len    =    b.length;    int    len    =    b.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	1	replace
81	[BUG]  [BUGGY]  int  len  =  b.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  len  =  b.length;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	int  len  =  b.length;	  final    int    len    =    b.length;    int    len    =    b.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	1	replace
82	[BUG]  [BUGGY]  final  int  len  =  a.length;  int  len  =  b.length;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length;  int  len  =  b.length;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length;  int  len  =  b.length;	  final    int    len    =    b.length;    int    len    =    b.length;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	44	None	replace
83	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	26	1	add
84	[BUG]  [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	26	1	add
85	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	26	1	add
86	[BUG]  [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	26	1	add
87	[BUG]  [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  =  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  illegal  start  of  expression  [FE]        DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  =  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  =  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
88	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1  +  1;  final  int  len  =  a.length  -  1  +  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  -  1  +  1;  final  int  len  =  a.length  -  1  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    1    +    1;    final  int  len  =  a.length  -  1  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	48	None	add
89	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1  +  1;  int  len  =  a.length  -  1  +  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  -  1  +  1;  int  len  =  a.length  -  1  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    1    +    1;    int  len  =  a.length  -  1  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	48	None	add
90	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1  +  1;  final  int  len  =  a.length  +  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  -  1  +  1;  final  int  len  =  a.length  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    1    +    1;    final  int  len  =  a.length  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	48	None	add
91	[BUG]  [BUGGY]  int  aLowSum  =  Math.min(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  aLowSum  =  Math.min(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	int  aLowSum  =  Math.min(a.length,  b.length);	          final    int    aLowSum    =    Math.min(a.length,    b.length);    int    aLowSum    =    Math.min(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	15	None	replace
92	[BUG]  [BUGGY]  threadException(a[0],  b[1]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  threadException(a[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	threadException(a[0],  b[1]);	  aughtException(a[0],    b[1]);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
93	[BUG]  [BUGGY]  void  exception(a[0],  b[1]);  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  void  exception(a[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	void  exception(a[0],  b[1]);	  aughtException(a[0],    b[1]);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
94	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1;  final  int  len  =  b.length  -  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  b.length  -  1;  final  int  len  =  b.length  -  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    b.length    -    1;    final  int  len  =  b.length  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	20	None	add
95	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1;  int  len  =  b.length  -  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  b.length  -  1;  int  len  =  b.length  -  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    b.length    -    1;    int  len  =  b.length  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	20	None	add
96	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  b.length  -  1  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  b.length  -  1  +  1;	  final    int    len    =    b.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
97	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  b.length  -  1  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  b.length  -  1  +  1;	  final    int    len    =    b.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
98	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  <  2)  {  throw  new  DimensionMismatchException(a  [CE]  ')'  expected  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  <  2)  {  throw  new  DimensionMismatchException(a  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  <  2)  {  throw  new  DimensionMismatchException(a	  	non-compiled	[CE]  ')'  expected	8	None	add
99	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
100	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
101	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
102	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
103	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  <  1)  {  throw  new  DimensionMismatchException(a  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  <  1)  {  throw  new  DimensionMismatchException(a  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  <  1)  {  throw  new  DimensionMismatchException(a	  	non-compiled	[CE]  ')'  expected	6	None	add
104	[BUG]  [BUGGY]  DimensionMismatchException  <  N>  a  =  new  DimensionMismatchException(a.length,  b.length);  [CE]  cannot  find  symbol  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  DimensionMismatchException  <  N>  a  =  new  DimensionMismatchException(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  <  N>  a  =  new  DimensionMismatchException(a.length,  b.length);	          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
105	[BUG]  [BUGGY]  DimensionMismatchException  <  N>  a  =  new  DimensionMismatchException(a.length);  [CE]  cannot  find  symbol  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  DimensionMismatchException  <  N>  a  =  new  DimensionMismatchException(a.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  <  N>  a  =  new  DimensionMismatchException(a.length);	          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
106	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	26	1	add
107	[BUG]  [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	26	1	add
108	[BUG]  [BUGGY]  final  double  aLowSum  =  Math.max(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  double  aLowSum  =  Math.max(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  double  aLowSum  =  Math.max(a.length,  b.length);	          final    int    aLowSum    =    Math.min(a.length,    b.length);    final    double    aLowSum    =    Math.min(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	51	None	replace
109	[BUG]  [BUGGY]  MutableArrays.throwException(a[0],  b[1]);  [CE]  cannot  find  symbol  MutableArrays  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  MutableArrays.throwException(a[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	MutableArrays.throwException(a[0],  b[1]);	  aughtException(a[0],    b[1]);    	non-compiled	[CE]  cannot  find  symbol  MutableArrays	43	None	replace
110	[BUG]  [BUGGY]  MutableMismatchException(a[0],  b[1]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  MutableMismatchException(a[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	MutableMismatchException(a[0],  b[1]);	  aughtException(a[0],    b[1]);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
111	[BUG]  [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length  +  1);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length  +  1);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  a  =  new  DimensionMismatchException(a.length  +  1);	  DimensionMismatchException    a    =    new    DimensionMismatchException(a.length);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	47	None	replace
112	[BUG]  [BUGGY]  if(b!=  null)  {  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(b!=  null)  {  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(b!=  null)  {  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  cannot  find  symbol  len  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  len	7	None	replace
114	[BUG]  [BUGGY]  if(a.length  <  0)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  cannot  find  symbol  len  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(a.length  <  0)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(a.length  <  0)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  len	9	None	replace
115	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
116	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
117	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
118	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
119	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
120	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
121	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b!=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  incomparable  types:  double[]  and  int  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b!=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b!=  a.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	non-compiled	[CE]  incomparable  types:  double[]  and  int	34	None	add
122	[BUG]  [BUGGY]  n  =  a.length;  [CE]  cannot  find  symbol  n  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  n  =  a.length;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	n  =  a.length;	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  cannot  find  symbol  n	54	None	replace
123	[BUG]  [BUGGY]  dimensions.add(new  DimensionMismatchException(a.length),  b.length);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int)  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  dimensions.add(new  DimensionMismatchException(a.length),  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	dimensions.add(new  DimensionMismatchException(a.length),  b.length);	          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int)	27	None	replace
124	[BUG]  [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length  -  1);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length  -  1);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length  -  1);	  DimensionMismatchException    a    =    new    DimensionMismatchException(a.length,    b.length);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	46	None	replace
125	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  [CE]  cannot  find  symbol  len  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  cannot  find  symbol  len	53	None	replace
126	[BUG]  [BUGGY]  enableMismatchException(a[0],  b[1]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  enableMismatchException(a[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	enableMismatchException(a[0],  b[1]);	  allowMismatchException(a[0],    b[1]);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
127	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a,  b[0],  b[1]);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double[],double,double)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  throw  new  DimensionMismatchException(a,  b[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a,  b[0],  b[1]);	  throw    new    DimensionMismatchException(a[0],    b[1]);    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double[],double,double)	11	None	replace
128	[BUG]  [BUGGY]  final  int  bLowSum  =  Math.max(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  bLowSum  =  Math.max(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  bLowSum  =  Math.max(a.length,  b.length);	          final    int    aLowSum    =    Math.min(a.length,    b.length);    final    int    aLowSum    =    Math.max(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	14	None	replace
129	[BUG]  [BUGGY]  if(a.length!=  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  cannot  find  symbol  len  [FE]            DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(a.length!=  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(a.length!=  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b[length]);    }    	non-compiled	[CE]  cannot  find  symbol  len	29	None	replace
130	[BUG]  [BUGGY]  final  int  aLowSum  =  Math.min(b.length,  a.length);  [CE]  cannot  find  symbol  len  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  aLowSum  =  Math.min(b.length,  a.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  aLowSum  =  Math.min(b.length,  a.length);	          final    int    aLowSum    =    Math.min(a.length,    b.length);    final    int    aLowSum    =    Math.min(b.length,    a.length);    	non-compiled	[CE]  cannot  find  symbol  len	52	None	replace
131	[BUG]  [BUGGY]  final  double  lenSum  =  Math.min(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  double  lenSum  =  Math.min(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  double  lenSum  =  Math.min(a.length,  b.length);	  final    double    aLowSum    =    Math.min(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	25	None	replace
132	[BUG]  [BUGGY]  if(b!=  null)  {  final  int  aLowSum  =  Math.min(a.length,  b.length);  int  aLowSum  =  Math.min(a.length,  b.length);  }  [CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(b!=  null)  {  final  int  aLowSum  =  Math.min(a.length,  b.length);  int  aLowSum  =  Math.min(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(b!=  null)  {  final  int  aLowSum  =  Math.min(a.length,  b.length);  int  aLowSum  =  Math.min(a.length,  b.length);  }	          final    int    aLowSum    =    Math.min(a.length,    b.length);    int    aLowSum    =    Math.min(a.length,    b.length);    	non-compiled	[CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])	15	None	replace
133	[BUG]  [BUGGY]  if(b.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  cannot  find  symbol  len  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(b.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(b.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    ArrayIndexOutOfBoundsException    a    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  cannot  find  symbol  len	10	None	replace
134	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a,  b[0],  a[1]);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double[],double,double)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  throw  new  DimensionMismatchException(a,  b[0],  a[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a,  b[0],  a[1]);	  throw    new    DimensionMismatchException(a[0],    b[1]);    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double[],double,double)	11	None	replace
135	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
136	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	36	4	add
137	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  Math.max(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  Math.max(a.length,  b.length);	  final    int    aLowSum    =    Math.max(a.length,    b.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
138	[BUG]  [BUGGY]  final  int  len  =  Math.max(a.length,  b.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  Math.max(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  Math.max(a.length,  b.length);	  final    int    aLowSum    =    Math.max(a.length,    b.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
139	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
140	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	34	4	add
141	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  incomparable  types:  double[]  and  int  [FE]      DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	non-compiled	[CE]  incomparable  types:  double[]  and  int	34	None	add
142	[BUG]  [BUGGY]  Context.report(a[0],  b[1]);  [CE]  cannot  find  symbol  Context  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  Context.report(a[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	Context.report(a[0],  b[1]);	  aughtException(a[0],    b[1]);    	non-compiled	[CE]  cannot  find  symbol  Context	43	None	replace
143	[BUG]  [BUGGY]  Context.checkState(a[0],  b[1]);  [CE]  cannot  find  symbol  Context  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  Context.checkState(a[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	Context.checkState(a[0],  b[1]);	  aughtException(a[0],    b[1]);    	non-compiled	[CE]  cannot  find  symbol  Context	43	None	replace
144	[BUG]  [BUGGY]  final  int  prodLowSum  =  Math.max(a.length,  prodHigh);  [CE]  cannot  find  symbol  prodHigh  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  prodLowSum  =  Math.max(a.length,  prodHigh);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  prodLowSum  =  Math.max(a.length,  prodHigh);	  final    int    aLowSum    =    Math.max(a.length,    prodLowSum);    	non-compiled	[CE]  cannot  find  symbol  prodHigh	17	None	replace
145	[BUG]  [BUGGY]  if(b.length  >  0)  {  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  }  [CE]  cannot  find  symbol  len  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(b.length  >  0)  {  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  }  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(b.length  >  0)  {  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  }	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  cannot  find  symbol  len	54	None	replace
146	[BUG]  [BUGGY]  allowMismatchException(a,  b[0],  b[1]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  allowMismatchException(a,  b[0],  b[1]);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	allowMismatchException(a,  b[0],  b[1]);	  allowMismatchException(a[0],    b[1]);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
147	[BUG]  [BUGGY]  final  double  len  =  Math.min(a.length,  b.length);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  double  len  =  Math.min(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  double  len  =  Math.min(a.length,  b.length);	  final    double    aLowSum    =    Math.min(a.length,    b.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,int)	25	None	replace
148	[BUG]  [BUGGY]  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a,    b.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	4	None	replace
149	[BUG]  [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        1)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	add
150	[BUG]  [BUGGY]  if(b!=  null)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  cannot  find  symbol  len  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(b!=  null)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(b!=  null)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  len	35	None	replace
151	[BUG]  [BUGGY]  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	int  len  =  a.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a,    b.length    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	5	None	replace
152	[BUG]  [BUGGY]  if(a.length  <  =  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  illegal  start  of  expression  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  if(a.length  <  =  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(a.length  <  =  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    >=    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
153	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
154	[BUG]  [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        ==        b.length)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(b.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	32	4	add
155	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	26	1	add
156	[BUG]  [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]          if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	                if(a.length        <        2)        {        throw        new        DimensionMismatchException(a.length,        b.length);        }        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	26	1	add
157	[BUG]  [BUGGY]  allowMismatchException(b.length,  a.length);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  allowMismatchException(b.length,  a.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	allowMismatchException(b.length,  a.length);	  allowMismatchException(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
158	[BUG]  [BUGGY]  DimensionMismatchException  b  =  new  DimensionMismatchException(a.length,  b.length);  [CE]  variable  b  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    DimensionMismatchException    [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  DimensionMismatchException  b  =  new  DimensionMismatchException(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  b  =  new  DimensionMismatchException(a.length,  b.length);	          if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  variable  b  is  already  defined  in  method  linearCombination(double[],double[])	33	None	replace
159	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a,  b.length);	  final    int    len    =    b.length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(a.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	53	None	replace
160	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1;  final  int  a.length  =  a.length  +  1;  [CE]  ';'  expected  [FE]        DimensionMismatchException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  len  =  a.length  -  1;  final  int  a.length  =  a.length  +  1;  [BUGGY]      if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  -  1;  final  int  a.length  =  a.length  +  1;	  final    int    len    =    a.length    +    1;    final    int    a.length    =    a.length    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
161	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a,  b.length);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double[],int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  throw  new  DimensionMismatchException(a,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a,  b.length);	  throw    new    DimensionMismatchException(a.length,    b.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double[],int)	1	None	replace
162	[BUG]  [BUGGY]  final  int  prodLowSum  =  Math.min(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {      [BUGGY]  final  int  prodLowSum  =  Math.min(a.length,  b.length);  [BUGGY]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  prodLowSum  =  Math.min(a.length,  b.length);	  final    int    aLowSum    =    Math.min(a.length,    prodLowSum);    	non-compiled	[CE]  cannot  find  symbol  len	16	None	replace
