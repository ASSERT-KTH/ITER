bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  prodLowSum  =  b.length();  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodLowSum  =  b.length();  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodLowSum  =  b.length();	      	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	2	None	replace
2	[BUG]  [BUGGY]  double  prodLowSum  =  prodHighCur  +  prodLowSum;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodLowSum  =  prodHighCur  +  prodLowSum;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodLowSum  =  prodHighCur  +  prodLowSum;	      	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	2	None	replace
3	[BUG]  [BUGGY]  double  prodLowSum  =  prodLow  +  prodHighNext;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodLowSum  =  prodLow  +  prodHighNext;  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodLowSum  =  prodLow  +  prodHighNext;	      double    prodLowSum    =    prodHighCur    +    prodHighNext;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	5	None	replace
4	[BUG]  [BUGGY]  double  prodHighCur  =  prodHighPrev  +  prodHighNext;  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighCur  =  prodHighPrev  +  prodHighNext;  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighCur  =  prodHighPrev  +  prodHighNext;	      double    prodHighCur    =    prodHighCur    +    prodHighNext;    	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	7	None	replace
5	[BUG]  [BUGGY]  double  prodHighCur  =  prodHighNext  +  prodHighCur;  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighCur  =  prodHighNext  +  prodHighCur;  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighCur  =  prodHighNext  +  prodHighCur;	      double    prodHighCur    =    prodHighCur    +    prodHighNext;    	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	7	None	replace
6	[BUG]  [BUGGY]  double  prodHighCur  =  prodLow[1];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighCur  =  prodLow[1];  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighCur  =  prodLow[1];	      double    prodHighCur    =    prodHigh[1];    	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	3	None	replace
7	[BUG]  [BUGGY]  double  prodLowSum  =  prodHighCur[1];  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodLowSum  =  prodHighCur[1];  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodLowSum  =  prodHighCur[1];	      double    prodLowSum    =    prodHigh[1];    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	4	None	replace
8	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  1;  double  prodHighNext  =  prodHigh[1]  -  1;  [CE]  variable  prodHighNext  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  1;  double  prodHighNext  =  prodHigh[1]  -  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double    prodHighNext    =    prodHigh[1]    -    1;    double  prodHighNext  =  prodHigh[1]  -  1;	  	non-compiled	[CE]  variable  prodHighNext  is  already  defined  in  method  linearCombination(double[],double[])	8	None	add
9	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  1;  Double  prodHighNext  =  prodHigh[1]  -  1;  [CE]  variable  prodHighNext  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  1;  Double  prodHighNext  =  prodHigh[1]  -  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double    prodHighNext    =    prodHigh[1]    -    1;    Double  prodHighNext  =  prodHigh[1]  -  1;	  	non-compiled	[CE]  variable  prodHighNext  is  already  defined  in  method  linearCombination(double[],double[])	8	None	add
10	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  1;  final  double  prodHighNext  =  prodHigh[1]  -  1;  [CE]  variable  prodHighNext  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  1;  final  double  prodHighNext  =  prodHigh[1]  -  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double    prodHighNext    =    prodHigh[1]    -    1;    final  double  prodHighNext  =  prodHigh[1]  -  1;	  	non-compiled	[CE]  variable  prodHighNext  is  already  defined  in  method  linearCombination(double[],double[])	8	None	add
11	[BUG]  [BUGGY]  double  prodHighNext  =  prodHighCur[1]  -  1;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHighCur[1]  -  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodHighCur[1]  -  1;	  double    prodHighNext    =    prodHigh[1]    -    1;    	non-compiled	[CE]  array  required,  but  double  found	9	None	replace
12	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  (((prodHigh[0]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  cannot  find  symbol  aHigh  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  (((prodHigh[0]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodHigh[1]  -  (((prodHigh[0]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	      double    prodHighNext    =    prodHigh[1]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  cannot  find  symbol  aHigh	10	None	replace
13	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  (((prodHigh[0]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  cannot  find  symbol  aHigh  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  (((prodHigh[0]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodHigh[1]  -  (((prodHigh[0]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	      double    prodHighNext    =    prodHigh[1]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  cannot  find  symbol  aHigh	11	None	replace
14	[BUG]  [BUGGY]  double  prodLowSum  =  prodHighCur  +  prodLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodLowSum  =  prodHighCur  +  prodLow;  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodLowSum  =  prodHighCur  +  prodLow;	      double    prodLowSum    =    prodHighCur    +    prodHighNext;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	5	None	replace
15	[BUG]  [BUGGY]  double  sPrime  =  prodLowSum  +  prodHighNext;  [CE]  cannot  find  symbol  prodHighNext  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  sPrime  =  prodLowSum  +  prodHighNext;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  sPrime  =  prodLowSum  +  prodHighNext;	      	non-compiled	[CE]  cannot  find  symbol  prodHighNext	2	None	replace
16	[BUG]  [BUGGY]  double  prodHighNext  =  prodLowSum  +  prodHighNext;  [CE]  variable  prodHighNext  might  not  have  been  initialized  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodLowSum  +  prodHighNext;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodLowSum  +  prodHighNext;	      	non-compiled	[CE]  variable  prodHighNext  might  not  have  been  initialized	2	None	replace
17	[BUG]  [BUGGY]  double  prodHighCur  =  prodLow  +  prodHighNext;  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighCur  =  prodLow  +  prodHighNext;  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighCur  =  prodLow  +  prodHighNext;	      double    prodHighCur    =    prodHighCur    +    prodHighNext;    	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	7	None	replace
18	[BUG]  [BUGGY]  double  prodHighNext  =  prodHighCur[1]  +  bLow;  [CE]  array  required,  but  double  found  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHighCur[1]  +  bLow;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodHighCur[1]  +  bLow;	  double    prodHighNext    =    prodHighCur[1];    	non-compiled	[CE]  array  required,  but  double  found	1	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHighCur  -  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	add	double  prodHighNext  =  prodHighCur  -  1;	  double    prodHighNext    =    prodHigh[1]    -    1;    	compilable	  [FE]  AssertionError  	9	4	replace
20	[BUG]  [BUGGY]  double  prodHighNext  =  prodHighCur  -  1;  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHighCur  -  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodHighCur  -  1;	  double    prodHighNext    =    prodHigh[1]    -    1;    	compilable	  [FE]  AssertionError  	9	4	replace
21	[BUG]  [BUGGY]  double  prodHighNext  =  prodLowSum[1];  [CE]  array  required,  but  double  found  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodLowSum[1];  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodLowSum[1];	  double    prodHighNext    =    prodLow[1];    	non-compiled	[CE]  array  required,  but  double  found	6	None	replace
22	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  1;  double  prodHighNext  =  prodHigh[2]  -  1;  [CE]  variable  prodHighNext  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  1;  double  prodHighNext  =  prodHigh[2]  -  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double    prodHighNext    =    prodHigh[1]    -    1;    double  prodHighNext  =  prodHigh[2]  -  1;	  	non-compiled	[CE]  variable  prodHighNext  is  already  defined  in  method  linearCombination(double[],double[])	8	None	add
23	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  result;  [CE]  cannot  find  symbol  result  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  -  result;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodHigh[1]  -  result;	      	non-compiled	[CE]  cannot  find  symbol  result	2	None	replace
24	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  *  bLow;  [CE]  cannot  find  symbol  bLow  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  *  bLow;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodHigh[1]  *  bLow;	      	non-compiled	[CE]  cannot  find  symbol  bLow	2	None	replace
25	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  /  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	add	double  prodHighNext  =  prodHigh[1]  /  1;	  double    prodHighNext    =    prodHigh[1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
26	[BUG]  [BUGGY]  double  prodHighNext  =  prodHigh[1]  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighNext  =  prodHigh[1]  /  1;  [BUGGY]    double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighNext  =  prodHigh[1]  /  1;	  double    prodHighNext    =    prodHigh[1]    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
27	[BUG]  [BUGGY]  double  prodHighCur  =  bHigh  +  prodHighNext;  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighCur  =  bHigh  +  prodHighNext;  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighCur  =  bHigh  +  prodHighNext;	      double    prodHighCur    =    prodHighCur    +    prodHighNext;    	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	7	None	replace
28	[BUG]  [BUGGY]  double  prodLowSum  =  prodHighCur  +  bHigh;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodLowSum  =  prodHighCur  +  bHigh;  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodLowSum  =  prodHighCur  +  bHigh;	      double    prodLowSum    =    prodHighCur    +    prodHighNext;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	5	None	replace
29	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh[1];  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodLowSum  =  bHigh[1];  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodLowSum  =  bHigh[1];	      double    prodLowSum    =    prodHigh[1];    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	4	None	replace
30	[BUG]  [BUGGY]  double  prodHighCur  =  bHigh[1];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];    [BUGGY]  double  prodHighCur  =  bHigh[1];  [BUGGY]    double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  sLowSum  +=  (prodHighNext  -  (sHighCur  -  sPrime))  +  (sHighPrev  -  sPrime);  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	846	846	1	replace	double  prodHighCur  =  bHigh[1];	      double    prodHighCur    =    prodHigh[1];    	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	3	None	replace
