bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        ai        *        bHigh;        prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
2	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
3	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  ProdHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  [CE]  cannot  find  symbol  ProdHigh  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  ProdHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        prodHigh[i]    =    ai    *    bHigh;    ProdHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;	  	non-compiled	[CE]  cannot  find  symbol  ProdHigh	10	None	add
4	[BUG]  [BUGGY]  ProdHigh[i]  =  ai  *  bHigh;  [CE]  cannot  find  symbol  ProdHigh  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  ProdHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	ProdHigh[i]  =  ai  *  bHigh;	  prodHigh[i]    =    ai    *    bHigh;    ProdHigh[i]    =    ai    *    bHigh;    	non-compiled	[CE]  cannot  find  symbol  ProdHigh	12	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  1)  {  prodLowSum  +=  bi;  }  if(bHigh  >  1)  {  prodLowSum  +=  bi;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	if(bHigh    >    1)    {    prodLowSum    +=    bi;    }    if(bHigh  >  1)  {  prodLowSum  +=  bi;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	4	add
6	[BUG]  [BUGGY]  if(bHigh  >  1)  {  prodLowSum  +=  bi;  }  if(bHigh  >  1)  {  prodLowSum  +=  bi;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  1)  {  prodLowSum  +=  bi;  }  if(bHigh  >  1)  {  prodLowSum  +=  bi;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh    >    1)    {    prodLowSum    +=    bi;    }    if(bHigh  >  1)  {  prodLowSum  +=  bi;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	4	add
7	[BUG]  [BUGGY]  if(bHigh  >  1)  {  prodLowSum  +=  bi;  }  If(bHigh  >  1)  {  prodLowSum  +=  bi;  }  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  1)  {  prodLowSum  +=  bi;  }  If(bHigh  >  1)  {  prodLowSum  +=  bi;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh    >    1)    {    prodLowSum    +=    bi;    }    If(bHigh  >  1)  {  prodLowSum  +=  bi;  }	  	non-compiled	[CE]  ';'  expected	42	None	add
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  cb  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  cb  *  bHigh;	  prodHigh[i]    =    bi    *    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	replace
9	[BUG]  [BUGGY]  prodHigh[i]  =  cb  *  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  cb  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  cb  *  bHigh;	  prodHigh[i]    =    bi    *    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	replace
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  cb  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  cb  *  bLow;	  prodHigh[i]    =    bHigh    *    bLow;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	3	replace
11	[BUG]  [BUGGY]  prodHigh[i]  =  cb  *  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  cb  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  cb  *  bLow;	  prodHigh[i]    =    bHigh    *    bLow;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	3	replace
12	[BUG]  [BUGGY]  double  prodLowSum  -=  bHighCur;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  -=  bHighCur;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  -=  bHighCur;	  double    prodLowSum    -=    bHigh;    	non-compiled	[CE]  ';'  expected	44	None	replace
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  }	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    ai    *    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	2	replace
14	[BUG]  [BUGGY]  if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  }	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    ai    *    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	2	replace
15	[BUG]  [BUGGY]  double  prodLowSum  +=  bi.length  -  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  +=  bi.length  -  1;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  +=  bi.length  -  1;	  double    prodLowSum    +=    bi.length;    	non-compiled	[CE]  ';'  expected	27	None	replace
16	[BUG]  [BUGGY]  double  prodLowSum  =  cb  *  ai;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  cb  *  ai;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  cb  *  ai;	          double    prodLowSum    =    ai    *    cb;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  prodHigh[i]  =  bHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bHigh    *    bLow;    prodHigh[i]  =  bHigh  *  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
18	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  prodHigh[i]  =  bHigh  *  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  prodHigh[i]  =  bHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    bLow;    prodHigh[i]  =  bHigh  *  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
19	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  ProdHigh[i]  =  bHigh  *  bLow;  [CE]  cannot  find  symbol  ProdHigh  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  ProdHigh[i]  =  bHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    bLow;    ProdHigh[i]  =  bHigh  *  bLow;	  	non-compiled	[CE]  cannot  find  symbol  ProdHigh	35	None	add
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        bHigh        *        bi;        prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
21	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
22	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  ProdHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [CE]  cannot  find  symbol  ProdHigh  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  ProdHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        prodHigh[i]    =    bHigh    *    bi;    ProdHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;	  	non-compiled	[CE]  cannot  find  symbol  ProdHigh	23	None	add
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bLow  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  bLow  *  bi;	  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	3	replace
24	[BUG]  [BUGGY]  prodHigh[i]  =  bLow  *  bi;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bLow  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  bLow  *  bi;	  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	3	replace
25	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    aHigh    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	48	None	replace
26	[BUG]  [BUGGY]  final  double  prodLowSum  =  aHigh[i]  -  (((aHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  prodLowSum  =  aHigh[i]  -  (((aHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  prodLowSum  =  aHigh[i]  -  (((aHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow;	          final    double    prodLowSum    =    aHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aLow    *    bHigh)    -    aHigh    *    bLow;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	9	None	replace
27	[BUG]  [BUGGY]  ProdHigh[i]  =  bHigh  *  bi;  [CE]  cannot  find  symbol  ProdHigh  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  ProdHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	ProdHigh[i]  =  bHigh  *  bi;	  prodHigh[i]    =    bHigh    *    bi;    ProdHigh[i]    =    bHigh    *    bi;    	non-compiled	[CE]  cannot  find  symbol  ProdHigh	25	None	replace
28	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  ';'  expected	22	None	replace
29	[BUG]  [BUGGY]  bHigh[i]  =  bHigh  *  bi;  [CE]  array  required,  but  double  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  bHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	bHigh[i]  =  bHigh  *  bi;	  prodHigh[i]    =    bHigh    *    bi;    bHigh[i]    =    bHigh    *    bi;    	non-compiled	[CE]  array  required,  but  double  found	45	None	replace
30	[BUG]  [BUGGY]  bHigh[i]  =  bi  *  bHigh;  [CE]  array  required,  but  double  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  bHigh[i]  =  bi  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	bHigh[i]  =  bi  *  bHigh;	  prodHigh[i]    =    bHigh    *    bi;    bHigh[i]    =    bHigh    *    bi;    	non-compiled	[CE]  array  required,  but  double  found	45	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodLowSum  +=  bHigh;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodLowSum  +=  bHigh;	  prodLowSum    +=    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	4	replace
32	[BUG]  [BUGGY]  prodLowSum  +=  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodLowSum  +=  bHigh;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodLowSum  +=  bHigh;	  prodLowSum    +=    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	4	replace
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodLowSum  +=  bLow;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodLowSum  +=  bLow;	  prodLowSum    +=    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
34	[BUG]  [BUGGY]  prodLowSum  +=  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodLowSum  +=  bLow;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodLowSum  +=  bLow;	  prodLowSum    +=    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
35	[BUG]  [BUGGY]  final  double  bHigh  =  bi  -  (cb  -  bi);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  bHigh  =  bi  -  (cb  -  bi);  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  bHigh  =  bi  -  (cb  -  bi);	  final    double    bHigh    =    bi    -    cb;    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	20	None	replace
36	[BUG]  [BUGGY]  final  double  bHigh  =  cb  -  bi;  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  bHigh  =  cb  -  bi;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  bHigh  =  cb  -  bi;	  final    double    bHigh    =    bi    -    cb;    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	20	None	replace
37	[BUG]  [BUGGY]  double  prodLowSum  =  ai  *  bHigh  -(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bi);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  ai  *  bHigh  -(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bi);  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  ai  *  bHigh  -(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bi);	  double    prodLowSum    =    ai    *    bHigh    -(((prodHigh[i]    -    aHigh    *    bHigh))-    aLow    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	15	None	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	if(bHigh    >    0)    {    prodLowSum    +=    bHigh;    }    if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	4	add
39	[BUG]  [BUGGY]  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh    >    0)    {    prodLowSum    +=    bHigh;    }    if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	4	add
40	[BUG]  [BUGGY]  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  If(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  If(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh    >    0)    {    prodLowSum    +=    bHigh;    }    If(bHigh  >  0)  {  prodLowSum  +=  bHigh;  }	  	non-compiled	[CE]  ';'  expected	53	None	add
41	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  prodHigh[i]  =  bHigh  *  cb;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bHigh    *    cb;    prodHigh[i]  =  bHigh  *  cb;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
42	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  prodHigh[i]  =  bHigh  *  cb;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  prodHigh[i]  =  bHigh  *  cb;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    cb;    prodHigh[i]  =  bHigh  *  cb;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
43	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  ProdHigh[i]  =  bHigh  *  cb;  [CE]  cannot  find  symbol  ProdHigh  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  ProdHigh[i]  =  bHigh  *  cb;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    cb;    ProdHigh[i]  =  bHigh  *  cb;	  	non-compiled	[CE]  cannot  find  symbol  ProdHigh	16	None	add
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodLowSum  +=  bi;  prodLowSum  +=  bi;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodLowSum    +=    bi;    prodLowSum  +=  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
45	[BUG]  [BUGGY]  prodLowSum  +=  bi;  prodLowSum  +=  bi;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodLowSum  +=  bi;  prodLowSum  +=  bi;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodLowSum    +=    bi;    prodLowSum  +=  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
46	[BUG]  [BUGGY]  prodLowSum  +=  bi;  ProdLowSum  +=  bi;  [CE]  cannot  find  symbol  ProdLowSum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodLowSum  +=  bi;  ProdLowSum  +=  bi;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodLowSum    +=    bi;    ProdLowSum  +=  bi;	  	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	13	None	add
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  prodHigh[i]  =  bi  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bi    *    bHigh;    prodHigh[i]  =  bi  *  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
48	[BUG]  [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  prodHigh[i]  =  bi  *  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  prodHigh[i]  =  bi  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bi    *    bHigh;    prodHigh[i]  =  bi  *  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
49	[BUG]  [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  ProdHigh[i]  =  bi  *  bHigh;  [CE]  cannot  find  symbol  ProdHigh  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  ProdHigh[i]  =  bi  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bi    *    bHigh;    ProdHigh[i]  =  bi  *  bHigh;	  	non-compiled	[CE]  cannot  find  symbol  ProdHigh	18	None	add
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  prodHigh[i]  =  bi  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bi    *    bHigh;    prodHigh[i]  =  bi  *  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
51	[BUG]  [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  prodHigh[i]  =  bi  *  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  prodHigh[i]  =  bi  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bi    *    bHigh;    prodHigh[i]  =  bi  *  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
52	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  bi;  prodHigh[i]  =  bHigh  /  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bHigh    /    bi;    prodHigh[i]  =  bHigh  /  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	add
53	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  /  bi;  prodHigh[i]  =  bHigh  /  bi;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  bi;  prodHigh[i]  =  bHigh  /  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    /    bi;    prodHigh[i]  =  bHigh  /  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	add
54	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  /  bi;  ProdHigh[i]  =  bHigh  /  bi;  [CE]  cannot  find  symbol  ProdHigh  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  bi;  ProdHigh[i]  =  bHigh  /  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    /    bi;    ProdHigh[i]  =  bHigh  /  bi;	  	non-compiled	[CE]  cannot  find  symbol  ProdHigh	37	None	add
55	[BUG]  [BUGGY]  double  prodLowSum  -=  bHigh.length  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  -=  bHigh.length  +  1;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  -=  bHigh.length  +  1;	  double    prodLowSum    -=    bHigh.length;    	non-compiled	[CE]  ';'  expected	52	None	replace
56	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  prodHigh[i]  =  bHigh  *  ai;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bHigh    *    ai;    prodHigh[i]  =  bHigh  *  ai;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
57	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  prodHigh[i]  =  bHigh  *  ai;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  prodHigh[i]  =  bHigh  *  ai;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    ai;    prodHigh[i]  =  bHigh  *  ai;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
58	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  ProdHigh[i]  =  bHigh  *  ai;  [CE]  cannot  find  symbol  ProdHigh  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  ProdHigh[i]  =  bHigh  *  ai;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    ai;    ProdHigh[i]  =  bHigh  *  ai;	  	non-compiled	[CE]  cannot  find  symbol  ProdHigh	5	None	add
59	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  bHigh  *  bHigh;	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	3	replace
60	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  bHigh  *  bHigh;	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	3	replace
61	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  double  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  double  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    double  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }	  	non-compiled	[CE]  ']'  expected	31	None	add
62	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  final  double  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  final  double  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    final  double  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }	  	non-compiled	[CE]  ']'  expected	31	None	add
63	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  final  double  prodHigh[i]  =  bHigh  *  bi;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  final  double  prodHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    final  double  prodHigh[i]  =  bHigh  *  bi;	  	non-compiled	[CE]  ']'  expected	31	None	add
64	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }	  	non-compiled	[CE]  ']'  expected	49	None	add
65	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  final  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  final  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    final  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }	  	non-compiled	[CE]  ']'  expected	49	None	add
66	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodHigh[i]  =  ai  *  bHigh;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    double  prodHigh[i]  =  ai  *  bHigh;	  	non-compiled	[CE]  ']'  expected	49	None	add
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  cb;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  bHigh  /  cb;	  prodHigh[i]    =    bHigh    /    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	3	replace
68	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  /  cb;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  cb;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  bHigh  /  cb;	  prodHigh[i]    =    bHigh    /    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	3	replace
69	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  /  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  bi  /  bHigh;	  prodHigh[i]    =    bHigh    /    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	3	replace
70	[BUG]  [BUGGY]  prodHigh[i]  =  bi  /  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  /  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  bi  /  bHigh;	  prodHigh[i]    =    bHigh    /    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	3	replace
71	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)    -    aLow    *    bHigh)    -    aHigh    *    bLow);    	non-compiled	[CE]  ';'  expected	46	None	replace
72	[BUG]  [BUGGY]  double  prodLowSum  =  (((aHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  (((aHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  (((aHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)    -    aLow    *    bHigh)    -    aHigh    *    bLow);    	non-compiled	[CE]  ';'  expected	46	None	replace
73	[BUG]  [BUGGY]  double  prodLowSum  +=  bHigh.length  *  bLowCur;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  +=  bHigh.length  *  bLowCur;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  +=  bHigh.length  *  bLowCur;	  double    prodLowSum    +=    bHigh.length    *    bLow;    	non-compiled	[CE]  ';'  expected	33	None	replace
74	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }	  	non-compiled	[CE]  ']'  expected	28	None	add
75	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
76	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  final  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  final  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    final  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }	  	non-compiled	[CE]  ']'  expected	28	None	add
77	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  *  cb;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  bHigh  *  cb;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  bHigh  *  cb;	  double    prodLowSum    =    bHigh    *    ai;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	30	None	replace
78	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    ai    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	21	None	replace
79	[BUG]  [BUGGY]  final  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);	  final    double    prodLowSum    =    aHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aLow    *    bHigh)    -    aHigh    *    bLow);    	non-compiled	[CE]  ';'  expected	8	None	replace
80	[BUG]  [BUGGY]  double  prodLowSum  =  bi  /  ai;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  bi  /  ai;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  bi  /  ai;	  double    prodLowSum    =    bi    *    ai;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	26	None	replace
81	[BUG]  [BUGGY]  final  double  bHigh  =  bi.length  -  bHigh;  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  bHigh  =  bi.length  -  bHigh;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  bHigh  =  bi.length  -  bHigh;	  final    double    bHigh    =    bHigh    -    bi;    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	47	None	replace
82	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	                if(bHigh        >        0)        {        prodLowSum        +=        bi;        }        if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	add
83	[BUG]  [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	                if(bHigh        >        0)        {        prodLowSum        +=        bi;        }        if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	add
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	                if(bHigh        >        0)        {        prodLowSum        +=        bi;        }        if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	add
85	[BUG]  [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	                if(bHigh        >        0)        {        prodLowSum        +=        bi;        }        if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	add
86	[BUG]  [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	                if(bHigh        >        0)        {        prodLowSum        +=        bi;        }        if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum	  	non-compiled	[CE]  ']'  expected	2	None	add
87	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  aHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        bHigh        *        bi;        prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  aHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
88	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  aHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  aHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  aHigh  *  bi;  prodHigh[i]  =  bHigh  *  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  if(prodHigh[i]  <  ai)  {  prodHigh[i]  =  bHigh  *  ai;  }  else  {  prodHigh[i]  =  bHigh  *  ai;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bHigh    *    ai;    if(prodHigh[i]  <  ai)  {  prodHigh[i]  =  bHigh  *  ai;  }  else  {  prodHigh[i]  =  bHigh  *  ai;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
90	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  if(prodHigh[i]  <  ai)  {  prodHigh[i]  =  bHigh  *  ai;  }  else  {  prodHigh[i]  =  bHigh  *  ai;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  if(prodHigh[i]  <  ai)  {  prodHigh[i]  =  bHigh  *  ai;  }  else  {  prodHigh[i]  =  bHigh  *  ai;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    ai;    if(prodHigh[i]  <  ai)  {  prodHigh[i]  =  bHigh  *  ai;  }  else  {  prodHigh[i]  =  bHigh  *  ai;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
91	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bLow;  }  else  {  prodHigh[i]  =  bHigh  *  bLow;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bHigh    *    bLow;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bLow;  }  else  {  prodHigh[i]  =  bHigh  *  bLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
92	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bLow;  }  else  {  prodHigh[i]  =  bHigh  *  bLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bLow;  }  else  {  prodHigh[i]  =  bHigh  *  bLow;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    bLow;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bLow;  }  else  {  prodHigh[i]  =  bHigh  *  bLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
93	[BUG]  [BUGGY]  double  prodLowSum  +=  aHigh.length  *  bLow;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  +=  aHigh.length  *  bLow;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  +=  aHigh.length  *  bLow;	  double    prodLowSum    +=    bHigh.length    *    bLow;    	non-compiled	[CE]  ';'  expected	33	None	replace
94	[BUG]  [BUGGY]  final  double  bHigh  =  bi  -  bLowSum;  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  bHigh  =  bi  -  bLowSum;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  bHigh  =  bi  -  bLowSum;	  final    double    bHigh    =    bi    -    bLow;    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	41	None	replace
95	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  cb;  }  else  {  prodHigh[i]  =  bHigh  *  cb;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bHigh    *    cb;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  cb;  }  else  {  prodHigh[i]  =  bHigh  *  cb;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
96	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  cb;  }  else  {  prodHigh[i]  =  bHigh  *  cb;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  cb;  }  else  {  prodHigh[i]  =  bHigh  *  cb;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    cb;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  cb;  }  else  {  prodHigh[i]  =  bHigh  *  cb;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
97	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	add
98	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	add
99	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	add
100	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	add
101	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len,  prodHighCur);  [CE]  cannot  find  symbol  prodHighCur  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len,  prodHighCur);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len,  prodHighCur);	  	non-compiled	[CE]  cannot  find  symbol  prodHighCur	49	None	add
102	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  if(prodHigh[i]  <  bi  *  bHigh)  {  prodHigh[i]  =  bi  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]    =    bi    *    bHigh;    if(prodHigh[i]  <  bi  *  bHigh)  {  prodHigh[i]  =  bi  *  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
103	[BUG]  [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  if(prodHigh[i]  <  bi  *  bHigh)  {  prodHigh[i]  =  bi  *  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  if(prodHigh[i]  <  bi  *  bHigh)  {  prodHigh[i]  =  bi  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bi    *    bHigh;    if(prodHigh[i]  <  bi  *  bHigh)  {  prodHigh[i]  =  bi  *  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
104	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  ai  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  ai  *  bLow;	  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]    =    ai    *    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
105	[BUG]  [BUGGY]  prodHigh[i]  =  ai  *  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  ai  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  ai  *  bLow;	  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]    =    ai    *    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
106	[BUG]  [BUGGY]  final  double  prodLowSum  =  aHigh[i]  -  (((bHigh[i]  -  aHigh  *  bHigh))-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  prodLowSum  =  aHigh[i]  -  (((bHigh[i]  -  aHigh  *  bHigh))-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  prodLowSum  =  aHigh[i]  -  (((bHigh[i]  -  aHigh  *  bHigh))-  aLow  *  bHigh)-  aHigh  *  bLow;	          final    double    prodLowSum    =    aHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aLow    *    bHigh)    -    aHigh    *    bLow;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	9	None	replace
107	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  *  bLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  bHigh  *  bLow;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  bHigh  *  bLow;	  double    prodLowSum    =    bHigh    *    ai;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	30	None	replace
108	[BUG]  [BUGGY]  final  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh))-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh))-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh))-  aLow  *  bHigh)-  aHigh  *  bLow);	  final    double    prodLowSum    =    aHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aLow    *    bHigh)    -    aHigh    *    bLow);    	non-compiled	[CE]  ';'  expected	8	None	replace
109	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        ai        *        bHigh;        prodHigh[i]    =    ai    *    bHigh;    if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
110	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        prodHigh[i]    =    ai    *    bHigh;    if(bHigh  >  0)  {  prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
111	[BUG]  [BUGGY]  final  double  prodLowSum  =  aHigh[i]  -  (((bHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  prodLowSum  =  aHigh[i]  -  (((bHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  prodLowSum  =  aHigh[i]  -  (((bHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  final    double    prodLowSum    =    aHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)    -    aLow    *    bHigh)    -    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	7	None	replace
112	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  bHigh  /  bLow;	  prodHigh[i]    =    bHigh    /    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	3	replace
113	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  /  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  bHigh  /  bLow;	  prodHigh[i]    =    bHigh    /    bi;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	3	replace
114	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);	  double    prodLowSum    =    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  ';'  expected	22	None	replace
115	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  ai;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  bLow  *  ai;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  bLow  *  ai;	  double    prodLowSum    =    ai    *    bLow;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	40	None	replace
116	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    double  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;	  	non-compiled	[CE]  ']'  expected	28	None	add
117	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
118	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
119	[BUG]  [BUGGY]  if(bLow  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bLow  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bLow  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    ai    *    bHigh;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
120	[BUG]  [BUGGY]  if(bLow  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bLow  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bLow  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    ai    *    bHigh;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
121	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  /  bi;  bHigh[i]  =  bHigh  /  bi;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  bi;  bHigh[i]  =  bHigh  /  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    /    bi;    bHigh[i]  =  bHigh  /  bi;	  	non-compiled	[CE]  array  required,  but  double  found	37	None	add
122	[BUG]  [BUGGY]  double  prodLowSum  =  (((aLow[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  (((aLow[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  (((aLow[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)    -    aLow    *    bHigh)    -    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	46	None	replace
123	[BUG]  [BUGGY]  double  prodLowSum  =  (((bHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  (((bHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  (((bHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)    -    aLow    *    bHigh)    -    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	46	None	replace
124	[BUG]  [BUGGY]  double  prodLowSum  -=  bHigh  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  -=  bHigh  +  1;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  -=  bHigh  +  1;	  double    prodLowSum    -=    bHigh;    	non-compiled	[CE]  ';'  expected	44	None	replace
125	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
126	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
127	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
128	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
129	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len,  prodLowSum);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len,  prodLowSum);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(len,  prodLowSum);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,double)	31	None	add
130	[BUG]  [BUGGY]  final  double  bHigh  =  bi  -  bu;  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  final  double  bHigh  =  bi  -  bu;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	final  double  bHigh  =  bi  -  bu;	  final    double    bHigh    =    bHigh    -    bi;    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	47	None	replace
131	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  aHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  aHigh  *  bLow;	  prodHigh[i]    =    bHigh    *    bLow;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	3	replace
132	[BUG]  [BUGGY]  prodHigh[i]  =  aHigh  *  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  aHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  aHigh  *  bLow;	  prodHigh[i]    =    bHigh    *    bLow;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	3	replace
133	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	                if(bHigh        >        0)        {        prodLowSum        +=        bi;        }        if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	add
134	[BUG]  [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	                if(bHigh        >        0)        {        prodLowSum        +=        bi;        }        if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	add
135	[BUG]  [BUGGY]  double  prodLowSum  +=  bHigh.length  *  cb;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  +=  bHigh.length  *  cb;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  +=  bHigh.length  *  cb;	  double    prodLowSum    +=    bHigh.length    *    bLow;    	non-compiled	[CE]  ';'  expected	33	None	replace
136	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aI  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aI  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aI  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)    -    aLow    *    bHigh)    -    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	46	None	replace
137	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh	  	non-compiled	[CE]  ';'  expected	28	None	add
138	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  ai  *  cb;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  ai  *  cb;	  prodHigh[i]    =    bHigh    *    cb;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	3	replace
139	[BUG]  [BUGGY]  prodHigh[i]  =  ai  *  cb;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  ai  *  cb;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  ai  *  cb;	  prodHigh[i]    =    bHigh    *    cb;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	3	replace
140	[BUG]  [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	                if(bHigh        >        0)        {        prodLowSum        +=        bi;        }        if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=  bi;  }  if(bHigh  >  0)  {  prodLowSum  +=	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
141	[BUG]  [BUGGY]  if(bHigh  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh  <  =  0)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
142	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  Bi;  [CE]  cannot  find  symbol  Bi  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  Bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  bHigh  *  Bi;	  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]    =    bHigh    *    bi;    	non-compiled	[CE]  cannot  find  symbol  Bi	24	None	replace
143	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  bHigh  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        ai        *        bHigh;        prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  bHigh  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
144	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  bHigh  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  ai  *  bHigh;  prodHigh[i]  =  bHigh  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        prodHigh[i]    =    ai    *    bHigh;    prodHigh[i]  =  bHigh  *  bHigh;  prodHigh[i]  =  ai  *  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	add
145	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  1)  {  prodLowSum  +=  bHigh;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	if(bHigh  >  1)  {  prodLowSum  +=  bHigh;  }	  if(bHigh    >    0)    {    prodLowSum    +=    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	replace
146	[BUG]  [BUGGY]  if(bHigh  >  1)  {  prodLowSum  +=  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  1)  {  prodLowSum  +=  bHigh;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh  >  1)  {  prodLowSum  +=  bHigh;  }	  if(bHigh    >    0)    {    prodLowSum    +=    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	replace
147	[BUG]  [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  bHigh[i]  =  bi  *  bHigh;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bi  *  bHigh;  bHigh[i]  =  bi  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bi    *    bHigh;    bHigh[i]  =  bi  *  bHigh;	  	non-compiled	[CE]  array  required,  but  double  found	18	None	add
148	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  if(i  <  len)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException( "ProdHigh  is  not  supported  by: "  +  bHigh);  prodHigh[i]  =  bHigh  *  ai;  }  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  ai;  if(i  <  len)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException( "ProdHigh  is  not  supported  by: "  +  bHigh);  prodHigh[i]  =  bHigh  *  ai;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    ai;    if(i  <  len)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException( "ProdHigh  is  not  supported  by: "  +  bHigh);  prodHigh[i]  =  bHigh  *  ai;  }	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
149	[BUG]  [BUGGY]  double  prodLowSum  =  ai  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  ai  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  ai  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    ai    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	21	None	replace
150	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  ai  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        bHigh        *        bi;        prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  ai  *  bi;  prodHigh[i]  =  bHigh  *  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
151	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  ai  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  bHigh  *  bi;  prodHigh[i]  =  ai  *  bi;  prodHigh[i]  =  bHigh  *  bi;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        prodHigh[i]    =    bHigh    *    bi;    prodHigh[i]  =  ai  *  bi;  prodHigh[i]  =  bHigh  *  bi;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	add
152	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  ai;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]  =  bHigh  /  ai;	  prodHigh[i]    =    bHigh    *    ai;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	3	replace
153	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  /  ai;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  /  ai;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]  =  bHigh  /  ai;	  prodHigh[i]    =    bHigh    *    ai;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	3	replace
154	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  final  double  prodHigh[i]  =  ai  *  bHigh;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  final  double  prodHigh[i]  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    final  double  prodHigh[i]  =  ai  *  bHigh;	  	non-compiled	[CE]  ']'  expected	49	None	add
155	[BUG]  [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodLowSum  =  ai  *  bHigh;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]  <  ai  *  bHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  else  {  prodHigh[i]  =  ai  *  bHigh;  }  double  prodLowSum  =  ai  *  bHigh;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        ai        *        bHigh;        if(prodHigh[i]    <    ai    *    bHigh)    {    prodHigh[i]    =    ai    *    bHigh;    }    else    {    prodHigh[i]    =    ai    *    bHigh;    }    double  prodLowSum  =  ai  *  bHigh;	  	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	49	None	add
156	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  if(i  <  len)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException( "ProdHigh  is  not  supported  by: "  +  PROD_High);  prodHigh[i]  =  bHigh  *  cb;  }  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  cb;  if(i  <  len)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException( "ProdHigh  is  not  supported  by: "  +  PROD_High);  prodHigh[i]  =  bHigh  *  cb;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    cb;    if(i  <  len)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException( "ProdHigh  is  not  supported  by: "  +  PROD_High);  prodHigh[i]  =  bHigh  *  cb;  }	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
157	[BUG]  [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  bHigh[i]  =  bHigh  *  bLow;  [CE]  array  required,  but  double  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]  =  bHigh  *  bLow;  bHigh[i]  =  bHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]    =    bHigh    *    bLow;    bHigh[i]  =  bHigh  *  bLow;	  	non-compiled	[CE]  array  required,  but  double  found	35	None	add
158	[BUG]  [BUGGY]  bHigh[i]  =  bHigh  *  bLow;  [CE]  array  required,  but  double  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  bHigh[i]  =  bHigh  *  bLow;  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	bHigh[i]  =  bHigh  *  bLow;	  prodHigh[i]    =    bHigh    *    bi;    bHigh[i]    =    bHigh    *    bi;    	non-compiled	[CE]  array  required,  but  double  found	45	None	replace
159	[BUG]  [BUGGY]  if(bHigh  <  =  1)  {  prodLowSum  +=  bi;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  <  =  1)  {  prodLowSum  +=  bi;  }  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh  <  =  1)  {  prodLowSum  +=  bi;  }	          if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    if(bHigh    >    0)    {    prodLowSum    +=    bi;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
160	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
161	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
162	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
163	[BUG]  [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	prodHigh[i]        =        bHigh        *        bi;        if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    if(prodHigh[i]  <  aHigh)  {  prodHigh[i]  =  bHigh  *  bi;  if(prodHigh[i]  <  bHigh)  {  prodHigh[i]  =  bHigh  *  bi;  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
164	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  *  ai  +  1;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  =  bHigh  *  ai  +  1;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  =  bHigh  *  ai  +  1;	  double    prodLowSum    =    bHigh    *    ai;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	30	None	replace
165	[BUG]  [BUGGY]  double  prodLowSum  -=  bHigh.length  -  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  double  prodLowSum  -=  bHigh.length  -  1;  [BUGGY]      prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	double  prodLowSum  -=  bHigh.length  -  1;	  double    prodLowSum    -=    bHigh.length;    	non-compiled	[CE]  ';'  expected	52	None	replace
166	[BUG]  [BUGGY]  if(bHigh  <  =  0)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  <  =  0)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh  <  =  0)  {  prodHigh[i]  =  bHigh  *  bi;  }  else  {  prodHigh[i]  =  bHigh  *  bi;  }	  prodHigh[i]    =    bHigh    *    bi;    if(prodHigh[i]    <    bHigh)    {    prodHigh[i]    =    bHigh    *    bi;    }    else    {    prodHigh[i]    =    bHigh    *    bi;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
167	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  <  ai)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	if(bHigh  <  ai)  {  prodHigh[i]  =  ai  *  bHigh;  }	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    ai    *    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	3	replace
168	[BUG]  [BUGGY]  if(bHigh  <  ai)  {  prodHigh[i]  =  ai  *  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  <  ai)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh  <  ai)  {  prodHigh[i]  =  ai  *  bHigh;  }	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    ai    *    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	3	replace
169	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  aHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	add	if(bHigh  >  aHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    ai    *    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	3	replace
170	[BUG]  [BUGGY]  if(bHigh  >  aHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;      [BUGGY]  if(bHigh  >  aHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }  [BUGGY]      final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	836	836	1	replace	if(bHigh  >  aHigh)  {  prodHigh[i]  =  ai  *  bHigh;  }	  prodHigh[i]    =    ai    *    bHigh;    if(prodHigh[i]    <    ai    *    bHigh)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    ai    *    bHigh;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	3	replace
