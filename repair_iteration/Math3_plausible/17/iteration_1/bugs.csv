bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    final  double  prodLowSum  =  b.length();  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]    final  double  prodLowSum  =  b.length();  [BUGGY]  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	    final  double  prodLowSum  =  b.length();		non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	add
2	[BUG]  [BUGGY]    final  double  prodLowSum  =  ai  *  prodLowSum;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]    final  double  prodLowSum  =  ai  *  prodLowSum;  [BUGGY]  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	    final  double  prodLowSum  =  ai  *  prodLowSum;		non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	add
3	[BUG]  [BUGGY]    final  double  prodLowSum  =  ai  *  prodLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]    final  double  prodLowSum  =  ai  *  prodLow;  [BUGGY]  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	    final  double  prodLowSum  =  ai  *  prodLow;		non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]  final  double  prodHighCur  =  prodHigh[1];  [BUGGY]  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	add	final  double  prodHighCur  =  prodHigh[1];	final  double  prodHighCur  =  prodHigh[0];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	4	replace
5	[BUG]  [BUGGY]  final  double  prodHighCur  =  prodHigh[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]  final  double  prodHighCur  =  prodHigh[1];  [BUGGY]  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final  double  prodHighCur  =  prodHigh[1];	final  double  prodHighCur  =  prodHigh[0];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	4	replace
6	[BUG]  [BUGGY]    double  prodLowSum  =  bLow  +  prodLowSum;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]    double  prodLowSum  =  bLow  +  prodLowSum;  [BUGGY]  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	    double  prodLowSum  =  bLow  +  prodLowSum;		non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	add
7	[BUG]  [BUGGY]    double  prodLowSum  =  bLow  *  prodLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]    double  prodLowSum  =  bLow  *  prodLow;  [BUGGY]  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	    double  prodLowSum  =  bLow  *  prodLow;		non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	add
8	[BUG]  [BUGGY]    double  prodLowSum  =  bLow  *  prodHighNext;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]    double  prodLowSum  =  bLow  *  prodHighNext;  [BUGGY]  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	    double  prodLowSum  =  bLow  *  prodHighNext;		non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	add
9	[BUG]  [BUGGY]    double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]    double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	    double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);		non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	add
10	[BUG]  [BUGGY]    double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aHigh  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }    [BUGGY]    double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aHigh  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	    double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aHigh  *  bHigh)-  aHigh  *  bHigh);		non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	34	None	add
