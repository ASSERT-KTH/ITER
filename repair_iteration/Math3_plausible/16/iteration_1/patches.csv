bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	      double    prodLowSum    =    prodLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	12	None	replace
2	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	      double    prodLowSum    =    prodLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	12	None	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	add
4	[BUG]  [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	add
5	[BUG]  [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  If(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  If(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    If(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	non-compiled	[CE]  ';'  expected	5	None	add
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	3	add
7	[BUG]  [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	3	add
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	3	add
9	[BUG]  [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	3	add
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    +=    bLow;    prodLowSum  +=  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
11	[BUG]  [BUGGY]  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bLow;    prodLowSum  +=  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
12	[BUG]  [BUGGY]  prodLowSum  +=  bLow;  ProdLowSum  +=  bLow;  [CE]  cannot  find  symbol  ProdLowSum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bLow;  ProdLowSum  +=  bLow;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bLow;    ProdLowSum  +=  bLow;	  	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	10	None	add
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
14	[BUG]  [BUGGY]  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  -=  bHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  -=  bHigh;	  prodLowSum    +=    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
16	[BUG]  [BUGGY]  prodLowSum  -=  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  -=  bHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  -=  bHigh;	  prodLowSum    +=    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
17	[BUG]  [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodHighNext);  [CE]  cannot  find  symbol  prodHighNext  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodHighNext);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  =  Math.max(prodLowSum,  prodHighNext);	      if(prodLowSum    >    0)    {    prodLowSum    =    Math.max(prodLowSum,    prodHighNext);    }    	non-compiled	[CE]  cannot  find  symbol  prodHighNext	9	None	replace
18	[BUG]  [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodHighCur);  [CE]  cannot  find  symbol  prodHighCur  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodHighCur);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  =  Math.max(prodLowSum,  prodHighCur);	      if(prodLowSum    >    0)    {    prodLowSum    =    Math.max(prodLowSum,    prodHighNext);    }    	non-compiled	[CE]  cannot  find  symbol  prodHighCur	9	None	replace
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  prodLowSum;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  +=  prodLowSum;	      if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	replace
20	[BUG]  [BUGGY]  prodLowSum  +=  prodLowSum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  prodLowSum;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  +=  prodLowSum;	      if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	replace
21	[BUG]  [BUGGY]  final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	      	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	4	None	replace
22	[BUG]  [BUGGY]  final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);	      	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	4	None	replace
23	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	      double    prodLowSum    =    prodLow    *    bLow    +(((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	13	None	replace
24	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	      double    prodLowSum    =    prodLow    *    bLow    +(((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	13	None	replace
25	[BUG]  [BUGGY]      final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        final  double  bHigh  =  prodLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);	  	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	3	None	add
26	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	      double    prodLowSum    =    prodHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	16	None	replace
27	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	      double    prodLowSum    =    prodHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	16	None	replace
28	[BUG]  [BUGGY]  ProdLowSum  +=  prodLow;  [CE]  cannot  find  symbol  ProdLowSum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  ProdLowSum  +=  prodLow;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	ProdLowSum  +=  prodLow;	      if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	6	None	replace
29	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	      double    prodLowSum    =    prodHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	15	None	replace
30	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  bHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	      double    prodLowSum    =    prodHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	15	None	replace
31	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	      double    prodLowSum    =    prodLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	14	None	replace
32	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	      double    prodLowSum    =    prodLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	14	None	replace
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	4	add
34	[BUG]  [BUGGY]  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	4	add
35	[BUG]  [BUGGY]  prodLowSum  +=  bHigh;  ProdLowSum  +=  bHigh;  [CE]  cannot  find  symbol  ProdLowSum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bHigh;  ProdLowSum  +=  bHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bHigh;    ProdLowSum  +=  bHigh;	  	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	1	None	add
36	[BUG]  [BUGGY]  prodLowSum  +=  bHigh;  bHigh  +=  bHigh;  [CE]  cannot  assign  a  value  to  final  variable  bHigh  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bHigh;  bHigh  +=  bHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bHigh;    bHigh  +=  bHigh;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bHigh	1	None	add
37	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	      double    prodLowSum    =    prodLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	14	None	replace
38	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  bLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	      double    prodLowSum    =    prodHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	16	None	replace
39	[BUG]  [BUGGY]      if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow;  }  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
40	[BUG]  [BUGGY]      if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow  *  bLow;  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow  *  bLow;  }  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow  *  bLow;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
41	[BUG]  [BUGGY]      if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow  +  bLow;  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow  +  bLow;  }  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(b  >  0)  {  if(bLow  >  0)  {  prodHigh  =  bLow  +  bLow;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
42	[BUG]  [BUGGY]  prodLowSum  +=  bHigh;  double  prodLowSum  +=  bHigh;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bHigh;  double  prodLowSum  +=  bHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bHigh;    double  prodLowSum  +=  bHigh;	  	non-compiled	[CE]  ';'  expected	1	None	add
43	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  bLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	      double    prodLowSum    =    prodHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	15	None	replace
44	[BUG]  [BUGGY]  prodLowSum  +=  bLow;  double  prodLowSum  +=  bLow;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bLow;  double  prodLowSum  +=  bLow;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bLow;    double  prodLowSum  +=  bLow;	  	non-compiled	[CE]  ';'  expected	10	None	add
45	[BUG]  [BUGGY]  ProdLowSum  +=  prodLowSum;  [CE]  cannot  find  symbol  ProdLowSum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  ProdLowSum  +=  prodLowSum;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	ProdLowSum  +=  prodLowSum;	      if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	8	None	replace
46	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	3	add
47	[BUG]  [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	3	add
48	[BUG]  [BUGGY]  ProdLowSum  =  Math.max(prodLowSum,  prodHighNext);  [CE]  cannot  find  symbol  ProdLowSum  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  ProdLowSum  =  Math.max(prodLowSum,  prodHighNext);  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	ProdLowSum  =  Math.max(prodLowSum,  prodHighNext);	      if(prodLowSum    >    0)    {    prodLowSum    =    Math.max(prodLowSum,    prodHighNext);    }    	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	9	None	replace
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	add
50	[BUG]  [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	add
51	[BUG]  [BUGGY]  double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	      double    prodLowSum    =    prodLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	14	None	replace
52	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	      double    prodLowSum    =    prodLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	14	None	replace
53	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	add
54	[BUG]  [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	add
55	[BUG]  [BUGGY]  prodLowSum  +=  bHigh;  double  bHigh  =  bHigh;  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  bHigh;  double  bHigh  =  bHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    bHigh;    double  bHigh  =  bHigh;	  	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	1	None	add
56	[BUG]  [BUGGY]  prodLowSum  +=  prodHigh;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  prodLowSum  +=  prodHigh;  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  +=  prodHigh;	  prodLowSum    +=    bHigh;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
57	[BUG]  [BUGGY]      if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
58	[BUG]  [BUGGY]      if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  return  bLow;  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  return  bLow;  }  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  return  bLow;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
59	[BUG]  [BUGGY]      if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]      if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	        if(bLow  <  =  prodHigh.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
60	[BUG]  [BUGGY]  if(prodLowSum  >  0)  {  prodLowSum  =  Math.max(prodLowSum,  prodHighCur);  }  [CE]  cannot  find  symbol  prodHighCur  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);    [BUGGY]  if(prodLowSum  >  0)  {  prodLowSum  =  Math.max(prodLowSum,  prodHighCur);  }  [BUGGY]    prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(prodLowSum  >  0)  {  prodLowSum  =  Math.max(prodLowSum,  prodHighCur);  }	      if(prodLowSum    >    0)    {    prodLowSum    =    Math.max(prodLowSum,    prodHighNext);    }    	non-compiled	[CE]  cannot  find  symbol  prodHighCur	9	None	replace
