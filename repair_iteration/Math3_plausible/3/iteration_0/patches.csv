bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]    final  double[]  prodHigh  =  new  double[len];  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	    final  double[]  prodHigh  =  new  double[len];		non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	6	None	add
2	[BUG]  [BUGGY]    final  int  len  =  a.length;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]    final  int  len  =  a.length;  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	    final  int  len  =  a.length;		non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	6	None	add
3	[BUG]  [BUGGY]    final  int  len  =  b.length;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]    final  int  len  =  b.length;  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	    final  int  len  =  b.length;		non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	6	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  [BUGGY]  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	final  double[]  prodHigh  =  new  double[len  -  1];	final  double[]  prodHigh  =  new  double[len];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
5	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  [BUGGY]  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len  -  1];	final  double[]  prodHigh  =  new  double[len];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
6	[BUG]  [BUGGY]    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[		non-compiled	[CE]  illegal  start  of  expression	6	None	add
7	[BUG]  [BUGGY]    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  }  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
8	[BUG]  [BUGGY]    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i		non-compiled	[CE]  ']'  expected	6	None	add
9	[BUG]  [BUGGY]    if(len  >  0)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]    if(len  >  0)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	    if(len  >  0)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
10	[BUG]  [BUGGY]    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  System.arraycopy(a,  0,  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    [BUGGY]    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  System.arraycopy(a,  0,  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	    if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  System.arraycopy(a,  0,		non-compiled	[CE]  illegal  start  of  expression	6	None	add
