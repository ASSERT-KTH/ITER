bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] resizeBuf(); [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { [BUGGY] resizeBuf(); [BUGGY] } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { [BUGGY] [BUGGY] resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	
3	[BUG] [BUGGY] this(lineLength, lineSeparator, false); [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator) { [BUGGY] this(lineLength, lineSeparator, false); [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[])  int lineLength byte[] lineSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	262	262	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator) { [BUGGY] [BUGGY] this(lineLength, lineSeparator, false); } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[])  int lineLength byte[] lineSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	262	262	2	add	
5	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator) { this(lineLength, lineSeparator, false); [BUGGY] } [BUGGY]  [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[])  int lineLength byte[] lineSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	263	263	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator) { this(lineLength, lineSeparator, false); [BUGGY] [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[])  int lineLength byte[] lineSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	263	263	2	add	
7	[BUG] [BUGGY] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { [FE] AssertionFailedError [CONTEXT] [BUGGY] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { [BUGGY] this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	287	287	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	287	287	2	add	
9	[BUG] [BUGGY] this.lineLength = lineLength; [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { [BUGGY] this.lineLength = lineLength; [BUGGY] this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	288	288	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { [BUGGY] [BUGGY] this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	288	288	2	add	
11	[BUG] [BUGGY] this.lineSeparator = new byte[lineSeparator.length]; [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; [BUGGY] this.lineSeparator = new byte[lineSeparator.length]; [BUGGY] System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; [BUGGY] [BUGGY] this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	add	
13	[BUG] [BUGGY] System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; [BUGGY] System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); [BUGGY] if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	290	290	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; [BUGGY] [BUGGY] System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	290	290	2	add	
15	[BUG] [BUGGY] if (lineLength > 0) { [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); [BUGGY] if (lineLength > 0) { [BUGGY] this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	291	291	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); [BUGGY] [BUGGY] if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	291	291	2	add	
17	[BUG] [BUGGY] this.encodeSize = 4 + lineSeparator.length; [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { [BUGGY] this.encodeSize = 4 + lineSeparator.length; [BUGGY] } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	292	292	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { [BUGGY] [BUGGY] this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	292	292	2	add	
19	[BUG] [BUGGY] this.decodeSize = this.encodeSize - 1; [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } [BUGGY] this.decodeSize = this.encodeSize - 1; [BUGGY] if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	296	296	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } [BUGGY] [BUGGY] this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	296	296	2	add	
21	[BUG] [BUGGY] if (containsBase64Byte(lineSeparator)) { [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; [BUGGY] if (containsBase64Byte(lineSeparator)) { [BUGGY] String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	297	297	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; [BUGGY] [BUGGY] if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	297	297	2	add	
23	[BUG] [BUGGY] this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [FE] AssertionFailedError [CONTEXT] this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } [BUGGY] this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	306	306	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } [BUGGY] [BUGGY] this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	306	306	2	add	
25	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [BUGGY] } [BUGGY]  [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	307	307	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, "UTF-8"); } catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [BUGGY] [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator UnsupportedEncodingException uee boolean eof urlSafe String sep byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	307	307	2	add	
27	[BUG] [BUGGY] static final byte[] CHUNK_SEPARATOR = {'\r','\n'}; [FE] AssertionFailedError [CONTEXT] [BUGGY] static final byte[] CHUNK_SEPARATOR = {'\r','\n'}; [BUGGY]  [CLASS] Base64  [VARIABLES] 	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	59	59	2	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] static final byte[] CHUNK_SEPARATOR = {'\r','\n'}; [CLASS] Base64  [VARIABLES] 	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	59	59	2	add	
29	[BUG] [BUGGY] private static final byte[] STANDARD_ENCODE_TABLE = { [FE] AssertionFailedError [CONTEXT] [BUGGY] private static final byte[] STANDARD_ENCODE_TABLE = { [BUGGY] 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; [CLASS] Base64  [VARIABLES] 	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	69	69	2	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private static final byte[] STANDARD_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; [CLASS] Base64  [VARIABLES] 	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	69	69	2	add	
31	[BUG] [BUGGY] private static final byte[] URL_SAFE_ENCODE_TABLE = { [FE] AssertionFailedError [CONTEXT] [BUGGY] private static final byte[] URL_SAFE_ENCODE_TABLE = { [BUGGY] 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' }; [CLASS] Base64  [VARIABLES] 	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	82	82	2	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private static final byte[] URL_SAFE_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' }; [CLASS] Base64  [VARIABLES] 	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	82	82	2	add	
33	[BUG] [BUGGY] private static final byte[] DECODE_TABLE = { [FE] AssertionFailedError [CONTEXT] [BUGGY] private static final byte[] DECODE_TABLE = { [BUGGY] -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }; [CLASS] Base64  [VARIABLES] 	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	109	109	2	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private static final byte[] DECODE_TABLE = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }; [CLASS] Base64  [VARIABLES] 	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	109	109	2	add	
35	[BUG] [BUGGY] return buf != null ? pos - readPos : 0; [FE] AssertionFailedError [CONTEXT] int avail() { [BUGGY] return buf != null ? pos - readPos : 0; [BUGGY] } [CLASS] Base64 [METHOD] avail [RETURN_TYPE] int  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	333	333	2	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int avail() { [BUGGY] [BUGGY] return buf != null ? pos - readPos : 0; } [CLASS] Base64 [METHOD] avail [RETURN_TYPE] int  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	333	333	2	add	
37	[BUG] [BUGGY] if (buf == null) { [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { [BUGGY] if (buf == null) { [BUGGY] buf = new byte[8192]; pos = 0; readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	338	338	2	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { [BUGGY] [BUGGY] if (buf == null) { buf = new byte[8192]; pos = 0; readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	338	338	2	add	
39	[BUG] [BUGGY] buf = new byte[8192]; [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { if (buf == null) { [BUGGY] buf = new byte[8192]; [BUGGY] pos = 0; readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	339	339	2	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { if (buf == null) { [BUGGY] [BUGGY] buf = new byte[8192]; pos = 0; readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	339	339	2	add	
41	[BUG] [BUGGY] pos = 0; [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { if (buf == null) { buf = new byte[8192]; [BUGGY] pos = 0; [BUGGY] readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	340	340	2	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { if (buf == null) { buf = new byte[8192]; [BUGGY] [BUGGY] pos = 0; readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	340	340	2	add	
43	[BUG] [BUGGY] readPos = 0; [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { if (buf == null) { buf = new byte[8192]; pos = 0; [BUGGY] readPos = 0; [BUGGY] } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	341	341	2	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { if (buf == null) { buf = new byte[8192]; pos = 0; [BUGGY] [BUGGY] readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	341	341	2	add	
45	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { if (buf == null) { buf = new byte[8192]; pos = 0; readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } [BUGGY] } [BUGGY]  [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	347	347	2	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resizeBuf() { if (buf == null) { buf = new byte[8192]; pos = 0; readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } [BUGGY] [BUGGY] } [CLASS] Base64 [METHOD] resizeBuf [RETURN_TYPE] void  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	347	347	2	add	
47	[BUG] [BUGGY] if (buf != null) { [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { [BUGGY] if (buf != null) { [BUGGY] int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	362	362	2	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { [BUGGY] [BUGGY] if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	362	362	2	add	
49	[BUG] [BUGGY] int len = Math.min(avail(), bAvail); [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { [BUGGY] int len = Math.min(avail(), bAvail); [BUGGY] if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	363	363	2	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { [BUGGY] [BUGGY] int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	363	363	2	add	
51	[BUG] [BUGGY] if (buf != b) { [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); [BUGGY] if (buf != b) { [BUGGY] System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	364	364	2	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); [BUGGY] [BUGGY] if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	364	364	2	add	
53	[BUG] [BUGGY] System.arraycopy(buf, readPos, b, bPos, len); [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { [BUGGY] System.arraycopy(buf, readPos, b, bPos, len); [BUGGY] readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; } return len; [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	365	365	2	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { [BUGGY] [BUGGY] System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; } return len; [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	365	365	2	add	
55	[BUG] [BUGGY] readPos += len; [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); [BUGGY] readPos += len; [BUGGY] if (readPos >= pos) { buf = null; } } else {   buf = null; } return len; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	366	366	2	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); [BUGGY] [BUGGY] readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; } return len; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	366	366	2	add	
57	[BUG] [BUGGY] if (readPos >= pos) { [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; [BUGGY] if (readPos >= pos) { [BUGGY] buf = null; } } else {   buf = null; } return len; } return eof ? -1 : 0; [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	367	367	2	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; [BUGGY] [BUGGY] if (readPos >= pos) { buf = null; } } else {   buf = null; } return len; } return eof ? -1 : 0; [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	367	367	2	add	
59	[BUG] [BUGGY] return len; [FE] AssertionFailedError [CONTEXT] System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; } [BUGGY] return len; [BUGGY] } return eof ? -1 : 0; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	375	375	2	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else {   buf = null; } [BUGGY] [BUGGY] return len; } return eof ? -1 : 0; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	375	375	2	add	
61	[BUG] [BUGGY] if (eof) { [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { [BUGGY] if (eof) { [BUGGY] return; }   if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	415	415	2	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { [BUGGY] [BUGGY] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	415	415	2	add	
63	[BUG] [BUGGY] if (inAvail < 0) { [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   [BUGGY] if (inAvail < 0) { [BUGGY] eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	420	420	2	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   [BUGGY] [BUGGY] if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	420	420	2	add	
65	[BUG] [BUGGY] eof = true; [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { [BUGGY] eof = true; [BUGGY] if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	421	421	2	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { [BUGGY] [BUGGY] eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	421	421	2	add	
67	[BUG] [BUGGY] if (buf == null || buf.length - pos < encodeSize) { [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; [BUGGY] if (buf == null || buf.length - pos < encodeSize) { [BUGGY] resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	422	422	2	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; [BUGGY] [BUGGY] if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	422	422	2	add	
69	[BUG] [BUGGY] switch (modulus) { [FE] AssertionFailedError [CONTEXT] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } [BUGGY] switch (modulus) { [BUGGY] case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break;  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	425	425	2	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } [BUGGY] [BUGGY] switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break;  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	425	425	2	add	
71	[BUG] [BUGGY] if (lineLength > 0) { [FE] AssertionFailedError [CONTEXT] case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } [BUGGY] if (lineLength > 0) { [BUGGY] System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	446	446	2	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } [BUGGY] [BUGGY] if (lineLength > 0) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	446	446	2	add	
73	[BUG] [BUGGY] System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); [FE] AssertionFailedError [CONTEXT] buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } if (lineLength > 0) { [BUGGY] System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); [BUGGY] pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	447	447	2	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } if (lineLength > 0) { [BUGGY] [BUGGY] System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	447	447	2	add	
75	[BUG] [BUGGY] pos += lineSeparator.length; [FE] AssertionFailedError [CONTEXT] buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } if (lineLength > 0) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); [BUGGY] pos += lineSeparator.length; [BUGGY] } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	448	448	2	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } if (lineLength > 0) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); [BUGGY] [BUGGY] pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	448	448	2	add	
78	[BUG] [BUGGY] return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1); [FE] AssertionFailedError [CONTEXT] public static boolean isBase64(byte octet) { [BUGGY] return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1); [BUGGY] } [CLASS] Base64 [METHOD] isBase64 [RETURN_TYPE] boolean  byte octet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	554	554	2	replace	
79	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isBase64(byte octet) { [BUGGY] [BUGGY] return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1); } [CLASS] Base64 [METHOD] isBase64 [RETURN_TYPE] boolean  byte octet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	554	554	2	add	
80	[BUG] [BUGGY] for (int i = 0; i < arrayOctet.length; i++) { [FE] AssertionFailedError [CONTEXT] private static boolean containsBase64Byte(byte[] arrayOctet) { [BUGGY] for (int i = 0; i < arrayOctet.length; i++) { [BUGGY] if (isBase64(arrayOctet[i])) { return true; } } return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	583	583	2	replace	
81	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean containsBase64Byte(byte[] arrayOctet) { [BUGGY] [BUGGY] for (int i = 0; i < arrayOctet.length; i++) { if (isBase64(arrayOctet[i])) { return true; } } return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	583	583	2	add	
82	[BUG] [BUGGY] if (isBase64(arrayOctet[i])) { [FE] AssertionFailedError [CONTEXT] private static boolean containsBase64Byte(byte[] arrayOctet) { for (int i = 0; i < arrayOctet.length; i++) { [BUGGY] if (isBase64(arrayOctet[i])) { [BUGGY] return true; } } return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	584	584	2	replace	
83	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean containsBase64Byte(byte[] arrayOctet) { for (int i = 0; i < arrayOctet.length; i++) { [BUGGY] [BUGGY] if (isBase64(arrayOctet[i])) { return true; } } return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	584	584	2	add	
84	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] private static boolean containsBase64Byte(byte[] arrayOctet) { for (int i = 0; i < arrayOctet.length; i++) { if (isBase64(arrayOctet[i])) { return true; } } [BUGGY] return false; [BUGGY] } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	588	588	2	replace	
85	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean containsBase64Byte(byte[] arrayOctet) { for (int i = 0; i < arrayOctet.length; i++) { if (isBase64(arrayOctet[i])) { return true; } } [BUGGY] [BUGGY] return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD b octet int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos result x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	588	588	2	add	
86	[BUG] [BUGGY] return this.buf != null; [FE] AssertionFailedError [CONTEXT] boolean hasData() { [BUGGY] return this.buf != null; [BUGGY] } [CLASS] Base64 [METHOD] hasData [RETURN_TYPE] boolean  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.4082482904638631	324	324	2	replace	
87	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean hasData() { [BUGGY] [BUGGY] return this.buf != null; } [CLASS] Base64 [METHOD] hasData [RETURN_TYPE] boolean  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.4082482904638631	324	324	2	add	
88	[BUG] [BUGGY] buf = null; [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { [BUGGY] buf = null; [BUGGY] } } else {   buf = null; } return len; } return eof ? -1 : 0; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.31622776601683794	368	368	2	replace	
89	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail); if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { [BUGGY] [BUGGY] buf = null; } } else {   buf = null; } return len; } return eof ? -1 : 0; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS bAvail bPos currentLinePos decodeSize encodeSize len lineLength modulus pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.31622776601683794	368	368	2	add	
