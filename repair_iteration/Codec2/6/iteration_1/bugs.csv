bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    this.urlSafe  =  urlSafe;  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    this.urlSafe  =  urlSafe;  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    this.urlSafe  =  urlSafe;		non-compiled	[CE]  ';'  expected	12	None	add
2	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	12	None	add
3	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	12	None	add
4	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }		non-compiled	[CE]  ';'  expected	12	None	add
5	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_		non-compiled	[CE]  ';'  expected	12	None	add
6	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }		non-compiled	[CE]  ';'  expected	12	None	add
7	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }		non-compiled	[CE]  ';'  expected	12	None	add
8	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPA  [CE]  ';'  expected  [FE]                  AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPA  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPA		non-compiled	[CE]  ';'  expected	12	None	add
9	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]                    AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_		non-compiled	[CE]  ';'  expected	12	None	add
10	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }		non-compiled	[CE]  ';'  expected	12	None	add
11	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
12	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  1];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
13	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
14	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
15	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
16	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
17	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
18	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
19	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  [CE]  ';'  expected  [FE]                    AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
20	[BUG]  [BUGGY]    System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	12	None	add
21	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }		non-compiled	[CE]  ';'  expected	12	None	add
22	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.line  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.line  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.line		non-compiled	[CE]  ';'  expected	12	None	add
23	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	12	None	add
24	[BUG]  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPA  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPA  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPA		non-compiled	[CE]  ';'  expected	12	None	add
25	[BUG]  [BUGGY]    System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength);		non-compiled	[CE]  ';'  expected	12	None	add
26	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  -  1];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
27	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  4];  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  4];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  4];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  2];  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  2];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  2];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
29	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4];  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  4];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
30	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  3];  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  3];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  3];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
31	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  2];  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  2];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  2];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
32	[BUG]  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }		non-compiled	[CE]  ';'  expected	12	None	add
33	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	12	None	add
34	[BUG]  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }		non-compiled	[CE]  ';'  expected	12	None	add
35	[BUG]  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }		non-compiled	[CE]  ';'  expected	12	None	add
36	[BUG]  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }		non-compiled	[CE]  ';'  expected	12	None	add
37	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);		non-compiled	[CE]  ';'  expected	12	None	add
38	[BUG]  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	    if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }		non-compiled	[CE]  ';'  expected	12	None	add
39	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
40	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length];  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
41	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
42	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
43	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe];	this.lineSeparator  =  new  byte[lineSeparator.length];  	non-compiled	[CE]  ';'  expected	11	None	replace
