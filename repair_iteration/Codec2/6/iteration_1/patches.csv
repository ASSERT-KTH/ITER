bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  5];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  5];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  5];	  this.lineSeparator    =    new    byte[lineSeparator.length    +    4];    	non-compiled	[CE]  ';'  expected	27	None	replace
2	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  6];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  6];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  6];	  this.lineSeparator    =    new    byte[lineSeparator.length    +    4];    	non-compiled	[CE]  ';'  expected	27	None	replace
3	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  3];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  3];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  3];	  this.lineSeparator    =    new    byte[lineSeparator.length    +    3];    	non-compiled	[CE]  ';'  expected	30	None	replace
4	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
5	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
6	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
7	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  2];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  /  2];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
8	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  2];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  -  2];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
9	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  2];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  2];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
10	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  1];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  +  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  this.urlSafe);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	3	None	replace
17	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
18	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
19	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
20	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
21	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
22	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
23	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
24	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
25	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
26	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
27	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
28	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
29	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
34	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
35	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
36	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
37	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
38	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
39	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
40	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
41	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
43	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
44	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
45	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
46	[BUG]  [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
47	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
48	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
49	[BUG]  [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
50	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
51	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  1];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4];    	non-compiled	[CE]  ';'  expected	29	None	replace
52	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  4];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  /  4];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4];    	non-compiled	[CE]  ';'  expected	29	None	replace
53	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  4];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  -  4];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4];    	non-compiled	[CE]  ';'  expected	29	None	replace
54	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  4];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4];    	non-compiled	[CE]  ';'  expected	29	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
56	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
57	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
58	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
59	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
60	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
61	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
62	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	5	None	replace
63	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	5	None	replace
64	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	5	None	replace
65	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	5	None	replace
66	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CH  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CH  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CH	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	5	None	replace
67	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  1];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  1];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
68	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
69	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
70	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
71	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
72	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
73	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
74	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
75	[BUG]  [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
76	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe);	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
78	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
79	[BUG]  [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
80	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_SEPA    	non-compiled	[CE]  ';'  expected	24	None	replace
81	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_SEPA    	non-compiled	[CE]  ';'  expected	24	None	replace
82	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_SEPA    	non-compiled	[CE]  ';'  expected	24	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  urlSafe.length);	      System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  lineLength);	      System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);	      System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);	      System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	2	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	2	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	2	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	2	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	2	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  sep,  0,  lineLength);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  sep,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  sep,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	23	None	replace
93	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  sepLength);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  sepLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  sepLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	23	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	23	None	replace
95	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  1];  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  +  1];	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ')'  expected	39	None	replace
96	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ')'  expected	39	None	replace
97	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ')'  expected	39	None	replace
98	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ')'  expected	39	None	replace
99	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ')'  expected	39	None	replace
100	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ')'  expected	39	None	replace
101	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  4];  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  +  4];	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ')'  expected	39	None	replace
102	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  2];  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  +  2];	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ')'  expected	39	None	replace
103	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	36	None	replace
104	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  1];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  1];	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ';'  expected	43	None	replace
105	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ')'  expected	43	None	replace
106	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ')'  expected	43	None	replace
107	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ';'  expected	43	None	replace
108	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ';'  expected	43	None	replace
109	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ';'  expected	43	None	replace
110	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ';'  expected	43	None	replace
111	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ';'  expected	19	None	replace
112	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ';'  expected	19	None	replace
113	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  }  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ';'  expected	19	None	replace
114	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ';'  expected	19	None	replace
115	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ';'  expected	19	None	replace
116	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
117	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
118	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
119	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
120	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
121	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
122	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
123	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  1];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    +    1];    	non-compiled	[CE]  ';'  expected	12	None	replace
124	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    +    1];    	non-compiled	[CE]  ';'  expected	12	None	replace
125	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length)];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
126	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1  +  lineSeparator.length)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  1  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
127	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  1];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
128	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  lineLength)];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  lineLength)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  +  lineLength)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
129	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  4  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  4  +  lineSeparator.length)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  4  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
130	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length  -  1)];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length  -  1)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length  -  1)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
131	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length  +  1)];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length  +  1)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length  +  1)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
132	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1)];  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  1)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
133	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
134	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
135	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
136	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
137	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
138	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
139	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
140	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
141	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
142	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  urlSafe);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
144	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.urlSafe);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
145	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	25	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineSeparator.length);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  1);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
149	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4  +  lineSeparator.length];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[4  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	40	None	replace
150	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1  +  lineSeparator.length];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[1  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	40	None	replace
151	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0  +  lineSeparator.length];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[0  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	40	None	replace
152	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	40	None	replace
153	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3  +  lineSeparator.length];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[3  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	40	None	replace
154	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[5  +  lineSeparator.length];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[5  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[5  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	40	None	replace
155	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2  +  lineSeparator.length];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[2  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[2  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	40	None	replace
156	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
157	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
158	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
161	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
162	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
163	[BUG]  [BUGGY]  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  URL_SAFE_ENCODE_TABLE;	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
164	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
165	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
166	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  lineSeparator,  0,  lineSeparator.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
167	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
168	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineLength];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
170	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
171	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
172	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
173	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
174	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
175	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
176	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
177	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
178	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
179	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
180	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
181	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  -  1];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  -  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  -  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	26	None	replace
182	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  1];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  /  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	26	None	replace
183	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  3];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  3];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  -  3];	  this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	26	None	replace
184	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[0];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0];	  this.lineSeparator    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	11	None	replace
185	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }	  this.lineSeparator    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	11	None	replace
186	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR];	  this.lineSeparator    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	11	None	replace
187	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  3];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  3];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  3];	  this.lineSeparator    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	11	None	replace
188	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  2];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  2];	  this.lineSeparator    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	11	None	replace
189	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1];	  this.lineSeparator    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	11	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
191	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
192	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
193	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(this.urlSafe  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(this.urlSafe  +  lineSeparator.length)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(this.urlSafe  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
194	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length)];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
195	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  3  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  3  +  lineSeparator.length)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  3  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
196	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  6  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  6  +  lineSeparator.length)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  6  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
198	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
199	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
200	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  4];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  4];	  this.lineSeparator    =    new    byte[lineLength];    	non-compiled	[CE]  ';'  expected	11	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  urlSafe);	      System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);	      System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  urlSafe);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  urlSafe);	      System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	20	None	replace
205	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
206	[BUG]  [BUGGY]  safely())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  safely())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safely())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
207	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
208	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_S  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_S  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_S	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
209	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPA	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
211	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  4];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  4];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
212	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  3];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  3];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  2  +  3];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
213	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  6];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  6];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  6];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
214	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	5	None	replace
215	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
216	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_SEPA    	non-compiled	[CE]  ';'  expected	24	None	replace
218	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_SEPA    	non-compiled	[CE]  ';'  expected	24	None	replace
219	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  sepLength);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  sepLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  sepLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	23	None	replace
220	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  3];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  3];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  3];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4];    	non-compiled	[CE]  ';'  expected	29	None	replace
221	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  8];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  8];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  8];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4];    	non-compiled	[CE]  ';'  expected	29	None	replace
222	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  10];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  10];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  10];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4];    	non-compiled	[CE]  ';'  expected	29	None	replace
223	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  lineSeparator,  0,  lineLength);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
224	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
225	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
226	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
227	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator];	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ';'  expected	43	None	replace
228	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.decodeSize];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.decodeSize];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.decodeSize];	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ';'  expected	43	None	replace
229	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  4];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  4];	  this.lineSeparator    =    new    byte[this.urlSafe];    	non-compiled	[CE]  ';'  expected	43	None	replace
230	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
231	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
232	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  1);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  1);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
234	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineLength);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
235	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.separator,  0,  lineLength);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(lineSeparator,  0,  this.separator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.separator,  0,  lineLength);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	25	None	replace
236	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
237	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  1];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  -  1];	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ';'  expected	39	None	replace
238	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  4];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  4];	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ';'  expected	39	None	replace
239	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  urlSafe);	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
241	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	      if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
242	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineSeparator.length];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[64  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	40	None	replace
243	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe;  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe;	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
244	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  +  1;  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  1;	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
245	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
246	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(CHUNK_SEPARATOR);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(CHUNK_SEPARATOR);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
247	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length];  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length];	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
248	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  lineSeparator.length;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  +  lineSeparator.length;  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  lineSeparator.length;	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
249	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(LINE_SEPARATOR);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(LINE_SEPARATOR);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(LINE_SEPARATOR);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
250	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
251	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ';'  expected	19	None	replace
252	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
253	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  1  +  1];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  1  +  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  -  1  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	26	None	replace
254	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  2];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  2];	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ';'  expected	39	None	replace
255	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  6];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  6];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  +  6];	  this.lineSeparator    =    new    byte[this.urlSafe.length];    	non-compiled	[CE]  ';'  expected	39	None	replace
256	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  *  2];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  *  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  *  2];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
257	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
258	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  urlSafe.length);	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
259	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
260	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	9	None	replace
261	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
262	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  -  1];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  -  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  -  1];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
263	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[Line_SEPARATOR.length];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
264	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  2];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  2];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	41	None	replace
265	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	22	None	replace
266	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
267	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
268	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  *  4];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  *  4];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  *  4];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4];    	non-compiled	[CE]  ';'  expected	29	None	replace
269	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
270	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  -  1];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  -  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	26	None	replace
271	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  2];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  2];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  +  2];	  this.lineSeparator    =    new    byte[lineSeparator.length    +    2];    	non-compiled	[CE]  ';'  expected	28	None	replace
272	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  this.urlSafe)];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  this.urlSafe)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  this.urlSafe)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
273	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  /  lineSeparator.length)];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  /  lineSeparator.length)];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  /  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	42	None	replace
274	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
275	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
276	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
277	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  sep.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  sep.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  sep.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	23	None	replace
278	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
279	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
280	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  lineSeparator.length];  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ')'  expected	40	None	replace
281	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length];  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ')'  expected	40	None	replace
282	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length];  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length];  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[lineSeparator.length];	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ')'  expected	19	None	replace
283	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_SEPA    	non-compiled	[CE]  ')'  expected	24	None	replace
284	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK_	      if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_SEPA    	non-compiled	[CE]  ')'  expected	24	None	replace
285	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	      if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	35	None	replace
286	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	13	None	replace
287	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.separator,  0,  lineLength);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(sep,  0,  this.separator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.separator,  0,  lineLength);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	25	None	replace
288	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ')'  expected	25	None	replace
289	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUNK	      if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ')'  expected	5	None	replace
290	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ';'  expected	1	None	replace
291	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ')'  expected	1	None	replace
292	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ')'  expected	1	None	replace
293	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ')'  expected	1	None	replace
294	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ')'  expected	1	None	replace
295	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[URL_SAFE_ENCODE_TABLE.length];  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  new  byte[URL_SAFE_ENCODE_TABLE.length];  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[URL_SAFE_ENCODE_TABLE.length];	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ')'  expected	1	None	replace
296	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);	      this.urlSafe    =    urlSafe;    	non-compiled	[CE]  ')'  expected	1	None	replace
297	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
298	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
299	[BUG]  [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ')'  expected	37	None	replace
300	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
301	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;    [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]    System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
