bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  1];  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  1];	  this.lineSeparator    =    new    byte[lineLength    +    1];    	non-compiled	[CE]  ')'  expected	123	None	replace
2	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  6];  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  6];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  6];	  this.lineSeparator    =    new    byte[lineLength    +    1];    	non-compiled	[CE]  ')'  expected	123	None	replace
3	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  5];  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  5];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  5];	  this.lineSeparator    =    new    byte[lineLength    +    1];    	non-compiled	[CE]  ')'  expected	123	None	replace
4	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  3];  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  +  3];	  this.lineSeparator    =    new    byte[this.lineSeparator.length    +    2];    	non-compiled	[CE]  ')'  expected	271	None	replace
5	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length];  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length];	  this.lineSeparator    =    new    byte[this.lineSeparator.length    +    2];    	non-compiled	[CE]  ')'  expected	271	None	replace
6	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  4];  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  +  4];	  this.lineSeparator    =    new    byte[this.lineSeparator.length    +    2];    	non-compiled	[CE]  ')'  expected	271	None	replace
7	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  5];  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  5];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  +  5];	  this.lineSeparator    =    new    byte[this.lineSeparator.length    +    2];    	non-compiled	[CE]  ')'  expected	271	None	replace
8	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  6];  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  +  6];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  +  6];	  this.lineSeparator    =    new    byte[this.lineSeparator.length    +    2];    	non-compiled	[CE]  ')'  expected	271	None	replace
9	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	141	None	replace
10	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	141	None	replace
11	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	141	None	replace
12	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  System.arraycopy(this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	141	None	replace
13	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  5];  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  5];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  5];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    8];    	non-compiled	[CE]  ')'  expected	221	None	replace
14	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  16];  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  16];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  16];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    8];    	non-compiled	[CE]  ')'  expected	221	None	replace
15	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe;  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  &&  urlSafe;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ')'  expected	243	None	replace
16	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  lineSeparator;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  lineSeparator;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  lineSeparator;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	243	None	replace
17	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSeparator;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSeparator;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSeparator;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	243	None	replace
18	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?(byte[])urlSafe  :  null;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	243	None	replace
19	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  ||  urlSafe;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  lineSeparator  ||  urlSafe;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  lineSeparator  ||  urlSafe;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	243	None	replace
20	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||(urlSafe  instanceof  byte[])?  Boolean.TRUE  :  Boolean.FALSE;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	243	None	replace
21	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafesafe;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafesafe;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafesafe;	  this.urlSafe    =    urlSafe    ||    urlSafe;    	non-compiled	[CE]  ';'  expected	243	None	replace
22	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  5  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  5  +  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  5  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    4    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	129	None	replace
23	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  4  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  4  +  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  4  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    4    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	129	None	replace
24	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  2  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  2  +  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  2  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    4    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	129	None	replace
25	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  10  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  10  +  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  10  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    4    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	129	None	replace
26	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  16  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  16  +  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  16  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    4    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	129	None	replace
27	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
28	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
29	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  2  +  1];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  2  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  /  2  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    /    2];    	non-compiled	[CE]  ';'  expected	7	None	replace
30	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  3];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  /  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  /  3];	  this.lineSeparator    =    new    byte[lineSeparator.length    /    2];    	non-compiled	[CE]  ';'  expected	7	None	replace
31	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4];	  this.lineSeparator    =    new    byte[1];    	non-compiled	[CE]  ';'  expected	189	None	replace
32	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[2];	  this.lineSeparator    =    new    byte[1];    	non-compiled	[CE]  ';'  expected	189	None	replace
33	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[128];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[128];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[128];	  this.lineSeparator    =    new    byte[1];    	non-compiled	[CE]  ';'  expected	189	None	replace
34	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3];	  this.lineSeparator    =    new    byte[1];    	non-compiled	[CE]  ';'  expected	189	None	replace
35	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[5];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[5];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[5];	  this.lineSeparator    =    new    byte[1];    	non-compiled	[CE]  ';'  expected	189	None	replace
36	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[6];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[6];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[6];	  this.lineSeparator    =    new    byte[1];    	non-compiled	[CE]  ';'  expected	189	None	replace
37	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[16];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[16];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[16];	  this.lineSeparator    =    new    byte[1];    	non-compiled	[CE]  ';'  expected	189	None	replace
38	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  2  +  1];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  2  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  2  +  1];	  this.lineSeparator    =    new    byte[lineLength    *    2];    	non-compiled	[CE]  ';'  expected	9	None	replace
39	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  3];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  3];	  this.lineSeparator    =    new    byte[lineLength    *    2];    	non-compiled	[CE]  ';'  expected	9	None	replace
40	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  2  +  4];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  2  +  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  2  +  4];	  this.lineSeparator    =    new    byte[lineLength    *    2];    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  2  +  3];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  2  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  2  +  3];	  this.lineSeparator    =    new    byte[lineLength    *    2];    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  6];  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  6];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  6];	  this.lineSeparator    =    new    byte[lineLength    *    2];    	non-compiled	[CE]  ';'  expected	9	None	replace
43	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  10];  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  10];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  10];	  this.lineSeparator    =    new    byte[lineLength    *    2];    	non-compiled	[CE]  ';'  expected	9	None	replace
44	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	164	None	replace
45	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	164	None	replace
46	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	164	None	replace
47	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	164	None	replace
48	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	164	None	replace
49	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	164	None	replace
50	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	164	None	replace
51	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(sep,  0,  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(sep,  0,  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(sep,  0,	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	164	None	replace
52	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength];	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	297	None	replace
53	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	297	None	replace
54	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.line  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.line  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.line	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	297	None	replace
55	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	297	None	replace
56	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	297	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
58	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
59	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
60	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
61	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
62	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
63	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[this.urlSafe.length];	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);	  if(urlSafe)    {    System.arraycopy(CHUNK_SIZE,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUN    	non-compiled	[CE]  ';'  expected	283	None	replace
65	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arra	  if(urlSafe)    {    System.arraycopy(CHUNK_SIZE,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUN    	non-compiled	[CE]  ';'  expected	283	None	replace
66	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SIZE,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUN    	non-compiled	[CE]  ';'  expected	283	None	replace
67	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.	  if(urlSafe)    {    System.arraycopy(CHUNK_SIZE,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUN    	non-compiled	[CE]  ';'  expected	283	None	replace
68	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CH  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CH  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CH	  if(urlSafe)    {    System.arraycopy(CHUNK_SIZE,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUN    	non-compiled	[CE]  ';'  expected	283	None	replace
69	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);	  if(urlSafe)    {    System.arraycopy(CHUNK_SIZE,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUN    	non-compiled	[CE]  ';'  expected	283	None	replace
70	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  2)];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  2)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  2)];	  this.lineSeparator    =    new    byte[(lineLength    +    1)];    	non-compiled	[CE]  ';'  expected	132	None	replace
71	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1)+  1];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1)+  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  1)+  1];	  this.lineSeparator    =    new    byte[(lineLength    +    1)];    	non-compiled	[CE]  ';'  expected	132	None	replace
72	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  1)];  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  1)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  1)];	  this.lineSeparator    =    new    byte[(lineLength    +    1)];    	non-compiled	[CE]  ';'  expected	132	None	replace
73	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(this.urlSafe  +  1)];  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(this.urlSafe  +  1)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(this.urlSafe  +  1)];	  this.lineSeparator    =    new    byte[(lineLength    +    1)];    	non-compiled	[CE]  ';'  expected	132	None	replace
74	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1  +  1)];  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1  +  1)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  1  +  1)];	  this.lineSeparator    =    new    byte[(lineLength    +    1)];    	non-compiled	[CE]  ';'  expected	132	None	replace
75	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1)/  1];  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1)/  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  1)/  1];	  this.lineSeparator    =    new    byte[(lineLength    +    1)];    	non-compiled	[CE]  ';'  expected	132	None	replace
76	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1)/  2];  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  1)/  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  1)/  2];	  this.lineSeparator    =    new    byte[(lineLength    +    1)];    	non-compiled	[CE]  ';'  expected	132	None	replace
77	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  *  4];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  *  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  *  4];	  this.lineSeparator    =    new    byte[this.urlSafe    +    4];    	non-compiled	[CE]  ';'  expected	229	None	replace
78	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  2];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  2];	  this.lineSeparator    =    new    byte[this.urlSafe    +    4];    	non-compiled	[CE]  ';'  expected	229	None	replace
79	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  3];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  3];	  this.lineSeparator    =    new    byte[this.urlSafe    +    4];    	non-compiled	[CE]  ';'  expected	229	None	replace
80	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  6];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  6];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  6];	  this.lineSeparator    =    new    byte[this.urlSafe    +    4];    	non-compiled	[CE]  ';'  expected	229	None	replace
81	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  5];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  5];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  5];	  this.lineSeparator    =    new    byte[this.urlSafe    +    4];    	non-compiled	[CE]  ';'  expected	229	None	replace
82	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUN  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUN  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUN	  if(urlSafe)    {    this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	207	None	replace
83	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	207	None	replace
84	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arra  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arra  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arra	  if(urlSafe)    {    this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	207	None	replace
85	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.	  if(urlSafe)    {    this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	207	None	replace
86	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_	  if(urlSafe)    {    this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	207	None	replace
87	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
88	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
89	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
90	[BUG]  [BUGGY]  ||!urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||!urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||!urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
91	[BUG]  [BUGGY]  ||  this.urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  this.urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  this.urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
92	[BUG]  [BUGGY]  &&  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  &&  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	&&  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
93	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
94	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
95	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
96	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  :  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  :  expected	27	None	replace
97	[BUG]  [BUGGY]  ||!urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||!urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||!urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
98	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
99	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
100	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
101	[BUG]  [BUGGY]  &&  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  &&  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	&&  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
102	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  3  +  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  3  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  3  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4    +    1];    	non-compiled	[CE]  ';'  expected	51	None	replace
103	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4  +  1];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  4  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4    +    1];    	non-compiled	[CE]  ';'  expected	51	None	replace
104	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  2];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  2];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4    +    1];    	non-compiled	[CE]  ';'  expected	51	None	replace
105	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  5  +  1];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  5  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  5  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4    +    1];    	non-compiled	[CE]  ';'  expected	51	None	replace
106	[BUG]  [BUGGY]  if(!urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(!urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(!urlSafe)  {  System.arraycopy(CHUNK_SIZE,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.arraycopy(CHUN	  if(urlSafe)    {    System.arraycopy(CHUNK_SIZE,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy(CHUNK_    	non-compiled	[CE]  ';'  expected	284	None	replace
107	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	241	None	replace
108	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	241	None	replace
109	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
110	[BUG]  [BUGGY]  ||  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
111	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
112	[BUG]  [BUGGY]  ||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
113	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
114	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
115	[BUG]  [BUGGY]  &&  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  &&  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	&&  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
116	[BUG]  [BUGGY]  ||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||!urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	258	None	replace
118	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	258	None	replace
119	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	258	None	replace
120	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	300	None	replace
121	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineS  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	300	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.separator,    0,    this.separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	146	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  this.lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  this.lineLength);	  System.arraycopy(this.separator,    0,    this.separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	146	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.separator.length);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.separator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.separator.length);	  System.arraycopy(this.separator,    0,    this.separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	146	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength  -  1);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  this.lineLength  -  1);	  System.arraycopy(this.separator,    0,    this.separator,    0,    this.lineLength);    	non-compiled	[CE]  ';'  expected	146	None	replace
126	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	135	None	replace
127	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	135	None	replace
128	[BUG]  [BUGGY]  safely())  {  this.lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safely())  {  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safely())  {  this.lineSeparator  =  new  byte[lineLength];	  safely())    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	206	None	replace
129	[BUG]  [BUGGY]  safely())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safely())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safely())  {  this.lineSeparator  =  new  byte[lineSeparator.length];	  safely())    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	206	None	replace
130	[BUG]  [BUGGY]  safe())  {  this.lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe())  {  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe())  {  this.lineSeparator  =  new  byte[lineLength];	  safely())    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	206	None	replace
131	[BUG]  [BUGGY]  safeArray())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safeArray())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safeArray())  {  this.lineSeparator  =  new  byte[lineSeparator.length];	  safely())    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	206	None	replace
132	[BUG]  [BUGGY]  safely())  {  this.lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safely())  {  this.lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safely())  {  this.lineSeparator  =  new  byte[lineLength];  }	  safely())    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	206	None	replace
133	[BUG]  [BUGGY]  safe(urlSafe))  {  this.lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe(urlSafe))  {  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe(urlSafe))  {  this.lineSeparator  =  new  byte[lineLength];	  safely())    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	206	None	replace
134	[BUG]  [BUGGY]  safeInternal())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safeInternal())  {  this.lineSeparator  =  new  byte[lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safeInternal())  {  this.lineSeparator  =  new  byte[lineSeparator.length];	  safely())    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	206	None	replace
135	[BUG]  [BUGGY]  safe(this.urlSafe))  {  this.lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe(this.urlSafe))  {  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe(this.urlSafe))  {  this.lineSeparator  =  new  byte[lineLength];	  safely())    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	206	None	replace
136	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_LENGTH  +  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_LENGTH  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_LENGTH  +  1];	  this.lineSeparator    =    new    byte[lineLength    +    3];    	non-compiled	[CE]  ';'  expected	187	None	replace
137	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)/  1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)/  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)/  1];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)+    1];    	non-compiled	[CE]  ';'  expected	127	None	replace
138	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  2];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  2];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)+    1];    	non-compiled	[CE]  ';'  expected	127	None	replace
139	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  3];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  3];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)+    1];    	non-compiled	[CE]  ';'  expected	127	None	replace
140	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length)+  1];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length)+  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length)+  1];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)+    1];    	non-compiled	[CE]  ';'  expected	127	None	replace
141	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  4];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)+  4];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)+    1];    	non-compiled	[CE]  ';'  expected	127	None	replace
142	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)*  1];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)*  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)*  1];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)+    1];    	non-compiled	[CE]  ';'  expected	127	None	replace
143	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)-  1];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)-  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  lineSeparator.length)-  1];	  this.lineSeparator    =    new    byte[(lineLength    +    lineSeparator.length)+    1];    	non-compiled	[CE]  ';'  expected	127	None	replace
144	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	276	None	replace
145	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	276	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineLength);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	276	None	replace
147	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	276	None	replace
148	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineS  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	276	None	replace
149	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length  +  1)];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length  +  1)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length  +  1)];	  this.lineSeparator    =    new    byte[(lineLength    -    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	194	None	replace
150	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length  -  1)];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length  -  1)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length  -  1)];	  this.lineSeparator    =    new    byte[(lineLength    -    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	194	None	replace
151	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length)+  1];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length)+  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  -  lineSeparator.length)+  1];	  this.lineSeparator    =    new    byte[(lineLength    -    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	194	None	replace
152	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  -  lineLength)];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  -  lineLength)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  -  lineLength)];	  this.lineSeparator    =    new    byte[(lineLength    -    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	194	None	replace
153	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  1  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  -  1  +  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  -  1  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    -    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	194	None	replace
154	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(this.urlSafe  -  lineSeparator.length)];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(this.urlSafe  -  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(this.urlSafe  -  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    -    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	194	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
156	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(separator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
157	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineSeparator.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[64  +  lineSeparator.length  -  1];	  this.lineSeparator    =    new    byte[64    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	242	None	replace
158	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[64  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[64    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	242	None	replace
159	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineLength];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[64  +  lineLength];	  this.lineSeparator    =    new    byte[64    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	242	None	replace
160	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineSeparator.length  *  4];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[64  +  lineSeparator.length  *  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[64  +  lineSeparator.length  *  4];	  this.lineSeparator    =    new    byte[64    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	242	None	replace
161	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[64  *  lineSeparator.length];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[64  *  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[64  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[64    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	242	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	160	None	replace
163	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	116	None	replace
164	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	116	None	replace
165	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.lineS	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	116	None	replace
166	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	116	None	replace
167	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
168	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
169	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[this.urlSafe];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[this.urlSafe];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[this.urlSafe];	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
170	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[this.urlSafe];	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
171	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(this.lineSeparator);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(this.lineSeparator);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(this.lineSeparator);	  this.urlSafe    =    urlSafe    +    System.identityHashCode(lineSeparator);    	non-compiled	[CE]  ';'  expected	245	None	replace
172	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(this.urlSafe);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(this.urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(this.urlSafe);	  this.urlSafe    =    urlSafe    +    System.identityHashCode(lineSeparator);    	non-compiled	[CE]  ';'  expected	245	None	replace
173	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator,  urlSafe);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator,  urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator,  urlSafe);	  this.urlSafe    =    urlSafe    +    System.identityHashCode(lineSeparator);    	non-compiled	[CE]  ';'  expected	245	None	replace
174	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator.length);	  this.urlSafe    =    urlSafe    +    System.identityHashCode(lineSeparator);    	non-compiled	[CE]  ';'  expected	245	None	replace
175	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(this.base64Separator);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(this.base64Separator);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(this.base64Separator);	  this.urlSafe    =    urlSafe    +    System.identityHashCode(lineSeparator);    	non-compiled	[CE]  ';'  expected	245	None	replace
176	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  |  System.identityHashCode(lineSeparator);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  |  System.identityHashCode(lineSeparator);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  |  System.identityHashCode(lineSeparator);	  this.urlSafe    =    urlSafe    +    System.identityHashCode(lineSeparator);    	non-compiled	[CE]  ';'  expected	245	None	replace
177	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(this.base64);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(this.base64);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(this.base64);	  this.urlSafe    =    urlSafe    +    System.identityHashCode(lineSeparator);    	non-compiled	[CE]  ';'  expected	245	None	replace
178	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator)+  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator)+  1;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  System.identityHashCode(lineSeparator)+  1;	  this.urlSafe    =    urlSafe    +    System.identityHashCode(lineSeparator);    	non-compiled	[CE]  ';'  expected	245	None	replace
179	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[4];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	21	None	replace
180	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[6];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[6];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[6];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[4];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	21	None	replace
181	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.decodeSize  +  1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.decodeSize  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.decodeSize  +  1];	  this.lineSeparator    =    new    byte[this.decodeSize];    	non-compiled	[CE]  ';'  expected	228	None	replace
182	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.encodeSize];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.encodeSize];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.encodeSize];	  this.lineSeparator    =    new    byte[this.decodeSize];    	non-compiled	[CE]  ';'  expected	228	None	replace
183	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }	  this.lineSeparator    =    new    byte[this.decodeSize];    	non-compiled	[CE]  ';'  expected	228	None	replace
184	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  :  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.decodeSize];    	non-compiled	[CE]  :  expected	228	None	replace
185	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  :  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.decodeSize];    	non-compiled	[CE]  :  expected	228	None	replace
186	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  :  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.decodeSize];    	non-compiled	[CE]  :  expected	228	None	replace
187	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  :  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.decodeSize];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  this.lineSeparator    =    new    byte[this.decodeSize];    	non-compiled	[CE]  :  expected	228	None	replace
188	[BUG]  [BUGGY]  this.urlSafe  =  lineSeparator  +  urlSafe.length;  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  lineSeparator  +  urlSafe.length;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  lineSeparator  +  urlSafe.length;	  this.urlSafe    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  :  expected	248	None	replace
189	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  fileSeparator.length;  [CE]  :  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  fileSeparator.length;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  fileSeparator.length;	  this.urlSafe    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  :  expected	248	None	replace
190	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  this.lineSeparator.length;  [CE]  :  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  this.lineSeparator.length;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  this.lineSeparator.length;	  this.urlSafe    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  :  expected	248	None	replace
191	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  |  lineSeparator.length;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  |  lineSeparator.length;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  |  lineSeparator.length;	  this.urlSafe    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	248	None	replace
192	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  lineLength;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  lineLength;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  lineLength;	  this.urlSafe    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	248	None	replace
193	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  +  0,  lineSeparator.length;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  +  0,  lineSeparator.length;  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  +  0,  lineSeparator.length;	  this.urlSafe    =    urlSafe    +    lineSeparator.length;    	non-compiled	[CE]  ';'  expected	248	None	replace
194	[BUG]  [BUGGY]  this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  safe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
195	[BUG]  [BUGGY]  this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
196	[BUG]  [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	SecuritySystem.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
197	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
198	[BUG]  [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
199	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
200	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
201	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
202	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Line_SEPARATOR.length  -  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[Line_SEPARATOR.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[Line_SEPARATOR.length  -  1];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length    -    1];    	non-compiled	[CE]  ';'  expected	262	None	replace
203	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  -  2];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  -  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  -  2];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length    -    1];    	non-compiled	[CE]  ';'  expected	262	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  2);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	159	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	159	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  3);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  3);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	159	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  4);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  4);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  +  4);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	159	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    +    1);    	non-compiled	[CE]  ';'  expected	159	None	replace
209	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  1];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  1];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR];    	non-compiled	[CE]  ';'  expected	186	None	replace
210	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[HOUR_SEPARATOR];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[HOUR_SEPARATOR];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[HOUR_SEPARATOR];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR];    	non-compiled	[CE]  ';'  expected	186	None	replace
211	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  2];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  2];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR];    	non-compiled	[CE]  ';'  expected	186	None	replace
212	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  4];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR  +  4];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR];    	non-compiled	[CE]  ';'  expected	186	None	replace
213	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length  -  1);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	233	None	replace
214	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  2);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  2);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  2);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	233	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineLength  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineLength  -  1);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	233	None	replace
216	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  4);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  4);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  -  4);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength    -    1);    	non-compiled	[CE]  ';'  expected	233	None	replace
217	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  /  1];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  /  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  /  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    /    1];    	non-compiled	[CE]  ';'  expected	182	None	replace
218	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineLength    *    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	280	None	replace
219	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1  *  lineSeparator.length];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[1  *  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    *    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	280	None	replace
220	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0  *  lineSeparator.length];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[0  *  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    *    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	280	None	replace
221	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  *  lineSeparator.length];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  *  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    *    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	280	None	replace
222	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4  *  lineSeparator.length];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[4  *  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    *    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	280	None	replace
223	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[len  *  lineSeparator.length];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[len  *  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[len  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    *    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	280	None	replace
224	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3  *  lineSeparator.length];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[3  *  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[lineLength    *    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	280	None	replace
225	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Length  *  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[Length  *  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[Length  *  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineLength    *    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	280	None	replace
226	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  1];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	247	None	replace
227	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineLength];  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineLength];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	247	None	replace
228	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	247	None	replace
229	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	247	None	replace
230	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	247	None	replace
231	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  2];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  2];  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  2];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	247	None	replace
232	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	247	None	replace
233	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  4];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  4];  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  4];	  this.urlSafe    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  ';'  expected	247	None	replace
234	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	162	None	replace
235	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	162	None	replace
236	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	162	None	replace
237	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	162	None	replace
238	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	162	None	replace
239	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.sep,  0,  lineS  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.sep,  0,  lineS  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.sep,  0,  lineS	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	162	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	162	None	replace
241	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.s  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.s  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.sep,  0,  this.sep,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.s	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.sep,    0,    this.sep,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	162	None	replace
242	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
243	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
244	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
245	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
246	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	178	None	replace
247	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	178	None	replace
248	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	178	None	replace
249	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	178	None	replace
250	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	178	None	replace
251	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_S  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_S  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_S	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	178	None	replace
252	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[Length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	178	None	replace
253	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  -  2];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  -  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  -  2];	  this.lineSeparator    =    new    byte[this.lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	270	None	replace
254	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  /  1];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  /  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  /  1];	  this.lineSeparator    =    new    byte[this.lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	270	None	replace
255	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  -  1]  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  -  1]  +  1;  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  -  1]  +  1;	  this.lineSeparator    =    new    byte[this.lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	270	None	replace
256	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  -  3];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  -  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  -  3];	  this.lineSeparator    =    new    byte[this.lineSeparator.length    -    1];    	non-compiled	[CE]  ';'  expected	270	None	replace
257	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	197	None	replace
258	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[LINE_SEPARATOR.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    System.arraycopy(CHUNK_S    	non-compiled	[CE]  ';'  expected	208	None	replace
259	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  1];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  1];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    2];    	non-compiled	[CE]  ';'  expected	254	None	replace
260	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  3];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  3];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    2];    	non-compiled	[CE]  ';'  expected	254	None	replace
261	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  4];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  4];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    2];    	non-compiled	[CE]  ';'  expected	254	None	replace
262	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  3];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  2  +  3];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    2];    	non-compiled	[CE]  ';'  expected	254	None	replace
263	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  /  2];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  /  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  /  2];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    2];    	non-compiled	[CE]  ';'  expected	254	None	replace
264	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  6];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  6];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  6];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    2];    	non-compiled	[CE]  ';'  expected	254	None	replace
265	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator!=  ';'  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator!=  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator!=  ';'	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	236	None	replace
266	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  ==  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  ==  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  ==  ';'	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	236	None	replace
267	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [Delete]  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [Delete]  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  [Delete]  ';'	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	236	None	replace
268	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  >=  ';'  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  >=  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  >=  ';'	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	236	None	replace
269	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  >>  ';'  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  >>  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator  >>  ';'	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator    	non-compiled	[CE]  ';'  expected	236	None	replace
270	[BUG]  [BUGGY]  eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	269	None	replace
271	[BUG]  [BUGGY]  eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	269	None	replace
272	[BUG]  [BUGGY]  eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	269	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	11	None	replace
274	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    	non-compiled	[CE]  ';'  expected	100	None	replace
275	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    	non-compiled	[CE]  ';'  expected	100	None	replace
276	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[this.urlSafe.length];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[this.urlSafe.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[this.urlSafe.length];	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    	non-compiled	[CE]  ';'  expected	100	None	replace
277	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    	non-compiled	[CE]  ';'  expected	100	None	replace
278	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	250	None	replace
279	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	250	None	replace
280	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	250	None	replace
281	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	250	None	replace
282	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	250	None	replace
283	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.separator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.separator,  0,  lineSeparator.length);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	142	None	replace
284	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	142	None	replace
285	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.separator,  0,  lineSeparator.length);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	142	None	replace
286	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.separator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.separator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.separator,  0,  lineSeparator.length);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	142	None	replace
287	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length  +  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineSeparator.length  +  1);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	142	None	replace
288	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	156	None	replace
289	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	156	None	replace
290	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	156	None	replace
291	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  3);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  3);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  3);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	156	None	replace
292	[BUG]  [BUGGY]  safe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	172	None	replace
293	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  10];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  10];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  10];	  this.lineSeparator    =    new    byte[lineSeparator.length    +    5];    	non-compiled	[CE]  ';'  expected	1	None	replace
294	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	274	None	replace
295	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	274	None	replace
296	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
297	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSe  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSe  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSe	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
298	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
299	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
300	[BUG]  [BUGGY]  if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  safe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
301	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
302	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    +    1];    }    	non-compiled	[CE]  ';'  expected	115	None	replace
303	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    +    1];    }    	non-compiled	[CE]  ';'  expected	115	None	replace
304	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  +  1];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    +    1];    }    	non-compiled	[CE]  ';'  expected	115	None	replace
305	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[lineSeparator.length  +  1];	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    +    1];    }    	non-compiled	[CE]  ';'  expected	115	None	replace
306	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	86	None	replace
307	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  this.urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	86	None	replace
308	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.urlSafe.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.urlSafe,  0,  this.urlSafe.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	86	None	replace
309	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  sep.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  sep.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  sep.length);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    sep.length);    	non-compiled	[CE]  ';'  expected	277	None	replace
310	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    sep.length);    	non-compiled	[CE]  ';'  expected	277	None	replace
311	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  sep,  0,  sep.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  sep,  0,  sep.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  sep,  0,  sep.length);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    sep.length);    	non-compiled	[CE]  ';'  expected	277	None	replace
312	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  sep.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  sep.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  sep.length);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    sep.length);    	non-compiled	[CE]  ';'  expected	277	None	replace
313	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    sep.length);    	non-compiled	[CE]  ';'  expected	277	None	replace
314	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  sep.length  -  1);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  sep.length  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  sep.length  -  1);	  System.arraycopy(sep,    0,    this.lineSeparator,    0,    sep.length);    	non-compiled	[CE]  ';'  expected	277	None	replace
315	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	285	None	replace
316	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	285	None	replace
317	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	285	None	replace
318	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	285	None	replace
319	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	285	None	replace
320	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	285	None	replace
321	[BUG]  [BUGGY]  ||!urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||!urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||!urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	285	None	replace
322	[BUG]  [BUGGY]  System.arraycopy(this.encodeTable,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.encodeTable,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.encodeTable,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	190	None	replace
323	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	42	None	replace
324	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Line_SEPARATOR.length  +  1];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[Line_SEPARATOR.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[Line_SEPARATOR.length  +  1];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length    +    1];    	non-compiled	[CE]  ';'  expected	67	None	replace
325	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  3];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  3];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length    +    1];    	non-compiled	[CE]  ';'  expected	67	None	replace
326	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  4];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  +  4];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length    +    1];    	non-compiled	[CE]  ';'  expected	67	None	replace
327	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  *  1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  *  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SEPARATOR.length  *  1];	  this.lineSeparator    =    new    byte[LINE_SEPARATOR.length    +    1];    	non-compiled	[CE]  ';'  expected	67	None	replace
328	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  1];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  1];	  this.lineSeparator    =    new    byte[URL_SAFE_ENCODE_TABLE.length];    	non-compiled	[CE]  ';'  expected	261	None	replace
329	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[LINE_SAFE_ENCODE_TABLE.length];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[LINE_SAFE_ENCODE_TABLE.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[LINE_SAFE_ENCODE_TABLE.length];	  this.lineSeparator    =    new    byte[URL_SAFE_ENCODE_TABLE.length];    	non-compiled	[CE]  ';'  expected	261	None	replace
330	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  2];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  2];	  this.lineSeparator    =    new    byte[URL_SAFE_ENCODE_TABLE.length];    	non-compiled	[CE]  ';'  expected	261	None	replace
331	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  4];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  +  4];	  this.lineSeparator    =    new    byte[URL_SAFE_ENCODE_TABLE.length];    	non-compiled	[CE]  ';'  expected	261	None	replace
332	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  -  1];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[URL_SAFE_ENCODE_TABLE.length  -  1];	  this.lineSeparator    =    new    byte[URL_SAFE_ENCODE_TABLE.length];    	non-compiled	[CE]  ';'  expected	261	None	replace
333	[BUG]  [BUGGY]  eof  byte[]  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  byte[]  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  byte[]  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	65	None	replace
334	[BUG]  [BUGGY]  eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  byte[]  lineSeparator)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	65	None	replace
335	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	65	None	replace
336	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	  eof    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	65	None	replace
337	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
338	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
339	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
340	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSe  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSe  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSe	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
341	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
342	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
343	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
344	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	173	None	replace
345	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  2];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  -  2];	  this.lineSeparator    =    new    byte[this.urlSafe.length    -    1];    	non-compiled	[CE]  ';'  expected	237	None	replace
346	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  4];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  -  4];	  this.lineSeparator    =    new    byte[this.urlSafe.length    -    1];    	non-compiled	[CE]  ';'  expected	237	None	replace
347	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  3];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  -  3];	  this.lineSeparator    =    new    byte[this.urlSafe.length    -    1];    	non-compiled	[CE]  ';'  expected	237	None	replace
348	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  1  +  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  1  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  -  1  +  1];	  this.lineSeparator    =    new    byte[this.urlSafe.length    -    1];    	non-compiled	[CE]  ';'  expected	237	None	replace
349	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  1],  urlSafe);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  -  1],  urlSafe);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  -  1],  urlSafe);	  this.lineSeparator    =    new    byte[this.urlSafe.length    -    1];    	non-compiled	[CE]  ';'  expected	237	None	replace
350	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  /  1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  /  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  /  1];	  this.lineSeparator    =    new    byte[this.urlSafe.length    -    1];    	non-compiled	[CE]  ';'  expected	237	None	replace
351	[BUG]  [BUGGY]  System.arraycopy(chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Chunk_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
352	[BUG]  [BUGGY]  System.arraycopy(Base64_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(Base64_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(Base64_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(Chunk_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
353	[BUG]  [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(Chunk_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
354	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4  +  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[4  +  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length    +    1];    	non-compiled	[CE]  ';'  expected	152	None	replace
355	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0  +  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[0  +  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length    +    1];    	non-compiled	[CE]  ';'  expected	152	None	replace
356	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1  +  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[1  +  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length    +    1];    	non-compiled	[CE]  ';'  expected	152	None	replace
357	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length  +  2];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length  +  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  +  lineSeparator.length  +  2];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length    +    1];    	non-compiled	[CE]  ';'  expected	152	None	replace
358	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3  +  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[3  +  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length    +    1];    	non-compiled	[CE]  ';'  expected	152	None	replace
359	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[5  +  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[5  +  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[5  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[lineLength    +    lineSeparator.length    +    1];    	non-compiled	[CE]  ';'  expected	152	None	replace
360	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4  +  2];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4  +  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  4  +  2];	  this.lineSeparator    =    new    byte[lineLength    *    4];    	non-compiled	[CE]  ';'  expected	54	None	replace
361	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4  +  3];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  *  4  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  *  4  +  3];	  this.lineSeparator    =    new    byte[lineLength    *    4];    	non-compiled	[CE]  ';'  expected	54	None	replace
362	[BUG]  [BUGGY]  if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line,    0,    lineSeparator.length);    System.arra    	non-compiled	[CE]  ';'  expected	61	None	replace
363	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arra	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line,    0,    lineSeparator.length);    System.arra    	non-compiled	[CE]  ';'  expected	61	None	replace
364	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line,    0,    lineSeparator.length);    System.arra    	non-compiled	[CE]  ';'  expected	61	None	replace
365	[BUG]  [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.base64,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.decodeTable,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	210	None	replace
366	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  sep,  0,  lineLength);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  sep,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  sep,  0,  lineLength);	  System.arraycopy(sep,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	287	None	replace
367	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  sepLength);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  sepLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  sepLength);	  System.arraycopy(sep,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	287	None	replace
368	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.separator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.separator,  0,  this.urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.separator,  0,  this.urlSafe);	  System.arraycopy(sep,    0,    this.separator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	287	None	replace
369	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	165	None	replace
370	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	165	None	replace
371	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	165	None	replace
372	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	165	None	replace
373	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	165	None	replace
374	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[CHUNK_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	165	None	replace
375	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe;  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	165	None	replace
376	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineS	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	165	None	replace
377	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  urlSafe.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	91	None	replace
378	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  this.lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  this.lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	91	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	91	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	91	None	replace
381	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineLength);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.urlSafe,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	91	None	replace
382	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSafe,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	91	None	replace
383	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	77	None	replace
384	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	77	None	replace
385	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe);    	non-compiled	[CE]  ';'  expected	77	None	replace
386	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4  +  lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[4  +  lineSeparator.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4  +  lineSeparator.length  -  1];	  this.lineSeparator    =    new    byte[4    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	149	None	replace
387	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    }    	non-compiled	[CE]  ';'  expected	251	None	replace
388	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    }    	non-compiled	[CE]  ';'  expected	251	None	replace
389	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length  -  1];  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    }    	non-compiled	[CE]  ';'  expected	251	None	replace
390	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1]);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1]);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1]);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    }    	non-compiled	[CE]  ';'  expected	251	None	replace
391	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1];	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    }    	non-compiled	[CE]  ';'  expected	251	None	replace
392	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1]);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1]);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length  -  1]);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length    -    1];    }    	non-compiled	[CE]  ';'  expected	251	None	replace
393	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  1)];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  1)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  +  1)];	  this.lineSeparator    =    new    byte[(lineSeparator.length    +    lineLength)];    	non-compiled	[CE]  ';'  expected	128	None	replace
394	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  1  +  lineLength)];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  1  +  lineLength)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  +  1  +  lineLength)];	  this.lineSeparator    =    new    byte[(lineSeparator.length    +    lineLength)];    	non-compiled	[CE]  ';'  expected	128	None	replace
395	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  2)];  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  2)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  +  2)];	  this.lineSeparator    =    new    byte[(lineSeparator.length    +    lineLength)];    	non-compiled	[CE]  ';'  expected	128	None	replace
396	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  4  +  lineLength)];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  4  +  lineLength)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  +  4  +  lineLength)];	  this.lineSeparator    =    new    byte[(lineSeparator.length    +    lineLength)];    	non-compiled	[CE]  ';'  expected	128	None	replace
397	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  *  lineLength)];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  *  lineLength)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  *  lineLength)];	  this.lineSeparator    =    new    byte[(lineSeparator.length    +    lineLength)];    	non-compiled	[CE]  ';'  expected	128	None	replace
398	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  3  +  lineLength)];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  3  +  lineLength)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  +  3  +  lineLength)];	  this.lineSeparator    =    new    byte[(lineSeparator.length    +    lineLength)];    	non-compiled	[CE]  ';'  expected	128	None	replace
399	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  6  +  lineLength)];  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineSeparator.length  +  6  +  lineLength)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineSeparator.length  +  6  +  lineLength)];	  this.lineSeparator    =    new    byte[(lineSeparator.length    +    lineLength)];    	non-compiled	[CE]  ';'  expected	128	None	replace
400	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength];  }	  this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ';'  expected	113	None	replace
401	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  4];  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  +  4];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  +  4];  }	  this.lineSeparator    =    new    byte[lineSeparator.length];    }    	non-compiled	[CE]  ';'  expected	113	None	replace
402	[BUG]  [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
403	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
404	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
405	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
406	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
407	[BUG]  [BUGGY]  ||!urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||!urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||!urlSafe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
408	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	298	None	replace
409	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	298	None	replace
410	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	298	None	replace
411	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	298	None	replace
412	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ')'  expected	298	None	replace
413	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSe  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSe  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSe	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	298	None	replace
414	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineS	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	298	None	replace
415	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	279	None	replace
416	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	279	None	replace
417	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	279	None	replace
418	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  :  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  :  expected	279	None	replace
419	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  :  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  :  expected	279	None	replace
420	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[lineLength];  [CE]  :  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[lineLength];	  This.lineSeparator    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  :  expected	282	None	replace
421	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  -  1];  [CE]  :  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[lineSeparator.length  -  1];	  This.lineSeparator    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  :  expected	282	None	replace
422	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  +  4];  [CE]  :  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  +  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[lineSeparator.length  +  4];	  This.lineSeparator    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  :  expected	282	None	replace
423	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[this.lineSeparator.length];  [CE]  :  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[this.lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[this.lineSeparator.length];	  This.lineSeparator    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  :  expected	282	None	replace
424	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  +  2];  [CE]  :  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  +  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[lineSeparator.length  +  2];	  This.lineSeparator    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  :  expected	282	None	replace
425	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  +  3];  [CE]  :  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[lineSeparator.length  +  3];	  This.lineSeparator    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  :  expected	282	None	replace
426	[BUG]  [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  *  4];  [CE]  :  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  This.lineSeparator  =  new  byte[lineSeparator.length  *  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	This.lineSeparator  =  new  byte[lineSeparator.length  *  4];	  This.lineSeparator    =    new    byte[lineSeparator.length];    	non-compiled	[CE]  :  expected	282	None	replace
427	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  3];  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  +  3];	  this.lineSeparator    =    new    byte[this.urlSafe.length    +    1];    	non-compiled	[CE]  :  expected	95	None	replace
428	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  1];  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  1];	  this.lineSeparator    =    new    byte[this.urlSafe.length    +    1];    	non-compiled	[CE]  :  expected	95	None	replace
429	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  1],  urlSafe);  [CE]  :  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  1],  urlSafe);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  +  1],  urlSafe);	  this.lineSeparator    =    new    byte[this.urlSafe.length    +    1];    	non-compiled	[CE]  :  expected	95	None	replace
430	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  5];  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  5];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  +  5];	  this.lineSeparator    =    new    byte[this.urlSafe.length    +    1];    	non-compiled	[CE]  :  expected	95	None	replace
431	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  1].length;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  +  1].length;  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  +  1].length;	  this.lineSeparator    =    new    byte[this.urlSafe.length    +    1];    	non-compiled	[CE]  :  expected	95	None	replace
432	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.array  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.array  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.array	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arraycopy    	non-compiled	[CE]  :  expected	214	None	replace
433	[BUG]  [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
434	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS!=  ';'  [CE]  :  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS!=  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS!=  ';'	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  :  expected	44	None	replace
435	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSported  [CE]  :  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSported  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSported	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  :  expected	44	None	replace
436	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  >>  ';'  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  >>  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  >>  ';'	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  ';'  expected	44	None	replace
437	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  ==  ';'  [CE]  :  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  ==  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  ==  ';'	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  :  expected	44	None	replace
438	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [Delete]  ';'  [CE]  :  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [Delete]  ';'  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineS  [Delete]  ';'	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineS    	non-compiled	[CE]  :  expected	44	None	replace
439	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  :  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  :  expected	168	None	replace
440	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  :  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  :  expected	168	None	replace
441	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[0];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  :  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[0];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[0];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  :  expected	168	None	replace
442	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[1];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  :  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[1];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[1];  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineLength];    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  :  expected	168	None	replace
443	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[Line_SEPARATOR.length];    	non-compiled	[CE]  :  expected	263	None	replace
444	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[Line_SEPARATOR.length];    	non-compiled	[CE]  :  expected	263	None	replace
445	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }	  this.lineSeparator    =    new    byte[Line_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	263	None	replace
446	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[Line_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	263	None	replace
447	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[Line_SEPARATOR.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.lineSeparator    =    new    byte[Line_SEPARATOR.length];    	non-compiled	[CE]  ';'  expected	263	None	replace
448	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[2];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
449	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[4];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
450	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[1];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
451	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
452	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  -  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	202	None	replace
453	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  +  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.urlSafe.length  +  1);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe.length);    	non-compiled	[CE]  ';'  expected	202	None	replace
454	[BUG]  [BUGGY]  System.arraycopy(4,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(4,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(4,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	169	None	replace
455	[BUG]  [BUGGY]  System.arraycopy(1,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(1,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(1,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	169	None	replace
456	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  1  +  1];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  1  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  1  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    -    1    +    1];    	non-compiled	[CE]  ';'  expected	253	None	replace
457	[BUG]  [BUGGY]  this.urlSafe  =  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(this.urlSafe,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	292	None	replace
458	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(this.urlSafe,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  not  a  statement	292	None	replace
459	[BUG]  [BUGGY]  this.urlSafe  =  this.urlSafe  ==  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  this.urlSafe  ==  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  this.urlSafe  ==  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(this.urlSafe,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	292	None	replace
460	[BUG]  [BUGGY]  this.urlSafe  =  this.urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  this.urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  this.urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(this.urlSafe,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	292	None	replace
461	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe!=  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(this.urlSafe,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	292	None	replace
462	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(this.urlSafe,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(this.urlSafe,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	292	None	replace
463	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	163	None	replace
464	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	163	None	replace
465	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineSeparator.length);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	163	None	replace
466	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	163	None	replace
467	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSafe,  0,  lineLength);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	163	None	replace
468	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	163	None	replace
469	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	163	None	replace
470	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  this.urlSafe  =  urlSafe;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  this.urlSafe  =  urlSafe;  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  URL_SAFE_ENCODE_TABLE;  }  else  {  this.urlSafe  =  urlSafe;  }	  this.urlSafe    =    URL_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	163	None	replace
471	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arra  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arra	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line,    0,    lineSeparator.length);    System.arra    	non-compiled	[CE]  ';'  expected	59	None	replace
472	[BUG]  [BUGGY]  safe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
473	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
474	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  lineSeparator,  0,  urlSafe);	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
475	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  urlSafe);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  urlSafe);	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
476	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  eof    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	301	None	replace
477	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  eof    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	301	None	replace
478	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }	  eof    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	301	None	replace
479	[BUG]  [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  eof  urlSafe)  {  this.lineSeparator  =  new  byte[lineSeparator.length];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  eof    urlSafe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	301	None	replace
480	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  6];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  6];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  6];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4    +    3];    	non-compiled	[CE]  ';'  expected	220	None	replace
481	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  5];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  5];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  4  +  5];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4    +    3];    	non-compiled	[CE]  ';'  expected	220	None	replace
482	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  5  +  3];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  5  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  5  +  3];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    4    +    3];    	non-compiled	[CE]  ';'  expected	220	None	replace
483	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
484	[BUG]  [BUGGY]  ||  this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  this.urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
485	[BUG]  [BUGGY]  ||!urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||!urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||!urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
486	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
487	[BUG]  [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  eof  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  ||    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
488	[BUG]  [BUGGY]  &&  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  &&  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	&&  urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  ||    urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineS    	non-compiled	[CE]  ';'  expected	5	None	replace
489	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	98	None	replace
490	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	98	None	replace
491	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSe  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSe  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe.length];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSe	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe.length];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	98	None	replace
492	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  2);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  2);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  2);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	148	None	replace
493	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  3);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  3);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  3);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	148	None	replace
494	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  4);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  4);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  4);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	148	None	replace
495	[BUG]  [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  6);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  6);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.separator,  0,  this.separator,  0,  lineLength  +  6);	  System.arraycopy(this.separator,    0,    this.separator,    0,    lineLength    +    1);    	non-compiled	[CE]  ';'  expected	148	None	replace
496	[BUG]  [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.urlSafe,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	16	None	replace
497	[BUG]  [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.urlSafe);    	non-compiled	[CE]  ';'  expected	16	None	replace
498	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  +  1];  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[this.urlSafe    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	109	None	replace
499	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  -  1];	  this.lineSeparator    =    new    byte[this.urlSafe    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	109	None	replace
500	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.decodeSize  +  lineSeparator.length];  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.decodeSize  +  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.decodeSize  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[this.urlSafe    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	109	None	replace
501	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  *  2];  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  *  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  *  2];	  this.lineSeparator    =    new    byte[this.urlSafe    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	109	None	replace
502	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  *  4];  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  *  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  +  lineSeparator.length  *  4];	  this.lineSeparator    =    new    byte[this.urlSafe    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	109	None	replace
503	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  System.	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.    	non-compiled	[CE]  ';'  expected	64	None	replace
504	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.    	non-compiled	[CE]  ';'  expected	64	None	replace
505	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[Length];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[1];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	17	None	replace
506	[BUG]  [BUGGY]  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  safe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
507	[BUG]  [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
508	[BUG]  [BUGGY]  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
509	[BUG]  [BUGGY]  safe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  safe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
510	[BUG]  [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	SecuritySystem.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	  safe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
511	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  &&  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	294	None	replace
512	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  DEFAULT_URL_ENCODE_TABLE  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  DEFAULT_URL_ENCODE_TABLE  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  DEFAULT_URL_ENCODE_TABLE  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	294	None	replace
513	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE):  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE):  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE):  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	294	None	replace
514	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  DEFAULT_URL_ENCODE_TABLE  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  DEFAULT_URL_ENCODE_TABLE  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  DEFAULT_URL_ENCODE_TABLE  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	294	None	replace
515	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE):  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE):  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE):  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	294	None	replace
516	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	294	None	replace
517	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE,  lineSeparator);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE,  lineSeparator);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.identityHashCode(DEFAULT_URL_ENCODE_TABLE,  lineSeparator);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.identityHashCode(DEFAULT_URL_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	294	None	replace
518	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[0];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	216	None	replace
519	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1];  System.arraycopy(CHUNK_SEPARATOR,  0,  lineSeparator,  0,  lineLength);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	216	None	replace
520	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  1];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  1];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    4];    	non-compiled	[CE]  ';'  expected	238	None	replace
521	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  2];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  2];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    4];    	non-compiled	[CE]  ';'  expected	238	None	replace
522	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  3];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  3];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  *  4  +  3];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    4];    	non-compiled	[CE]  ';'  expected	238	None	replace
523	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  /  4];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe.length  /  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe.length  /  4];	  this.lineSeparator    =    new    byte[this.urlSafe.length    *    4];    	non-compiled	[CE]  ';'  expected	238	None	replace
524	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  1000];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  1000];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  1000];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    10];    	non-compiled	[CE]  ';'  expected	222	None	replace
525	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	167	None	replace
526	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	167	None	replace
527	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[this.urlSafe.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	167	None	replace
528	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[lineSeparator.length  +  1];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	167	None	replace
529	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineLength];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	167	None	replace
530	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	167	None	replace
531	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.base64,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.base64,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.base64,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	167	None	replace
532	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.base64,  0,  lineS  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.base64,  0,  lineS  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(this.base64,  0,  this.base64,  0,  lineSeparator.length);  }  else  {  System.arraycopy(this.base64,  0,  lineS	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(this.base64,    0,    this.base64,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	167	None	replace
533	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[3];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[3];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[3];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }	  this.lineSeparator    =    new    byte[3];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
534	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[5];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[5];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[5];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[3];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
535	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[2];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[2];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[3];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
536	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[6];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[6];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[6];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	  this.lineSeparator    =    new    byte[3];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
537	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	161	None	replace
538	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	161	None	replace
539	[BUG]  [BUGGY]  this.urlSafe  =  new  byte[LINE_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  new  byte[LINE_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  new  byte[LINE_SEPARATOR.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	161	None	replace
540	[BUG]  [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_S  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_S  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.urlSafe  =  new  byte[lineSeparator.length];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_S	  this.urlSafe    =    new    byte[lineSeparator.length];    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	161	None	replace
541	[BUG]  [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	122	None	replace
542	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSe  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSe  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSe	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	266	None	replace
543	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[1  +  lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[1  +  lineSeparator.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[1  +  lineSeparator.length  -  1];	  this.lineSeparator    =    new    byte[1    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	150	None	replace
544	[BUG]  [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
545	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.urlSafe.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
546	[BUG]  [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.url  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.url  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.url	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
547	[BUG]  [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.url  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.url  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.url	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.urlSafe.length);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
548	[BUG]  [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  safe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    	non-compiled	[CE]  ';'  expected	191	None	replace
549	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	  safe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    	non-compiled	[CE]  ';'  expected	191	None	replace
550	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];	  safe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    	non-compiled	[CE]  ';'  expected	191	None	replace
551	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  }	  safe)    {    this.lineSeparator    =    new    byte[lineSeparator.length];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    	non-compiled	[CE]  ';'  expected	191	None	replace
552	[BUG]  [BUGGY]  if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[0];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  }	  safe)    {    this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
553	[BUG]  [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.line,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	223	None	replace
554	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.line,    0,    lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	223	None	replace
555	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSe  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSe  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSe	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
556	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
557	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
558	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
559	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineS  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineS	  ||    urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
560	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  +  1];  [CE]  :  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  +  1];	  this.lineSeparator    =    new    byte[this.lineLength    +    lineSeparator.length];    	non-compiled	[CE]  :  expected	281	None	replace
561	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  1];  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength  +  1];	  this.lineSeparator    =    new    byte[this.lineLength    +    lineSeparator.length];    	non-compiled	[CE]  :  expected	281	None	replace
562	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  *  lineSeparator.length];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  *  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength  *  lineSeparator.length];	  this.lineSeparator    =    new    byte[this.lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	281	None	replace
563	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  -  1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  -  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  -  1];	  this.lineSeparator    =    new    byte[this.lineLength    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	281	None	replace
564	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  *  4];  [CE]  :  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  *  4];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineLength  +  lineSeparator.length  *  4];	  this.lineSeparator    =    new    byte[this.lineLength    +    lineSeparator.length];    	non-compiled	[CE]  :  expected	281	None	replace
565	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  :  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  :  expected	174	None	replace
566	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength);  [CE]  :  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  :  expected	85	None	replace
567	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  urlSafe.length);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  :  expected	85	None	replace
568	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineS  [CE]  :  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  :  expected	170	None	replace
569	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  :  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  }  else  {  System.arraycopy(0,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    }    else    {    System.arraycopy(0,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  :  expected	170	None	replace
570	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  sepLength);  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  0,  sepLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(sep,  0,  this.lineSeparator,  0,  sepLength);	  System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    sepLength);    	non-compiled	[CE]  :  expected	93	None	replace
571	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  -  1],  urlSafe);  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  -  1],  urlSafe);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  -  1],  urlSafe);	  this.lineSeparator    =    new    byte[lineLength    -    1];    	non-compiled	[CE]  :  expected	181	None	replace
572	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  -  2];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  -  2];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  -  2];	  this.lineSeparator    =    new    byte[lineLength    -    1];    	non-compiled	[CE]  ';'  expected	181	None	replace
573	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe?  lineLength  -  1  :  0];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe?  lineLength  -  1  :  0];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe?  lineLength  -  1  :  0];	  this.lineSeparator    =    new    byte[lineLength    -    1];    	non-compiled	[CE]  ';'  expected	181	None	replace
574	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength  -  1  +  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength  -  1  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength  -  1  +  1];	  this.lineSeparator    =    new    byte[lineLength    -    1];    	non-compiled	[CE]  ';'  expected	181	None	replace
575	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe?  lineLength  :  1];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe?  lineLength  :  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe?  lineLength  :  1];	  this.lineSeparator    =    new    byte[lineLength    -    1];    	non-compiled	[CE]  ';'  expected	181	None	replace
576	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.urlSafe);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	55	None	replace
577	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	55	None	replace
578	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  +  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	55	None	replace
579	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  1);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength  -  1);	  System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  ';'  expected	55	None	replace
580	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  this.lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	265	None	replace
581	[BUG]  [BUGGY]  if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	265	None	replace
582	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	265	None	replace
583	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line],  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line],  0,  this.lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line],  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	265	None	replace
584	[BUG]  [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  eof  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	eof  urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	265	None	replace
585	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	30	None	replace
586	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  3);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  3);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length  -  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    lineSeparator.length    -    1);    	non-compiled	[CE]  ';'  expected	30	None	replace
587	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
588	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
589	[BUG]  [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  this.lineSeparator  =  new  byte[this.lineSeparator.length];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
590	[BUG]  [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineS  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
591	[BUG]  [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.line  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.line  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.line	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
592	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
593	[BUG]  [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[this.urlSafe];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
594	[BUG]  [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.line  [CE]  ';'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.line  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(this.urlSafe!=  null)  {  if(urlSafe)  {  this.lineSeparator  =  new  byte[CHUNK_SEPARATOR];  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.line	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.urlSafe];    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
595	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  6  +  1];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineSeparator.length  *  6  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineSeparator.length  *  6  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    6];    	non-compiled	[CE]  ';'  expected	213	None	replace
596	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	293	None	replace
597	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	293	None	replace
598	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	293	None	replace
599	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	293	None	replace
600	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	293	None	replace
601	[BUG]  [BUGGY]  this.urlSafe  =  this.urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  this.urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  this.urlSafe  ||  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	293	None	replace
602	[BUG]  [BUGGY]  if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  safe)    {    this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	121	None	replace
603	[BUG]  [BUGGY]  this.urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }	  safe)    {    this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	121	None	replace
604	[BUG]  [BUGGY]  this.urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  safe)    {    this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	121	None	replace
605	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  6  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  6  +  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  6  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    6    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	196	None	replace
606	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  6  *  lineSeparator.length)];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  +  6  *  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  +  6  *  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    +    6    +    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	196	None	replace
607	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	290	None	replace
608	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	290	None	replace
609	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe  ==  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	290	None	replace
610	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	290	None	replace
611	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	290	None	replace
612	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  0,  urlSafe.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	290	None	replace
613	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	120	None	replace
614	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[lineLength];  System.arraycopy(this.lineSeparator,  0,  lineSeparator,  0,  lineSeparator.length);  }	  if(urlSafe)    {    this.lineSeparator    =    new    byte[lineLength];    System.arraycopy(this.lineSeparator,    0,    lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	120	None	replace
615	[BUG]  [BUGGY]  if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(!urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this.line	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	57	None	replace
616	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(this	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	57	None	replace
617	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arraycopy(this.line,  0,  lineSeparator.length);  System.arraycopy(	  if(urlSafe)    {    System.arraycopy(this.line,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(this.line,    0,    lineSeparator.length);    System.arraycopy(this.line    	non-compiled	[CE]  ';'  expected	57	None	replace
618	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[5];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
619	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[3];  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	  this.lineSeparator    =    new    byte[0];    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	37	None	replace
620	[BUG]  [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSafe,  0,  this.lineSeparator,  0,  lineSeparator.length);	  System.arraycopy(this.urlSafe,    0,    this.lineSeparator,    0,    urlSafe.length);    	non-compiled	[CE]  ';'  expected	83	None	replace
621	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  *  2  +  1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.lineSeparator.length  *  2  +  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.lineSeparator.length  *  2  +  1];	  this.lineSeparator    =    new    byte[lineSeparator.length    *    2    +    1];    	non-compiled	[CE]  ';'  expected	6	None	replace
622	[BUG]  [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  ||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	||  urlSafe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.lineS	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	275	None	replace
623	[BUG]  [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.line  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.line  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	safe)  {  this.lineSeparator  =  new  byte[this.lineLength];  }  else  {  System.arraycopy(this.lineSeparator,  0,  this.line	  if(urlSafe)    {    this.lineSeparator    =    new    byte[this.lineLength];    }    else    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	275	None	replace
624	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  *  1];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[this.urlSafe  *  1];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[this.urlSafe  *  1];	  this.lineSeparator    =    new    byte[this.urlSafe    +    1];    	non-compiled	[CE]  ';'  expected	104	None	replace
625	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[6  +  lineSeparator.length];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[6  +  lineSeparator.length];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[6  +  lineSeparator.length];	  this.lineSeparator    =    new    byte[3    +    lineSeparator.length];    	non-compiled	[CE]  ';'  expected	153	None	replace
626	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  &&  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  &&  urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	296	None	replace
627	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  this.urlSafe!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	296	None	replace
628	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSeparator!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  this.urlSeparator!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  this.urlSeparator!=  null?  urlSafe  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	296	None	replace
629	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  urlSafe!=  null?  CHUNK_SEPARATOR  :  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	296	None	replace
630	[BUG]  [BUGGY]  this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.urlSafe  =  urlSafe  ||  System.arraycopy(CHUNK_SEPARATOR,  0,  this.urlSeparator,  lineSeparator.length);	  this.urlSafe    =    urlSafe    ||    urlSafe!=    null?    urlSafe    :    System.arraycopy(CHUNK_SEPARATOR,    0,    this.urlSeparator,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	296	None	replace
631	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  +  1)];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  +  1)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  +  1)];	  this.lineSeparator    =    new    byte[(lineLength    *    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	125	None	replace
632	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  -  1)];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  -  1)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  -  1)];	  this.lineSeparator    =    new    byte[(lineLength    *    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	125	None	replace
633	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  +  2)];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  +  2)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  lineSeparator.length  +  2)];	  this.lineSeparator    =    new    byte[(lineLength    *    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	125	None	replace
634	[BUG]  [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  1  +  lineSeparator.length)];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  this.lineSeparator  =  new  byte[(lineLength  *  1  +  lineSeparator.length)];  [BUGGY]      System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	this.lineSeparator  =  new  byte[(lineLength  *  1  +  lineSeparator.length)];	  this.lineSeparator    =    new    byte[(lineLength    *    lineSeparator.length)];    	non-compiled	[CE]  ';'  expected	125	None	replace
635	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  }	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	259	None	replace
636	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  lineLength);  System.arraycopy(this.lineSeparator,  0,  lineSeparator.length);	  eof    urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    System.arraycopy(this.lineSeparator,    0,    lineSeparator.length);    }    	non-compiled	[CE]  ';'  expected	259	None	replace
637	[BUG]  [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  Base64(int  lineLength,  byte[]  lineSeparator,  boolean  urlSafe)  {  this.lineLength  =  lineLength;      [BUGGY]  if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arra  [BUGGY]      this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  if  (lineLength  >  0)  {  this.encodeSize  =  4  +  lineSeparator.length;  }  else  {  this.encodeSize  =  4;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (containsBase64Byte(lineSeparator))  {  String  sep;  try  {  [CLASS]  Base64  [METHOD]  <init>  [RETURN_TYPE]  Base64(int,byte[],boolean)  int  lineLength  byte[]  lineSeparator  boolean  urlSafe  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  buf  encodeTable  lineSeparator  UnsupportedEncodingException  uee  boolean  eof  urlSafe  String  sep  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  currentLinePos  decodeSize  encodeSize  lineLength  modulus  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	289	289	2	replace	if(urlSafe)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  }  else  {  System.arra	  if(urlSafe)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    lineLength);    }    else    {    System.arraycopy(CHUNK_SEPARATOR,    0,    lineSeparator.length);    System.arra    	non-compiled	[CE]  ';'  expected	81	None	replace
