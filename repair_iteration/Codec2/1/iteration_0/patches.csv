bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    System.arraycopy(in,  0,  buf,  0,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
2	[BUG]  [BUGGY]    System.arraycopy(in,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    System.arraycopy(in,  0,  buf,  0,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
3	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    System.arraycopy(buf,  0,  buf,  0,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
4	[BUG]  [BUGGY]    System.arraycopy(buf,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    System.arraycopy(buf,  0,  buf,  0,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
5	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
6	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
7	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }		compilable	  [FE]  AssertionFailedError  	2	2	add
9	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }		compilable	  [FE]  AssertionFailedError  	2	2	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }		compilable	  [FE]  AssertionFailedError  	2	2	add
11	[BUG]  [BUGGY]    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }		compilable	  [FE]  AssertionFailedError  	2	2	add
12	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }		compilable	  [FE]  AssertionFailedError  	2	2	add
14	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }		compilable	  [FE]  AssertionFailedError  	2	2	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }		compilable	  [FE]  AssertionFailedError  	2	2	add
16	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }		compilable	  [FE]  AssertionFailedError  	2	2	add
17	[BUG]  [BUGGY]  resize(in);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resize(in);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
18	[BUG]  [BUGGY]  resize(in,  inPos);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resize(in,  inPos);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
19	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resize(in,  inPos,  inAvail);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
20	[BUG]  [BUGGY]  resize(buf,  0,  inAvail);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resize(buf,  0,  inAvail);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
21	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resizeBytes(in,  inPos,  inAvail);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
22	[BUG]  [BUGGY]  resize(in,  inAvail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resize(in,  inAvail);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inAvail);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
23	[BUG]  [BUGGY]  resizeBuffer();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resizeBuffer();  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer();	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
24	[BUG]  [BUGGY]  resize(buf,  inPos,  inAvail);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resize(buf,  inPos,  inAvail);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  inPos,  inAvail);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
25	[BUG]  [BUGGY]  resizeSize();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resizeSize();  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeSize();	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
26	[BUG]  [BUGGY]  resize(inAvail);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resize(inAvail);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(inAvail);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
27	[BUG]  [BUGGY]  resizePos();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  resizePos();  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizePos();	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
28	[BUG]  [BUGGY]  recalculateSize();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  recalculateSize();  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize();	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
29	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
30	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
31	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
32	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [FE]  NullPointerException  [FE]      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }		compilable	  [FE]  AssertionFailedError  	2	2	add
34	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }		compilable	  [FE]  AssertionFailedError  	2	2	add
35	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
36	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [FE]  NullPointerException  [FE]          AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
37	[BUG]  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail		non-compiled	[CE]  ')'  expected	2	None	add
38	[BUG]  [BUGGY]  eof  =  encodeTable[pos++];  [CE]  incompatible  types  [FE]    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  eof  =  encodeTable[pos++];  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++];	resizeBuf();  	non-compiled	[CE]  incompatible  types	1	None	replace
39	[BUG]  [BUGGY]  recalculateSize(in);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  recalculateSize(in);  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(in);	resizeBuf();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
40	[BUG]  [BUGGY]  eof  =  encodeTable[pos];  [CE]  incompatible  types  [FE]        AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]  eof  =  encodeTable[pos];  [BUGGY]  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos];	resizeBuf();  	non-compiled	[CE]  incompatible  types	1	None	replace
41	[BUG]  [BUGGY]    byte[]  x  =  encodeBase64(in,  inPos,  inAvail);  [CE]  no  suitable  method  found  for  encodeBase64(byte[],int,int)  [FE]    AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    byte[]  x  =  encodeBase64(in,  inPos,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    byte[]  x  =  encodeBase64(in,  inPos,  inAvail);		non-compiled	[CE]  no  suitable  method  found  for  encodeBase64(byte[],int,int)	2	None	add
42	[BUG]  [BUGGY]    in  =  encodeBase64(in,  inPos,  inAvail);  [CE]  no  suitable  method  found  for  encodeBase64(byte[],int,int)  [FE]      AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    in  =  encodeBase64(in,  inPos,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    in  =  encodeBase64(in,  inPos,  inAvail);		non-compiled	[CE]  no  suitable  method  found  for  encodeBase64(byte[],int,int)	2	None	add
43	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
44	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]        AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
45	[BUG]  [BUGGY]    byte[]  x  =  encode(in,  inPos,  inAvail);  [CE]  incompatible  types  [FE]          AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    byte[]  x  =  encode(in,  inPos,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    byte[]  x  =  encode(in,  inPos,  inAvail);		non-compiled	[CE]  incompatible  types	2	None	add
46	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
47	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [FE]  NullPointerException  [FE]            AssertionFailedError  [CONTEXT]  void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]  resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);		compilable	  [FE]  NullPointerException  	2	5	add
