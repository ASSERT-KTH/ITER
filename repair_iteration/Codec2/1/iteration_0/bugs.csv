bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] resizeBuf(); [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { [BUGGY] resizeBuf(); [BUGGY] } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { [BUGGY] [BUGGY] resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buf encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	
