bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	compilable	  [FE]  NullPointerException  	35	5	add
2	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	compilable	  [FE]  NullPointerException  	35	5	add
3	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	compilable	  [FE]  NullPointerException  	35	6	add
4	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	compilable	  [FE]  NullPointerException  	35	6	add
5	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [CE]  cannot  find  symbol  system  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  system	35	None	add
6	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	compilable	  [FE]  NullPointerException  	35	5	add
7	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	compilable	  [FE]  NullPointerException  	35	5	add
8	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	35	5	add
9	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	35	5	add
10	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  eof);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  eof);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	35	None	add
11	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	35	6	add
12	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	35	6	add
13	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  enAvail);  [CE]  cannot  find  symbol  enAvail  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  enAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  enAvail);	  	non-compiled	[CE]  cannot  find  symbol  enAvail	35	None	add
14	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in  [CE]  ')'  expected  [FE]                    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in	  	non-compiled	[CE]  ')'  expected	35	None	add
15	[BUG]  [BUGGY]  resize(buf,  inAvail);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  inAvail);	  resize(in,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
16	[BUG]  [BUGGY]  resize(in,  inPos  +  inAvail);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos  +  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos  +  inAvail);	  resize(in,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
17	[BUG]  [BUGGY]  resize(buf,  inPos);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  inPos);	  resize(in,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
18	[BUG]  [BUGGY]  resize(inPos,  inAvail);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(inPos,  inAvail);	  resize(in,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
19	[BUG]  [BUGGY]  resize(inAvail,  inPos);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(inAvail,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(inAvail,  inPos);	  resize(in,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
21	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
22	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
23	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
24	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
25	[BUG]  [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
26	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  0,  encodeSize);	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
27	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  encodeSize);	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
28	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
29	[BUG]  [BUGGY]  if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	compilable	  [FE]  NullPointerException  	9	5	replace
30	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  inAvail;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
31	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  inAvail  +  1,  inAvail);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  inAvail  +  1,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  inAvail  +  1,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	9	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
33	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
34	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  buf,  0,  inAvail);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
36	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  2,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  2,  buf,  0,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
38	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  2,  buf,  0,  inAvail);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  2,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  2,  buf,  0,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
39	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  >  expected	10	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  4,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  4,  buf,  0,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
41	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  4,  buf,  0,  inAvail);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  4,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  4,  buf,  0,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
43	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
44	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  If(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  If(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    If(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
45	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    while(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
46	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	1	5	add
47	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	1	5	add
48	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	1	5	add
49	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	1	5	add
50	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	1	6	add
51	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	1	6	add
52	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  system.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  system  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  system.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);  system.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  system	1	None	add
53	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	1	6	add
54	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	1	6	add
55	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	1	5	add
56	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	1	5	add
57	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  eof);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  eof);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	add
58	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  1,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  1,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	1	5	add
59	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  1,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  1,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  1,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	1	5	add
60	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	43	5	add
61	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	43	5	add
62	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  imAvail);  [CE]  cannot  find  symbol  imAvail  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  imAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  imAvail);	  	non-compiled	[CE]  cannot  find  symbol  imAvail	43	None	add
63	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  1,  inAvail);	  	compilable	  [FE]  NullPointerException  	43	5	add
64	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  1,  inAvail);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  1,  inAvail);	  	compilable	  [FE]  NullPointerException  	43	5	add
65	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  return;  [CE]  unreachable  statement  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  return;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  return;	  	non-compiled	[CE]  unreachable  statement	43	None	add
66	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  encodeSize);	  	compilable	  [FE]  NullPointerException  	43	5	add
67	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  encodeSize);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  encodeSize);	  	compilable	  [FE]  NullPointerException  	43	5	add
68	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	43	5	add
69	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	43	5	add
70	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  inAvail);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  inAvail);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	43	None	add
71	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  break;  [CE]  break  outside  switch  or  loop  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  break;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	43	None	add
72	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	3	5	add
73	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	3	5	add
74	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	3	5	add
75	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	3	5	add
76	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	3	6	add
77	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);	  	compilable	  [FE]  NullPointerException  	3	6	add
78	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  [CE]  incomparable  types:  int  and  byte[]  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  incomparable  types:  int  and  byte[]	3	None	add
79	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  system.arraycopy(buf,  0,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  system  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  system.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  system.arraycopy(buf,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  system	3	None	add
80	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  eof);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  eof);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	3	None	add
81	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	3	6	add
82	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  resizeBuf();	  	compilable	  [FE]  NullPointerException  	3	6	add
83	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  [CE]  ')'  expected  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,	  	non-compiled	[CE]  ')'  expected	3	None	add
84	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  system.arraycopy(buf,  0,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  system  [FE]                    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  system.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(buf,  0,  buf,  0,  inAvail);  system.arraycopy(buf,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  system	3	None	add
85	[BUG]  [BUGGY]  inAvail  resize(buf,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  inAvail  resize(buf,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	inAvail  resize(buf,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	24	None	replace
86	[BUG]  [BUGGY]  ResizeBuffer  buffer  =  resizeBuffer(buf,  inPos,  inAvail);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  ResizeBuffer  buffer  =  resizeBuffer(buf,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	ResizeBuffer  buffer  =  resizeBuffer(buf,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
87	[BUG]  [BUGGY]  resize(buf,  inPos,  inAvail,  eof);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  inPos,  inAvail,  eof);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  inPos,  inAvail,  eof);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
88	[BUG]  [BUGGY]  scan(in,  inPos,  inAvail);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  scan(in,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	scan(in,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
89	[BUG]  [BUGGY]  repaint(in,  inPos,  inAvail);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  repaint(in,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	repaint(in,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
90	[BUG]  [BUGGY]  ResizeFactory.resize(buf,  inPos,  inAvail);  [CE]  cannot  find  symbol  ResizeFactory  [FE]                                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  ResizeFactory.resize(buf,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	ResizeFactory.resize(buf,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  ResizeFactory	24	None	replace
91	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  0,  inAvail);  return;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
92	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  return;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
93	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
94	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
95	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
96	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
97	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
98	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
99	[BUG]  [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
100	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  return;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  0,  encodeSize);  return;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
101	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  return;  [FE]  NullPointerException  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  return;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  encodeSize);  return;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	compilable	  [FE]  NullPointerException  	14	5	replace
102	[BUG]  [BUGGY]  resizePos(in);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizePos(in);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizePos(in);	  resizePos();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
103	[BUG]  [BUGGY]  resizePos(in,  inPos);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizePos(in,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizePos(in,  inPos);	  resizePos();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
104	[BUG]  [BUGGY]  resizePos(in,  inAvail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizePos(in,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizePos(in,  inAvail);	  resizePos();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
105	[BUG]  [BUGGY]  resizePos(inAvail);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizePos(inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizePos(inAvail);	  resizePos();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
106	[BUG]  [BUGGY]  resizePos(1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizePos(1);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizePos(1);	  resizePos();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  inAvail);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	36	None	replace
108	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  in,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(CHUNK_SEPARATOR,  0,  in,  inPos,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	5	replace
109	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  in,  inPos,  inAvail);  [FE]  ArrayIndexOutOfBoundsException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  in,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  in,  inPos,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	5	replace
110	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  inPos,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	compilable	  [FE]  NullPointerException  	36	5	replace
111	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  inPos,  inAvail);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  inPos,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	compilable	  [FE]  NullPointerException  	36	5	replace
112	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  inPos);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  inPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	36	None	replace
113	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	compilable	  [FE]  NullPointerException  	36	5	replace
114	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail  +  1);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	compilable	  [FE]  NullPointerException  	36	5	replace
115	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	compilable	  [FE]  NullPointerException  	5	5	replace
116	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	compilable	  [FE]  NullPointerException  	5	5	replace
117	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
118	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
119	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
120	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
121	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
122	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(buf,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	compilable	  [FE]  NullPointerException  	5	5	replace
123	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [FE]  NullPointerException  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	compilable	  [FE]  NullPointerException  	5	5	replace
124	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
125	[BUG]  [BUGGY]  resizeBytes(buf,  inPos,  inAvail);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(buf,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(buf,  inPos,  inAvail);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
126	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail,  eof);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail,  eof);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail,  eof);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
127	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail,  encodeSize);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail,  encodeSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail,  encodeSize);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
128	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail,  buf.length);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail,  buf.length);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail,  buf.length);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
129	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail,  decodeSize);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail,  decodeSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail,  decodeSize);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
130	[BUG]  [BUGGY]  resizeBytes(bAvail,  inPos,  inAvail);  [CE]  cannot  find  symbol  bAvail  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(bAvail,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(bAvail,  inPos,  inAvail);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  bAvail	21	None	replace
131	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail,  module);  [CE]  cannot  find  symbol  module  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail,  module);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail,  module);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  module	21	None	replace
132	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail,  out);  [CE]  cannot  find  symbol  out  [FE]                              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail,  out);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail,  out);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  out	21	None	replace
133	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail  +  1);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail  +  1);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail  +  1);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
135	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
136	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
137	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	non-compiled	[CE]  ';'  expected	15	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
139	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
141	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
142	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	compilable	  [FE]  NullPointerException  	15	5	add
143	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [FE]  NullPointerException  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	compilable	  [FE]  NullPointerException  	15	5	add
144	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  outAvail  +=  inAvail;  }  [CE]  cannot  find  symbol  outAvail  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  outAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  outAvail  +=  inAvail;  }	  	non-compiled	[CE]  cannot  find  symbol  outAvail	15	None	add
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  =  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  =  inAvail;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
146	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  =  inAvail;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  =  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  =  inAvail;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
147	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	  	non-compiled	[CE]  >  expected	15	None	add
148	[BUG]  [BUGGY]  resize(in,  0,  inAvail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  0,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  0,  inAvail);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
149	[BUG]  [BUGGY]  resize(buf,  0,  inAvail,  inPos);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inAvail,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail,  inPos);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
150	[BUG]  [BUGGY]  resize(in,  0,  buf.length);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  0,  buf.length);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  0,  buf.length);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
151	[BUG]  [BUGGY]  resize(buf,  0,  inPos);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inPos);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
152	[BUG]  [BUGGY]  resize(buf,  0,  inAvail,  inSize);  [CE]  cannot  find  symbol  inSize  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inAvail,  inSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail,  inSize);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  inSize	20	None	replace
153	[BUG]  [BUGGY]  resize(buf,  0,  inAvail  +  inPos);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inAvail  +  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail  +  inPos);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
154	[BUG]  [BUGGY]  resizeSize(in);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeSize(in);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeSize(in);	  resizeSize();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
155	[BUG]  [BUGGY]  resizeSize(in,  inPos);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeSize(in,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeSize(in,  inPos);	  resizeSize();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
156	[BUG]  [BUGGY]  resizeSize(in,  inAvail);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeSize(in,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeSize(in,  inAvail);	  resizeSize();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
157	[BUG]  [BUGGY]  resize();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize();	  resizeSize();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
158	[BUG]  [BUGGY]  resizeSize(inAvail);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeSize(inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeSize(inAvail);	  resizeSize();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
159	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	compilable	  [FE]  NullPointerException  	12	5	replace
160	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [FE]  NullPointerException  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	compilable	  [FE]  NullPointerException  	12	5	replace
161	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
162	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
163	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
164	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
165	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
166	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
167	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
168	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
169	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  1);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
170	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  -  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  -  inPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
171	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  -  inPos);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  -  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  -  inPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
172	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  1,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
173	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  1,  inAvail);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  1,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
174	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  encodeSize);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
175	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  encodeSize);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  encodeSize);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
176	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  2,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  2,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
177	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  2,  inAvail);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  2,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  2,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
178	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  4,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  4,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
179	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  4,  inAvail);  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  4,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  4,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
180	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  2);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
181	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  2);  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  2);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  +  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	compilable	  [FE]  NullPointerException  	47	5	replace
182	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  eof);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,boolean)  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  eof);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,boolean)	45	None	replace
183	[BUG]  [BUGGY]  byte[]  x  =  encode(buf,  inPos,  inAvail);  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(buf,  inPos,  inAvail);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  incompatible  types	45	None	replace
184	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  decodeSize);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  decodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  decodeSize);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	45	None	replace
185	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  out);  [CE]  cannot  find  symbol  out  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  out);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  out);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  out	45	None	replace
186	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  module);  [CE]  cannot  find  symbol  module  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  module);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  module);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  module	45	None	replace
187	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  base64);  [CE]  cannot  find  symbol  base64  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  base64);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  base64);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  base64	45	None	replace
188	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  len);  [CE]  cannot  find  symbol  len  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  len);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  len);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  len	45	None	replace
189	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  buf.length);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  buf.length);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  buf.length);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	45	None	replace
190	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  0,  inAvail);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]                              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  0,  inAvail);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	45	None	replace
191	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  eof);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  eof);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  eof);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
192	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  encodeSize);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  encodeSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  encodeSize);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
193	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  buf.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  buf.length);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  buf.length);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
194	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  decodeSize);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  decodeSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  decodeSize);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
195	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail  +  1);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail  +  1);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
196	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  len);  [CE]  cannot  find  symbol  len  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  len);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  len);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  len	19	None	replace
197	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  module);  [CE]  cannot  find  symbol  module  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  module);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  module);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  module	19	None	replace
198	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  out);  [CE]  cannot  find  symbol  out  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  out);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  out);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  out	19	None	replace
199	[BUG]  [BUGGY]  resizeBuffer(buf);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBuffer(buf);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer(buf);	  resizeBuffer();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
200	[BUG]  [BUGGY]  resizeBuffer(in);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBuffer(in);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer(in);	  resizeBuffer();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
201	[BUG]  [BUGGY]  resizeBuffer(buf,  0,  inAvail);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBuffer(buf,  0,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer(buf,  0,  inAvail);	  resizeBuffer();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
202	[BUG]  [BUGGY]  resizeBuffer(buf,  inAvail);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBuffer(buf,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer(buf,  inAvail);	  resizeBuffer();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
203	[BUG]  [BUGGY]  resizeBuffer(in,  inPos);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBuffer(in,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer(in,  inPos);	  resizeBuffer();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
204	[BUG]  [BUGGY]  resizeBuffer(buf.length,  inAvail);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBuffer(buf.length,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer(buf.length,  inAvail);	  resizeBuffer();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
205	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	compilable	  [FE]  NullPointerException  	6	5	replace
206	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [FE]  NullPointerException  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	compilable	  [FE]  NullPointerException  	6	5	replace
207	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
208	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
209	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
210	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
211	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	add	System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	compilable	  [FE]  NullPointerException  	6	5	replace
212	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [FE]  NullPointerException  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	compilable	  [FE]  NullPointerException  	6	5	replace
213	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  }  [CE]  cannot  find  symbol  StringUtils  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	6	None	replace
214	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  }  [CE]  cannot  find  symbol  StringUtils  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	6	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  1);  [CE]  cannot  find  symbol  StringUtils  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail  +  1);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	2	None	replace
216	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inPos);  [CE]  cannot  find  symbol  StringUtils  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inPos);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	2	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  -  inPos);  [CE]  cannot  find  symbol  StringUtils  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  -  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail  -  inPos);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	2	None	replace
218	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  inBuf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  inBuf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  inBuf,  0,  inAvail);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	2	None	replace
219	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  1,  inPos);  [CE]  cannot  find  symbol  StringUtils  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  1,  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail  +  1,  inPos);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	2	None	replace
220	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  2);  [CE]  cannot  find  symbol  StringUtils  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  2);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail  +  2);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	2	None	replace
221	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  3);  [CE]  cannot  find  symbol  StringUtils  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  3);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail  +  3);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	2	None	replace
222	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  4);  [CE]  cannot  find  symbol  StringUtils  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  +  4);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail  +  4);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	2	None	replace
223	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  [CE]  cannot  find  symbol  StringUtils  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  cannot  find  symbol  StringUtils	37	None	replace
224	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [CE]  cannot  find  symbol  StringUtils  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  cannot  find  symbol  StringUtils	37	None	replace
225	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [CE]  cannot  find  symbol  StringUtils  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  cannot  find  symbol  StringUtils	37	None	replace
226	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  [CE]  cannot  find  symbol  StringUtils  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  cannot  find  symbol  StringUtils	37	None	replace
227	[BUG]  [BUGGY]  if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  [CE]  cannot  find  symbol  StringUtils  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  cannot  find  symbol  StringUtils	37	None	replace
228	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail;  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [CE]  cannot  find  symbol  StringUtils  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail;  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail;  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  cannot  find  symbol  StringUtils	37	None	replace
229	[BUG]  [BUGGY]  if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in  [CE]  cannot  find  symbol  StringUtils  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  cannot  find  symbol  StringUtils	37	None	replace
230	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
231	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  1,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  1,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  1,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
232	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
233	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
234	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  InAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  InAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  InAvail);  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
235	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
236	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
237	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
238	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	33	None	add
239	[BUG]  [BUGGY]  if(inAvail  <  inPos  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  inPos  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  inPos  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	11	None	replace
240	[BUG]  [BUGGY]  if(inAvail  <  0  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	11	None	replace
241	[BUG]  [BUGGY]  if(inPos  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	11	None	replace
242	[BUG]  [BUGGY]  inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	11	None	replace
243	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	11	None	replace
244	[BUG]  [BUGGY]  inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	11	None	replace
245	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
246	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  encodeSize);  [CE]  cannot  find  symbol  StringUtils  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  encodeSize);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
247	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  imAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  imAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  imAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
248	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  p,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  p,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  p,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
249	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  pos,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  pos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  pos,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
250	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  CHUNK_SIZE);  [CE]  cannot  find  symbol  StringUtils  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  CHUNK_SIZE);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  CHUNK_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
251	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  return;  [CE]  cannot  find  symbol  StringUtils  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  return;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  return;	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
252	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  decodeSize);  [CE]  cannot  find  symbol  StringUtils  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  decodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
253	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  INAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]                    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  INAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  INAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	31	None	add
254	[BUG]  [BUGGY]  resize(in,  inPos  +  1);  [CE]  cannot  find  symbol  StringUtils  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos  +  1);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos  +  1);	  resize(in,    inPos);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	18	None	replace
255	[BUG]  [BUGGY]  resize(in,  inPos  +  1,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos  +  1,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos  +  1,  inAvail);	  resize(in,    inPos);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	18	None	replace
256	[BUG]  [BUGGY]  resize(in,  inPos,  encodeSize);  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  encodeSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  encodeSize);	  resize(in,    inPos);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	18	None	replace
257	[BUG]  [BUGGY]  resize(inAvail,  in);  [CE]  cannot  find  symbol  StringUtils  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(inAvail,  in);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(inAvail,  in);	  resize(in);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	17	None	replace
258	[BUG]  [BUGGY]  resize(buf,  in);  [CE]  cannot  find  symbol  StringUtils  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  in);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  in);	  resize(in);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	17	None	replace
259	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	44	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	44	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(in,  x,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  x,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  x,  buf,  0,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	44	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  pos,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  pos,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  pos,  buf,  0,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	44	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail  +  1);  [CE]  cannot  find  symbol  StringUtils  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	44	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(in,  CHUNK_SEPARATOR,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  CHUNK_SEPARATOR,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  CHUNK_SEPARATOR,  buf,  0,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	44	None	replace
265	[BUG]  [BUGGY]  eof  =  in[pos++];  [CE]  cannot  find  symbol  StringUtils  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  in[pos++];  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  in[pos++];	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	38	None	replace
266	[BUG]  [BUGGY]  eof  =  encodeTable[pos++]  &  INVALID_ENCODE_TABLE;  [CE]  cannot  find  symbol  StringUtils  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos++]  &  INVALID_ENCODE_TABLE;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++]  &  INVALID_ENCODE_TABLE;	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	38	None	replace
267	[BUG]  [BUGGY]  eof  =  encodeTable[pos++]  &  PAD;  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos++]  &  PAD;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++]  &  PAD;	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	38	None	replace
268	[BUG]  [BUGGY]  eof  =  encodeTable[pos++]  +  in;  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos++]  +  in;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++]  +  in;	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	38	None	replace
269	[BUG]  [BUGGY]  eof  =  encodeTable[pos++]  &  inAvail;  [CE]  cannot  find  symbol  StringUtils  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos++]  &  inAvail;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++]  &  inAvail;	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	38	None	replace
270	[BUG]  [BUGGY]  eof  =  buf[pos++];  [CE]  cannot  find  symbol  StringUtils  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  buf[pos++];  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  buf[pos++];	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	38	None	replace
271	[BUG]  [BUGGY]  eof  =  encodeTable[pos++]  &  CHUNK_SEPARATOR;  [CE]  cannot  find  symbol  StringUtils  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos++]  &  CHUNK_SEPARATOR;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++]  &  CHUNK_SEPARATOR;	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	38	None	replace
272	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  1);  [CE]  cannot  find  symbol  StringUtils  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	30	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inPos);  [CE]  cannot  find  symbol  StringUtils  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	30	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  -  inPos);  [CE]  cannot  find  symbol  StringUtils  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  -  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  -  inPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	30	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  2);  [CE]  cannot  find  symbol  StringUtils  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  2);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	30	None	replace
276	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  encodeSize);  [CE]  cannot  find  symbol  StringUtils  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  encodeSize);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	30	None	replace
277	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  eof);  [CE]  cannot  find  symbol  StringUtils  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  eof);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	30	None	replace
278	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  3);  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  3);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  +  3);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  ')'  expected	30	None	replace
279	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  cannot  find  symbol  StringUtils  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
280	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  return;  }  [CE]  cannot  find  symbol  StringUtils  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
281	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  cannot  find  symbol  StringUtils  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
282	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  cannot  find  symbol  StringUtils  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
283	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
284	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
285	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
286	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  return;  }  [CE]  cannot  find  symbol  StringUtils  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
287	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  continue;  }  [CE]  cannot  find  symbol  StringUtils  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  continue;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  continue;  }	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	13	None	add
288	[BUG]  [BUGGY]  eof  =  in[pos];  [CE]  cannot  find  symbol  StringUtils  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  in[pos];  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  in[pos];	  eof    =    encodeTable[pos];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	40	None	replace
289	[BUG]  [BUGGY]  eof  =  encodeTable[pos],  in,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos],  in,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos],  in,  inAvail);	  eof    =    encodeTable[pos];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	40	None	replace
290	[BUG]  [BUGGY]  eof  =  buf[pos];  [CE]  cannot  find  symbol  StringUtils  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  buf[pos];  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  buf[pos];	  eof    =    encodeTable[pos];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	40	None	replace
291	[BUG]  [BUGGY]  eof  =  encodeTable[pos]  &  inAvail;  [CE]  cannot  find  symbol  StringUtils  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos]  &  inAvail;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos]  &  inAvail;	  eof    =    encodeTable[pos];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	40	None	replace
292	[BUG]  [BUGGY]  eof  =  encodeTable[pos  +  1];  [CE]  cannot  find  symbol  StringUtils  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos  +  1];  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos  +  1];	  eof    =    encodeTable[pos];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	40	None	replace
293	[BUG]  [BUGGY]  eof  =  encodeTable[pos]  &  0xff;  [CE]  cannot  find  symbol  StringUtils  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos]  &  0xff;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos]  &  0xff;	  eof    =    encodeTable[pos];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	40	None	replace
294	[BUG]  [BUGGY]  eof  =  encodeTable[pos],  in;  [CE]  cannot  find  symbol  StringUtils  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos],  in;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos],  in;	  eof    =    encodeTable[pos];    	non-compiled	[CE]  cannot  find  symbol  StringUtils	40	None	replace
295	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail  +  1);  [CE]  cannot  find  symbol  StringUtils  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	32	None	replace
296	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  encodeSize);  [CE]  cannot  find  symbol  StringUtils  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  encodeSize);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	32	None	replace
297	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  pos);  [CE]  cannot  find  symbol  StringUtils  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  pos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  in,  pos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	32	None	replace
298	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  offset,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  offset,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  offset,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    	non-compiled	[CE]  cannot  find  symbol  StringUtils	32	None	replace
299	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	7	None	replace
300	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	7	None	replace
301	[BUG]  [BUGGY]  arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  cannot  find  symbol  StringUtils  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	7	None	replace
302	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inA  [CE]  cannot  find  symbol  StringUtils  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inA  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inA	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	7	None	replace
303	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [CE]  cannot  find  symbol  StringUtils  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >=  inAvail)  {  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >=  inAvail)  {  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  cannot  find  symbol  StringUtils	7	None	replace
304	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	29	None	add
305	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
306	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  resizeBuf();  [CE]  invalid  method  declaration;  return  type  required  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  resizeBuf();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	add
307	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	add
308	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	add
309	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  0,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  0,  inAvail);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	add
310	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	add
311	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  eof);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  eof);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	add
312	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  resizeBuf();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  resizeBuf();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	add
313	[BUG]  [BUGGY]  in  =  encodeBase64(buf,  inPos,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(buf,  inPos,  inAvail);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
314	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  eof);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  inAvail,  eof);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
315	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  eof,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  eof,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  eof,  inAvail);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
316	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  buf.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  buf.length);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  inAvail,  buf.length);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
317	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  eof);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  eof);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
318	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  module);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  module);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  inAvail,  module);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
319	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  MASK_8BITS,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  MASK_8BITS,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  MASK_8BITS,  inAvail);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
320	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  decodeSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  decodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  inAvail,  decodeSize);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
321	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  0,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  0,  inAvail);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
322	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(buf,  inPos,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(buf,  inPos,  inAvail);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
323	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  eof);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  eof);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
324	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(b,  inPos,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(b,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(b,  inPos,  inAvail);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
325	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  buf.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  buf.length);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  buf.length);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
326	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  module);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  module);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  module);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
327	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  decodeSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  decodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  decodeSize);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
328	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  out);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  out);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  out);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
329	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  len);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  len);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  len);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
330	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  0,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  0,  inAvail);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
331	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail  +  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  buf,  0,  inAvail  +  1);	      System.arraycopy(buf,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
332	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail  -  inPos);  [CE]  invalid  method  declaration;  return  type  required  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail  -  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  buf,  0,  inAvail  -  inPos);	      System.arraycopy(buf,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
333	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inPos);  [CE]  invalid  method  declaration;  return  type  required  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  buf,  0,  inPos);	      System.arraycopy(buf,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
334	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  eof);  [CE]  invalid  method  declaration;  return  type  required  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  eof);	      System.arraycopy(buf,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
335	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail  +  2);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  buf,  0,  inAvail  +  2);	      System.arraycopy(buf,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
336	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  1,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  buf,  1,  inAvail);	      System.arraycopy(buf,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
337	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  invalid  method  declaration;  return  type  required  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
338	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  system.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
339	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
340	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  resizeBuf();  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  resizeBuf();	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
341	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
342	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  1,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
343	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
344	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  resizeBuf();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  resizeBuf();  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  resizeBuf();	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
345	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAva  [CE]  illegal  start  of  expression  [FE]                    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAva  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAva	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
346	[BUG]  [BUGGY]  recalculateSize(in,  inAvail);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(in,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(in,  inAvail);	  recalculateSize(in);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
347	[BUG]  [BUGGY]  recalculateSize(in,  inPos);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(in,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(in,  inPos);	  recalculateSize(in);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
348	[BUG]  [BUGGY]  recalculateSize(buf,  in);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(buf,  in);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(buf,  in);	  recalculateSize(in);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
349	[BUG]  [BUGGY]  recalculateSize(inAvail);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(inAvail);	  recalculateSize(in);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
350	[BUG]  [BUGGY]  recalculateSize(buf,  inAvail);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(buf,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(buf,  inAvail);	  recalculateSize(in);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
351	[BUG]  [BUGGY]  recalculateSize(buf,  inPos);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(buf,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(buf,  inPos);	  recalculateSize(in);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
352	[BUG]  [BUGGY]  recalculateSize(in,  in);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(in,  in);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(in,  in);	  recalculateSize(in);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
353	[BUG]  [BUGGY]  recalculateSize(inAvail,  in);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(inAvail,  in);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(inAvail,  in);	  recalculateSize(in);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
354	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
355	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
356	[BUG]  [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
357	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
358	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  eof;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  eof;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  eof;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
359	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  0;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  0;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  0;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
360	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  inAvail  +=  inAvail;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  inAvail  +=  inAvail;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  encodeSize);  inAvail  +=  inAvail;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
361	[BUG]  [BUGGY]  recalculateLength();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateLength();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateLength();	  recalculateSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
362	[BUG]  [BUGGY]  recalculateFullSize();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateFullSize();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateFullSize();	  recalculateSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
363	[BUG]  [BUGGY]  recalculateBase64Size();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateBase64Size();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateBase64Size();	  recalculateSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
364	[BUG]  [BUGGY]  recalculateModuleSize();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateModuleSize();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateModuleSize();	  recalculateSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
365	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
366	[BUG]  [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
367	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
368	[BUG]  [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
369	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
370	[BUG]  [BUGGY]  inAvail  -=  inPos;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  inAvail  -=  inPos;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	inAvail  -=  inPos;	  resize(inAvail);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
371	[BUG]  [BUGGY]  resize(inPos);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(inPos);	  resize(inAvail);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
372	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
373	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    If(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
374	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  1,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
375	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
376	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
377	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
378	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
379	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  when(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  when(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    when(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
380	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  -  1);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail  -  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail  -  1);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
381	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  pos);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  pos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  pos);	      System.arraycopy(in,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
382	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
383	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
384	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
385	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
386	[BUG]  [BUGGY]  Base64.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  Base64.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	Base64.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
387	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  outAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  outAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  outAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
388	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  enAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  enAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  enAvail);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
389	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  Base64.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  Base64.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    Base64.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
390	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  encodeSize);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
391	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  out);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  out);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  inAvail,  out);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
392	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  outAvail);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  outAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  outAvail);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
393	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
394	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
395	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
396	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
397	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  outAvail);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  outAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  outAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
398	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
399	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  when(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  when(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    when(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
400	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  pos);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  pos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  pos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
401	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  encodeSize);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  encodeSize);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
402	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  encodeSize,  inAvail);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  encodeSize,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  encodeSize,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
403	[BUG]  [BUGGY]  ResizePos  pos  =  in.readPos();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  ResizePos  pos  =  in.readPos();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	ResizePos  pos  =  in.readPos();	  resizePos();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
404	[BUG]  [BUGGY]  resizePos()  +  inAvail;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizePos()  +  inAvail;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizePos()  +  inAvail;	  resizePos();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
405	[BUG]  [BUGGY]  resize(inAvail  +  inPos);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(inAvail  +  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(inAvail  +  inPos);	  resize(inAvail);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
406	[BUG]  [BUGGY]  resize(in,  inAvail,  inPos);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inAvail,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inAvail,  inPos);	  resize(in,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
407	[BUG]  [BUGGY]  resize(in,  inAvail,  eof);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inAvail,  eof);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inAvail,  eof);	  resize(in,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
408	[BUG]  [BUGGY]  ResizeByteBuffer  buffer  =  resizeByteBuffer(in,  inPos,  inAvail);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  ResizeByteBuffer  buffer  =  resizeByteBuffer(in,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	ResizeByteBuffer  buffer  =  resizeByteBuffer(in,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
409	[BUG]  [BUGGY]  ResizeByteBuffer  buffer  =  resizeByteBuffer(buf,  inPos,  inAvail);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  ResizeByteBuffer  buffer  =  resizeByteBuffer(buf,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	ResizeByteBuffer  buffer  =  resizeByteBuffer(buf,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
410	[BUG]  [BUGGY]  ResizeBuffer  buffer  =  new  ResizeBuffer(buf,  inPos,  inAvail);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  ResizeBuffer  buffer  =  new  ResizeBuffer(buf,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	ResizeBuffer  buffer  =  new  ResizeBuffer(buf,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
411	[BUG]  [BUGGY]  ResizeBuffer  buffer  =  new  ResizeBuffer(buf.length,  inPos,  inAvail);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  ResizeBuffer  buffer  =  new  ResizeBuffer(buf.length,  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	ResizeBuffer  buffer  =  new  ResizeBuffer(buf.length,  inPos,  inAvail);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
412	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
413	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
414	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    for(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
415	[BUG]  [BUGGY]  eof  =  encodeTable[pos]  +  in;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos]  +  in;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos]  +  in;	  eof    =    encodeTable[pos];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
416	[BUG]  [BUGGY]  eof  =  encodeTable[pos],  inAvail);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos],  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos],  inAvail);	  eof    =    encodeTable[pos];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
417	[BUG]  [BUGGY]  eof  =  encodeTable[pos],  inAvail;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos],  inAvail;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos],  inAvail;	  eof    =    encodeTable[pos];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
418	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  pos);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  pos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  pos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
419	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  -  1);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  -  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
420	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  outAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  outAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  outAvail);	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
421	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  CHUNK_SEPARATOR);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  CHUNK_SEPARATOR);	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
422	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
423	[BUG]  [BUGGY]  resize(in,  inSeparator);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inSeparator);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inSeparator);	  resize(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
424	[BUG]  [BUGGY]  resize(in,  inPos  +  3);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos  +  3);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos  +  3);	  resize(in,    inPos);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
425	[BUG]  [BUGGY]  resize(in,  inPos  +  2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos  +  2);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos  +  2);	  resize(in,    inPos);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
426	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
427	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
428	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
429	[BUG]  [BUGGY]  Base64.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  Base64.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	Base64.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
430	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
431	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  for(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  for(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    for(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
432	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
433	[BUG]  [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  return;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
434	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
435	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  encodeSize);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  encodeSize);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
436	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  enAvail);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  enAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  enAvail);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
437	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  bAvail);  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  bAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  bAvail);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
438	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos);  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
439	[BUG]  [BUGGY]  recalculateLast();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateLast();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateLast();	  recalculateSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
440	[BUG]  [BUGGY]  recalculateDecodeSize();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateDecodeSize();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateDecodeSize();	  recalculateSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
441	[BUG]  [BUGGY]  recalculatePos();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculatePos();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculatePos();	  recalculateSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
442	[BUG]  [BUGGY]  if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
443	[BUG]  [BUGGY]  if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
444	[BUG]  [BUGGY]  if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(!modulus)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
445	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  -  1);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  -  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
446	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  pos,  inAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  pos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  pos,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
447	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  outPos,  inAvail);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  outPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  outPos,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
448	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail  +  2);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail  +  2);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail  +  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
449	[BUG]  [BUGGY]  eof  =  encodeTable[pos++]  &  STANDARD_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos++]  &  STANDARD_ENCODE_TABLE;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++]  &  STANDARD_ENCODE_TABLE;	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
450	[BUG]  [BUGGY]  eof  =  encodeTable[pos++]  &  CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos++]  &  CHUNK_SIZE;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++]  &  CHUNK_SIZE;	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
451	[BUG]  [BUGGY]  eof  =  encodeTable[pos++]  +  INVALID_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos++]  +  INVALID_ENCODE_TABLE;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos++]  +  INVALID_ENCODE_TABLE;	  eof    =    encodeTable[pos++];    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
452	[BUG]  [BUGGY]  System.arraycopy(in,  in,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  in,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  in,  buf,  0,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
453	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
454	[BUG]  [BUGGY]  resize(in,  inPos,  eof);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  eof);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  eof);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
455	[BUG]  [BUGGY]  resize(in,  inPos,  outAvail);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  outAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  outAvail);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
456	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  DECODE_TABLE);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  DECODE_TABLE);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  DECODE_TABLE);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
457	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
458	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
459	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
460	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
461	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  encodeSize;  ++x)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  encodeSize;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  encodeSize;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
462	[BUG]  [BUGGY]  resizeFullSize();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeFullSize();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeFullSize();	  resizeSize();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
463	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    Arrays.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
464	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  Base64.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  Base64.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    Base64.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
465	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  outAvail);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  outAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  outAvail);	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
466	[BUG]  [BUGGY]  resizeBuffer(buf.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBuffer(buf.length);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer(buf.length);	  resizeBuffer();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
467	[BUG]  [BUGGY]  resizeBuffer(in,  inAvail);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBuffer(in,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBuffer(in,  inAvail);	  resizeBuffer();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
468	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
469	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
470	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  this.encodeBase64(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  this.encodeBase64(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  this.encodeBase64(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
471	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  cannot  find  symbol  StringUtils  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  cannot  find  symbol  StringUtils	46	None	add
472	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  2,  inAvail);  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  2,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  2,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
473	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
474	[BUG]  [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
475	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  outAvail);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  outAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  outAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
476	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
477	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  outPos++;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  outPos++;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  outPos++;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
478	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    while(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
479	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  encodeSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  encodeSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  encodeSize);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
480	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  eof);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  eof);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  eof);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
481	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  encodeSize);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  buf,  0,  encodeSize);	      System.arraycopy(buf,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
482	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail  -  1);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  inAvail  -  1);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  0,  buf,  0,  inAvail  -  1);	      System.arraycopy(buf,    0,    buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
483	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
484	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >=  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
485	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
486	[BUG]  [BUGGY]  arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
487	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
488	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
489	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  encodeSize);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
490	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  outAvail);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  outAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  outAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
491	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
492	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  bAvail);  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  bAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  bAvail);	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
493	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  encodeSize);  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  encodeSize);	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
494	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  enAvail);  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  enAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  enAvail);	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
495	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  Base64.arraycopy(buf,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  Base64.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    Base64.arraycopy(buf,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
496	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  outAvail);  [CE]  illegal  start  of  type  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  outAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  outAvail);	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
497	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  pos);  [CE]  illegal  start  of  type  [FE]              NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  0,  pos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  0,  pos);	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
498	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  outPos);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  outPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  outPos);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
499	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  bAvail);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  bAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(in,  inPos,  inAvail,  bAvail);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
500	[BUG]  [BUGGY]  byte[]  x  =  encodeBase64(bAvail,  inPos,  inAvail);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encodeBase64(bAvail,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encodeBase64(bAvail,  inPos,  inAvail);	      byte[]    x    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
501	[BUG]  [BUGGY]  resize(buf,  0,  inAvail,  inAvail);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inAvail,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail,  inAvail);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
502	[BUG]  [BUGGY]  resize(inAvail,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(inAvail,  0,  buf.length);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(inAvail,  0,  buf.length);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
503	[BUG]  [BUGGY]  resize(buf,  0,  inAvail  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inAvail  +  1);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail  +  1);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
504	[BUG]  [BUGGY]  resize(buf,  0,  inAvail,  encodeSize);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inAvail,  encodeSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail,  encodeSize);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
505	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  encodeSize);  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  encodeSize);	  	non-compiled	[CE]  illegal  start  of  type	35	None	add
506	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    Base64.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	non-compiled	[CE]  not  a  statement	35	None	add
507	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  inPos,  inAvail);  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  1,  buf,  inPos,  inAvail);	  	non-compiled	[CE]  not  a  statement	35	None	add
508	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  ch);  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  ch);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  ch);	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
509	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  outAvail);  [CE]  not  a  statement  [FE]            NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  outAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  outAvail);	  	non-compiled	[CE]  not  a  statement	35	None	add
510	[BUG]  [BUGGY]  recalculateSize(buf);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateSize(buf);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateSize(buf);	  recalculateSize(in);    	non-compiled	[CE]  not  a  statement	39	None	replace
511	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  outAvail);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  outAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  outAvail);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	45	None	replace
512	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  outPos);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  outPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  outPos);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	45	None	replace
513	[BUG]  [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  bAvail);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  byte[]  x  =  encode(in,  inPos,  inAvail,  bAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	byte[]  x  =  encode(in,  inPos,  inAvail,  bAvail);	      byte[]    x    =    encode(in,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	45	None	replace
514	[BUG]  [BUGGY]  resize(in,  inPos,  inAvail,  outPos);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  inPos,  inAvail,  outPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  inPos,  inAvail,  outPos);	  resize(in,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	19	None	replace
515	[BUG]  [BUGGY]  eof  =  encodeTable[pos]  &  CHUNK_SIZE;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos]  &  CHUNK_SIZE;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos]  &  CHUNK_SIZE;	  eof    =    encodeTable[pos];    	non-compiled	[CE]  not  a  statement	40	None	replace
516	[BUG]  [BUGGY]  eof  =  encodeTable[pos],  in,  inAvail];  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos],  in,  inAvail];  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos],  in,  inAvail];	  eof    =    encodeTable[pos];    	non-compiled	[CE]  not  a  statement	40	None	replace
517	[BUG]  [BUGGY]  eof  =  encodeTable[pos]  &  CHUNK_SEPARATOR;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos]  &  CHUNK_SEPARATOR;  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos]  &  CHUNK_SEPARATOR;	  eof    =    encodeTable[pos];    	non-compiled	[CE]  not  a  statement	40	None	replace
518	[BUG]  [BUGGY]  eof  =  encodeTable[pos],  inPos,  inAvail);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeTable[pos],  inPos,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeTable[pos],  inPos,  inAvail);	  eof    =    encodeTable[pos];    	non-compiled	[CE]  not  a  statement	40	None	replace
519	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
520	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
521	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  encodeSize);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
522	[BUG]  [BUGGY]  if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
523	[BUG]  [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
524	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    return;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
525	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  if(modulus  ==  DECODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  if(modulus  ==  DECODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  if(modulus  ==  DECODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
526	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  if(modulus  ==  Base64)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  if(modulus  ==  Base64)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  if(modulus  ==  Base64)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
527	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  not  a  statement	29	None	add
528	[BUG]  [BUGGY]  resize(buf,  inPos,  inAvail,  pos);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  inPos,  inAvail,  pos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  inPos,  inAvail,  pos);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	24	None	replace
529	[BUG]  [BUGGY]  resize(buf,  inPos,  inAvail,  outPos);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  inPos,  inAvail,  outPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  inPos,  inAvail,  outPos);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	24	None	replace
530	[BUG]  [BUGGY]  resize(buf,  inPos,  inAvail,  encodeSize);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  inPos,  inAvail,  encodeSize);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  inPos,  inAvail,  encodeSize);	  resize(buf,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	24	None	replace
531	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  pos,  buf,  0,  encodeSize);  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  pos,  buf,  0,  encodeSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  pos,  buf,  0,  encodeSize);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  not  a  statement	44	None	replace
532	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  pos);  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  pos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  in,  buf,  0,  pos);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  not  a  statement	44	None	replace
533	[BUG]  [BUGGY]  System.arraycopy(buf,  x,  CHUNK_SEPARATOR,  0,  inAvail);  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(buf,  x,  CHUNK_SEPARATOR,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(buf,  x,  CHUNK_SEPARATOR,  0,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  not  a  statement	44	None	replace
534	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buf,  0,  inAvail);  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(chunks,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(chunks,  0,  buf,  0,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    	non-compiled	[CE]  not  a  statement	44	None	replace
535	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  imAvail);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  imAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  imAvail);  }	  	non-compiled	[CE]  not  a  statement	8	None	add
536	[BUG]  [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  len);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  in  =  encodeBase64(in,  inPos,  inAvail,  len);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	in  =  encodeBase64(in,  inPos,  inAvail,  len);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	42	None	replace
537	[BUG]  [BUGGY]  eof  =  encodeBase64(in,  inPos,  inAvail);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  eof  =  encodeBase64(in,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	eof  =  encodeBase64(in,  inPos,  inAvail);	      in    =    encodeBase64(in,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	42	None	replace
538	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  pos,  inPos);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  pos,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  pos,  inPos);	  resizePos();    	non-compiled	[CE]  not  a  statement	27	None	replace
539	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  encodeSize,  inPos);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  encodeSize,  inPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  encodeSize,  inPos);	  resizePos();    	non-compiled	[CE]  not  a  statement	27	None	replace
540	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inPos);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inPos);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
541	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    Arrays.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
542	[BUG]  [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  1,  inAvail);  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  ';'  expected	1	None	add
543	[BUG]  [BUGGY]  recalculateFileSize();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateFileSize();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateFileSize();	  recalculateSize();    	non-compiled	[CE]  ';'  expected	28	None	replace
544	[BUG]  [BUGGY]  recalculateLineSize();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  recalculateLineSize();  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	recalculateLineSize();	  recalculateSize();    	non-compiled	[CE]  ';'  expected	28	None	replace
545	[BUG]  [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
546	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
547	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
548	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
549	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
550	[BUG]  [BUGGY]  resize(buf,  0,  inAvail,  pos);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inAvail,  pos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail,  pos);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
551	[BUG]  [BUGGY]  resize(buf,  0,  inAvail  +  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(buf,  0,  inAvail  +  1,  inAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(buf,  0,  inAvail  +  1,  inAvail);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
552	[BUG]  [BUGGY]  resize(in,  0,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in,  0,  buffer.length);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in,  0,  buffer.length);	  resize(buf,    0,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
553	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
554	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SIZE,  0,  buf,  inPos,  inAvail);  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SIZE,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  }  else  {  System.arraycopy(CHUNK_SIZE,  0,  buf,  inPos,  inAvail);	  	non-compiled	[CE]  not  a  statement	35	None	add
555	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  inAvail);	  	non-compiled	[CE]  not  a  statement	35	None	add
556	[BUG]  [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  INAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  INAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  INAvail  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  not  a  statement	10	None	add
557	[BUG]  [BUGGY]  resize(inAvail,  outPos);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(inAvail,  outPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(inAvail,  outPos);	  resize(inAvail);    	non-compiled	[CE]  not  a  statement	26	None	replace
558	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  eof);  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  eof);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  inPos,  eof);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	36	None	replace
559	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  if(modulus  ==  DECODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  if(modulus  ==  DECODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  if(modulus  ==  DECODE_TABLE)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }	  	non-compiled	[CE]  not  a  statement	46	None	add
560	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  if(modulus  ==  Base64)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  if(modulus  ==  Base64)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  if(modulus  ==  Base64)  {  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }	  	non-compiled	[CE]  not  a  statement	46	None	add
561	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SIZE,  0,  buf,  1,  inAvail);  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SIZE,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    1,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  1,  inAvail);  }  else  {  System.arraycopy(CHUNK_SIZE,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  not  a  statement	46	None	add
562	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  inAvail  +=  inAvail;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  inAvail  +=  inAvail;  }	  	non-compiled	[CE]  not  a  statement	15	None	add
563	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
564	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
565	[BUG]  [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
566	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
567	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
568	[BUG]  [BUGGY]  Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  return;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
569	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    Arrays.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);	  	non-compiled	[CE]  illegal  start  of  type	31	None	add
570	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  2,  buf,  pos,  inAvail);  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  0,  buf,  pos,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  2,  buf,  pos,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    0,    buf,    pos,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  2,  buf,  pos,  inAvail);	  	non-compiled	[CE]  illegal  start  of  type	31	None	add
571	[BUG]  [BUGGY]  if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >=  inPos)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
572	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
573	[BUG]  [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  inAvail;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
574	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  0;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  0;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  0;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
575	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  decodeSize;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  decodeSize;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  inAvail  +=  decodeSize;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    inAvail    +=    inAvail;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
576	[BUG]  [BUGGY]  resize(in.getBytes());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resize(in.getBytes());  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resize(in.getBytes());	  resize(in);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
577	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(modulus  ==  STANDARD_ENCODE_TABLE)  {  if(inAvail  <  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
578	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(modulus  ==  STANDARD_ENCODE_TABLE)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arra	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
579	[BUG]  [BUGGY]  if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  0,	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
580	[BUG]  [BUGGY]  if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail;  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail;  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail;  for(int  x  =  0;  x  <  inAvail;  ++x)  {  System.arraycopy(in,	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    System.arraycopy(in,    0,    buf,    0,    inAvail    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
581	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
582	[BUG]  [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
583	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
584	[BUG]  [BUGGY]  Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
585	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  enAvail;  ++x)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  enAvail;  ++x)  {  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  enAvail;  ++x)  {  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
586	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  Arrays.arraycopy(buf,  0,  buf,  0,  inAvail);  [CE]  class,  interface,  or  enum  expected  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  Arrays.arraycopy(buf,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    Arrays.arraycopy(buf,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
587	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  class,  interface,  or  enum  expected  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(in,  0,  buf,  0,  inAvail);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
588	[BUG]  [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  1,  inAvail);  [CE]  class,  interface,  or  enum  expected  [FE]        NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(buf,  0,  buf,  0,  inAvail);  System.arraycopy(buf,  0,  buf,  1,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(buf,    0,    buf,    0,    inAvail);    System.arraycopy(buf,  0,  buf,  1,  inAvail);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
589	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail,  outPos);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail,  outPos);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail,  outPos);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
590	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  outAvail);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  outAvail);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  outAvail);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
591	[BUG]  [BUGGY]  resizeBytes(in,  inPos,  inAvail,  len);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  resizeBytes(in,  inPos,  inAvail,  len);  [BUGGY]    }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	resizeBytes(in,  inPos,  inAvail,  len);	  resizeBytes(in,    inPos,    inAvail);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
592	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
593	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inPos  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
594	[BUG]  [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
595	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(in,  0,  buf,  0,  x);  for(int  x  =  0;  x  <  inAvail;  ++x)  {  break;  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    for(int    x    =    0;    x    <    inAvail;    ++x)    {    break;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
596	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  1,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	add
597	[BUG]  [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  1,  inAvail);  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  1,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    if(inAvail  <  inAvail)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  System.arraycopy(in,  0,  buf,  1,  inAvail);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	add
598	[BUG]  [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(eof)  {  System.arraycopy(in,  0,  buf,  0,  inAvail);  }	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
599	[BUG]  [BUGGY]  Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  Arrays.arraycopy(in,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	Arrays.arraycopy(in,  0,  buf,  0,  inAvail);	      if(inAvail    <    inAvail)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
600	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  X,  buf,  0,  inAvail);  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  X,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  X,  buf,  0,  inAvail);	  	non-compiled	[CE]  ';'  expected	43	None	add
601	[BUG]  [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  imgSize);  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]      System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  inAvail);  System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  imgSize);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	        System.arraycopy(CHUNK_SEPARATOR,    x,    buf,    0,    inAvail);    System.arraycopy(CHUNK_SEPARATOR,  x,  buf,  0,  imgSize);	  	non-compiled	[CE]  ';'  expected	43	None	add
602	[BUG]  [BUGGY]  if(inAvail  <  inPos  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  +  1);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  if(inAvail  <  inPos  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  +  1);  }  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	if(inAvail  <  inPos  ||  inAvail  >  0)  {  System.arraycopy(in,  0,  buf,  0,  inAvail  +  1);  }	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
603	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buf,  0,  inAvail);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionFailedError    [CONTEXT]    void  encode(byte[]  in,  int  inPos,  int  inAvail)  {  if  (eof)  {  return;  }    if  (inAvail  <  0)  {  eof  =  true;  if  (buf  ==  null  ||  buf.length  -  pos  <  encodeSize)  {    [BUGGY]  System.arraycopy(inAvail,  0,  buf,  0,  inAvail);  [BUGGY]    resizeBuf();  }  switch  (modulus)  {  case  1:  buf[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buf[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buf[pos++]  =  PAD;  buf[pos++]  =  PAD;  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buf  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec2/src/java/org/apache/commons/codec/binary/Base64.java	0.6324555320336759	423	423	2	replace	System.arraycopy(inAvail,  0,  buf,  0,  inAvail);	      if(inAvail    <    inAvail    ||    inAvail    >    0)    {    System.arraycopy(in,    0,    buf,    0,    inAvail);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
